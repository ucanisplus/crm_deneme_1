// GalvanizliTelNetsis.jsx
import React, { useState, useEffect, useMemo } from 'react';
import { useAuth } from '@/context/AuthContext';
import { API_URLS, fetchWithAuth, normalizeInputValue } from '@/api-config';
import { toast } from 'react-toastify';
import ExcelJS from 'exceljs';
import { saveAs } from 'file-saver';

const GalvanizliTelNetsis = () => {
  const { user, hasPermission } = useAuth();
  
  // Ana state değişkenleri
  const [currentStep, setCurrentStep] = useState('input'); // input, summary, processing
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState('');
  
  // Talep yönetimi state'leri
  const [requests, setRequests] = useState([]);
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [showRequestsModal, setShowRequestsModal] = useState(false);
  
  // Form verileri
  const [mmGtData, setMmGtData] = useState({
    cap: '',
    kod_2: 'NIT',
    kaplama: '',
    min_mukavemet: '',
    max_mukavemet: '',
    kg: '',
    ic_cap: 45,
    dis_cap: 75,
    tolerans_plus: 0,
    tolerans_minus: 0,
    shrink: 'evet',
    unwinding: '',
    cast_kont: '',
    helix_kont: '',
    elongation: ''
  });
  
  // Hesaplanan/oluşturulan veriler
  const [ymGtData, setYmGtData] = useState(null);
  const [suitableYmSts, setSuitableYmSts] = useState([]);
  const [selectedYmSts, setSelectedYmSts] = useState([]);
  const [autoGeneratedYmSts, setAutoGeneratedYmSts] = useState([]);
  
  // Reçete verileri
  const [mmGtRecete, setMmGtRecete] = useState({});
  const [ymGtRecete, setYmGtRecete] = useState({});
  const [ymStRecetes, setYmStRecetes] = useState({});
  
  // Veritabanı state'leri
  const [savedToDatabase, setSavedToDatabase] = useState(false);
  const [databaseIds, setDatabaseIds] = useState({
    mmGtId: null,
    ymGtId: null,
    ymStIds: []
  });

  // İzin kontrolü
  if (!hasPermission('access:galvanizli-tel')) {
    return (
      <div className="p-4 text-center">
        <div className="bg-red-50 border border-red-200 rounded-md p-4">
          <p className="text-red-700">Bu modüle erişim izniniz bulunmamaktadır.</p>
        </div>
      </div>
    );
  }

  // Sayfa yüklendiğinde talepleri getir
  useEffect(() => {
    fetchRequests();
  }, []);

  // Cap değeri değiştiğinde Dış Çap'ı otomatik hesapla
  useEffect(() => {
    if (mmGtData.cap && mmGtData.ic_cap) {
      const cap = parseFloat(mmGtData.cap);
      const icCap = parseInt(mmGtData.ic_cap);
      const disCap = icCap + (cap * 4); // Basit hesaplama, ihtiyaçlara göre ayarlanabilir
      setMmGtData(prev => ({ ...prev, dis_cap: Math.round(disCap * 10) / 10 }));
    }
  }, [mmGtData.cap, mmGtData.ic_cap]);

  // Talepleri getir
  const fetchRequests = async () => {
    try {
      setIsLoading(true);
      const response = await fetchWithAuth(API_URLS.galSalRequests);
      if (response && response.ok) {
        const data = await response.json();
        setRequests(data.filter(req => req.status === 'pending'));
      }
    } catch (error) {
      console.error('Talepler getirilirken hata:', error);
      toast.error('Talepler getirilemedi');
    } finally {
      setIsLoading(false);
    }
  };

  // Talep seçimi
  const handleSelectRequest = (request) => {
    setSelectedRequest(request);
    setMmGtData({
      cap: request.cap.toString(),
      kod_2: request.kod_2,
      kaplama: request.kaplama.toString(),
      min_mukavemet: request.min_mukavemet.toString(),
      max_mukavemet: request.max_mukavemet.toString(),
      kg: request.kg.toString(),
      ic_cap: request.ic_cap,
      dis_cap: request.dis_cap,
      tolerans_plus: request.tolerans_plus,
      tolerans_minus: request.tolerans_minus,
      shrink: request.shrink || 'evet',
      unwinding: request.unwinding || '',
      cast_kont: '',
      helix_kont: '',
      elongation: ''
    });
    setShowRequestsModal(false);
    setCurrentStep('summary');
    generateYmGtData();
    findSuitableYmSts();
    calculateRecipeValues();
  };

  // YM GT verilerini otomatik oluştur
  const generateYmGtData = () => {
    if (!mmGtData.cap) return;
    
    // Sequence hesapla
    const sequence = '00'; // Basit implementasyon, gerekirse API'den al
    
    const ymGt = {
      stok_kodu: `YM.GT.${mmGtData.kod_2}.${mmGtData.cap.padStart(4, '0')}.${sequence}`,
      stok_adi: `YM ${mmGtData.kod_2} Galvanizli Tel ${mmGtData.cap} mm`,
      cap: parseFloat(mmGtData.cap),
      kod_2: mmGtData.kod_2,
      kaplama: parseInt(mmGtData.kaplama),
      min_mukavemet: parseInt(mmGtData.min_mukavemet),
      max_mukavemet: parseInt(mmGtData.max_mukavemet),
      kg: parseInt(mmGtData.kg),
      ic_cap: mmGtData.ic_cap,
      dis_cap: mmGtData.dis_cap,
      tolerans_plus: mmGtData.tolerans_plus,
      tolerans_minus: mmGtData.tolerans_minus,
      shrink: mmGtData.shrink,
      unwinding: mmGtData.unwinding
    };
    
    setYmGtData(ymGt);
  };

  // Uygun YM ST'leri bul
  const findSuitableYmSts = async () => {
    try {
      const response = await fetchWithAuth(API_URLS.galYmSt);
      if (response && response.ok) {
        const allYmSts = await response.json();
        const cap = parseFloat(mmGtData.cap);
        
        // YM ST seçim kuralları
        let filtered = [];
        
        if (mmGtData.kod_2 === 'PAD') {
          filtered = allYmSts.filter(ymSt => {
            const ymStCap = parseFloat(ymSt.cap);
            return ymStCap >= cap * 0.95 && ymStCap <= cap * 1.05;
          });
        } else if (mmGtData.kod_2 === 'NIT') {
          filtered = allYmSts.filter(ymSt => {
            const ymStCap = parseFloat(ymSt.cap);
            return ymStCap >= cap * 0.935 && ymStCap <= cap * 0.995;
          });
        }
        
        setSuitableYmSts(filtered);
      }
    } catch (error) {
      console.error('YM ST listesi getirilirken hata:', error);
      toast.error('YM ST listesi getirilemedi');
    }
  };

  // Otomatik YM ST oluştur
  const generateAutoYmSts = () => {
    const cap = parseFloat(mmGtData.cap);
    const autoYmSts = [];
    
    // Kaplama türüne göre otomatik YM ST oluştur
    if (mmGtData.kod_2 === 'PAD') {
      autoYmSts.push({
        stok_kodu: `YM.ST.${mmGtData.cap.padStart(4, '0')}.0600.1006`,
        stok_adi: `YM Siyah Tel ${mmGtData.cap.padStart(4, '0')} mm HM:0600.1006`,
        cap: cap,
        filmasin: 600,
        quality: '1006',
        source: 'auto-generated'
      });
    } else if (mmGtData.kod_2 === 'NIT') {
      const adjustedCap = cap * 0.96; // NIT için %4 azaltma
      autoYmSts.push({
        stok_kodu: `YM.ST.${adjustedCap.toFixed(0).padStart(4, '0')}.0600.1006`,
        stok_adi: `YM Siyah Tel ${adjustedCap.toFixed(0).padStart(4, '0')} mm HM:0600.1006`,
        cap: adjustedCap,
        filmasin: 600,
        quality: '1006',
        source: 'auto-generated'
      });
    }
    
    setAutoGeneratedYmSts(autoYmSts);
  };

  // Reçete değerlerini hesapla
  const calculateRecipeValues = () => {
    if (!mmGtData.kg || !mmGtData.cap) return;
    
    const cap = parseFloat(mmGtData.cap);
    const kg = parseFloat(mmGtData.kg);
    
    // MM GT Reçete hesaplamaları
    const mmGtReceteValues = {
      GTPKT01: 10 / kg * 1000, // Paketleme
      'AMB.ÇEM.KARTON.GAL': 8 / kg, // Karton
      'SM.7MMHALKA': 4 / kg, // Halka
      'AMB.APEX CEMBER 38X080': 1.2 / kg, // Çember
      'AMB.TOKA.SIGNODE.114P. DKP': 4 / kg, // Toka
      'SM.DESİ.PAK': calculateDesiConsumption(kg, cap),
      naylon: 1 / kg, // Naylon
      'AMB.SHRİNK': getShrinkCode(mmGtData.ic_cap)
    };
    
    // YM GT Reçete hesaplamaları
    const ymGtReceteValues = {
      GLV01: 1.15 - (0.125 * cap), // Galvanizleme
      '150 03': 0.032 - (0.0029 * cap), // Çinko
      'SM.HİDROLİK.ASİT': calculateAcidConsumption(cap, kg, mmGtData.kaplama),
      'YM.ST.CONSUMPTION': 1 // YM ST tüketimi
    };
    
    // YM ST Reçete hesaplamaları
    const ymStReceteValues = {
      TLC01: 0.2 / Math.pow(cap, 1.7) + 0.02, // Tel çekme
      FILMASIN: 1 // Filmaşin tüketimi
    };
    
    setMmGtRecete(mmGtReceteValues);
    setYmGtRecete(ymGtReceteValues);
    setYmStRecetes(ymStReceteValues);
  };

  // Desi tüketimi hesapla
  const calculateDesiConsumption = (kg, cap) => {
    if (kg >= 500 && kg < 600) return 0.0020;
    if (kg >= 600 && kg < 650) return 0.0017;
    if (kg >= 650 && kg < 750) return 0.0015;
    if (kg >= 750 && kg <= 800) return 0.0013;
    if (kg > 800 && kg < 850) return 0.0012;
    if (kg >= 850 && kg < 900) return 0.0011;
    if (kg >= 900) return 0.0009;
    
    // Çapa göre fallback
    if (cap < 2.0) return 0.0020;
    if (cap >= 2.0 && cap <= 4.0) return 0.0013;
    return 0.0011;
  };

  // Asit tüketimi hesapla
  const calculateAcidConsumption = (cap, kg, kaplama) => {
    const yuzeyAlani = 1000 * 4000 / Math.PI / cap / cap / 7.85 * cap * Math.PI / 1000;
    const tuketilenAsit = 0.0647625; // kg/m2
    return (yuzeyAlani * tuketilenAsit) / 1000;
  };

  // Shrink kodu belirle
  const getShrinkCode = (icCap) => {
    switch (icCap) {
      case 45: return 'AMB.SHRİNK.200*140CM';
      case 50: return 'AMB.SHRİNK.200*160CM';
      case 55: return 'AMB.SHRİNK.200*190CM';
      default: return 'AMB.SHRİNK.200*140CM';
    }
  };

  // Form değişikliklerini işle
  const handleInputChange = (field, value) => {
    setMmGtData(prev => ({
      ...prev,
      [field]: normalizeInputValue(value)
    }));
  };

  // İleri butonu
  const handleNext = () => {
    if (!mmGtData.cap || !mmGtData.kaplama || !mmGtData.min_mukavemet || !mmGtData.max_mukavemet || !mmGtData.kg) {
      toast.error('Lütfen tüm gerekli alanları doldurun');
      return;
    }
    
    setCurrentStep('summary');
    generateYmGtData();
    findSuitableYmSts();
    calculateRecipeValues();
  };

  // YM ST seçimi
  const handleYmStSelection = (ymSt) => {
    if (selectedYmSts.find(item => item.stok_kodu === ymSt.stok_kodu)) {
      setSelectedYmSts(prev => prev.filter(item => item.stok_kodu !== ymSt.stok_kodu));
    } else {
      setSelectedYmSts(prev => [...prev, { ...ymSt, source: 'database' }]);
    }
  };

  // Veritabanına kaydet
  const saveToDatabase = async () => {
    try {
      setIsLoading(true);
      
      // MM GT kaydet
      const mmGtResponse = await fetchWithAuth(API_URLS.galMmGt, {
        method: 'POST',
        body: JSON.stringify(generateCompleteStokKartiData())
      });
      
      if (!mmGtResponse.ok) throw new Error('MM GT kaydedilemedi');
      const mmGtResult = await mmGtResponse.json();
      
      // YM GT kaydet
      const ymGtResponse = await fetchWithAuth(API_URLS.galYmGt, {
        method: 'POST',
        body: JSON.stringify({
          ...ymGtData,
          mm_gt_id: mmGtResult.id
        })
      });
      
      if (!ymGtResponse.ok) throw new Error('YM GT kaydedilemedi');
      const ymGtResult = await ymGtResponse.json();
      
      // YM ST'leri kaydet
      const ymStIds = [];
      for (const ymSt of [...selectedYmSts, ...autoGeneratedYmSts]) {
        const ymStResponse = await fetchWithAuth(API_URLS.galYmSt, {
          method: 'POST',
          body: JSON.stringify(ymSt)
        });
        
        if (ymStResponse.ok) {
          const ymStResult = await ymStResponse.json();
          ymStIds.push(ymStResult.id);
        }
      }
      
      // Reçeteleri kaydet
      await saveRecipesToDatabase(mmGtResult.id, ymGtResult.id, ymStIds);
      
      setDatabaseIds({
        mmGtId: mmGtResult.id,
        ymGtId: ymGtResult.id,
        ymStIds: ymStIds
      });
      
      setSavedToDatabase(true);
      toast.success('Veriler başarıyla kaydedildi');
      
    } catch (error) {
      console.error('Veritabanına kaydetme hatası:', error);
      toast.error('Veritabanına kaydetme hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Reçeteleri kaydet
  const saveRecipesToDatabase = async (mmGtId, ymGtId, ymStIds) => {
    // MM GT reçete kaydet
    let siraNo = 1;
    for (const [key, value] of Object.entries(mmGtRecete)) {
      await fetchWithAuth(API_URLS.galMmGtRecete, {
        method: 'POST',
        body: JSON.stringify({
          mm_gt_id: mmGtId,
          mamul_kodu: generateStokKodu(),
          bilesen_kodu: key,
          miktar: value,
          sira_no: siraNo++,
          operasyon_bilesen: key.includes('01') ? 'Operasyon' : 'Bileşen',
          olcu_br: getOlcuBr(key),
          olcu_br_bilesen: getOlcuBrBilesen(key)
        })
      });
    }
    
    // YM GT reçete kaydet
    siraNo = 1;
    for (const [key, value] of Object.entries(ymGtRecete)) {
      await fetchWithAuth(API_URLS.galYmGtRecete, {
        method: 'POST',
        body: JSON.stringify({
          ym_gt_id: ymGtId,
          mamul_kodu: ymGtData.stok_kodu,
          bilesen_kodu: key,
          miktar: value,
          sira_no: siraNo++,
          operasyon_bilesen: key.includes('01') ? 'Operasyon' : 'Bileşen',
          olcu_br: getOlcuBr(key),
          olcu_br_bilesen: getOlcuBrBilesen(key)
        })
      });
    }
    
    // YM ST reçeteleri kaydet
    for (const ymStId of ymStIds) {
      siraNo = 1;
      for (const [key, value] of Object.entries(ymStRecetes)) {
        await fetchWithAuth(API_URLS.galYmStRecete, {
          method: 'POST',
          body: JSON.stringify({
            ym_st_id: ymStId,
            mamul_kodu: selectedYmSts.find(ymSt => ymSt.id === ymStId)?.stok_kodu || '',
            bilesen_kodu: key,
            miktar: value,
            sira_no: siraNo++,
            operasyon_bilesen: key.includes('01') ? 'Operasyon' : 'Bileşen',
            olcu_br: getOlcuBr(key),
            olcu_br_bilesen: getOlcuBrBilesen(key)
          })
        });
      }
    }
  };

  // Stok kodu oluştur
  const generateStokKodu = () => {
    const sequence = '00'; // Basit implementasyon
    return `GT.${mmGtData.kod_2}.${mmGtData.cap.padStart(4, '0')}.${sequence}`;
  };

  // Excel dosyalarını oluştur
  const generateExcelFiles = async () => {
    try {
      setIsLoading(true);
      
      // Stok Kartı Excel
      await generateStokKartiExcel();
      
      // Reçete Excel
      await generateReceteExcel();
      
      toast.success('Excel dosyaları başarıyla oluşturuldu');
    } catch (error) {
      console.error('Excel oluşturma hatası:', error);
      toast.error('Excel oluşturma hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Stok Kartı Excel oluştur
  const generateStokKartiExcel = async () => {
    const workbook = new ExcelJS.Workbook();
    
    // MM GT Sheet
    const mmGtSheet = workbook.addWorksheet('MM GT');
    mmGtSheet.addRow(getStokKartiHeaders());
    mmGtSheet.addRow(generateCompleteStokKartiData());
    
    // YM GT Sheet
    const ymGtSheet = workbook.addWorksheet('YM GT');
    ymGtSheet.addRow(getYmGtHeaders());
    ymGtSheet.addRow(generateYmGtStokKartiData());
    
    // YM ST Sheet
    const ymStSheet = workbook.addWorksheet('YM ST');
    ymStSheet.addRow(getYmStHeaders());
    [...selectedYmSts, ...autoGeneratedYmSts].forEach(ymSt => {
      ymStSheet.addRow(generateYmStStokKartiData(ymSt));
    });
    
    const buffer = await workbook.xlsx.writeBuffer();
    saveAs(new Blob([buffer]), 'Galvaniz_Stok_Karti.xlsx');
  };

  // Reçete Excel oluştur
  const generateReceteExcel = async () => {
    const workbook = new ExcelJS.Workbook();
    
    // MM GT REÇETE Sheet
    const mmGtReceteSheet = workbook.addWorksheet('MM GT REÇETE');
    mmGtReceteSheet.addRow(getReceteHeaders());
    Object.entries(mmGtRecete).forEach(([key, value], index) => {
      mmGtReceteSheet.addRow(generateMmGtReceteRow(key, value, index + 1));
    });
    
    // YM GT REÇETE Sheet
    const ymGtReceteSheet = workbook.addWorksheet('YM GT REÇETE');
    ymGtReceteSheet.addRow(getReceteHeaders());
    Object.entries(ymGtRecete).forEach(([key, value], index) => {
      ymGtReceteSheet.addRow(generateYmGtReceteRow(key, value, index + 1));
    });
    
    // YM ST REÇETE Sheet
    const ymStReceteSheet = workbook.addWorksheet('YM ST REÇETE');
    ymStReceteSheet.addRow(getReceteHeaders());
    Object.entries(ymStRecetes).forEach(([key, value], index) => {
      ymStReceteSheet.addRow(generateYmStReceteRow(key, value, index + 1));
    });
    
    const buffer = await workbook.xlsx.writeBuffer();
    saveAs(new Blob([buffer]), 'Galvanizli_Tel_Recete.xlsx');
  };

  // Excel helper fonksiyonları
  const getStokKartiHeaders = () => [
    'Stok Kodu', 'Stok Adı', 'Grup Kodu', 'Kod-1', 'Kod-2', 'Cari/Satıcı Kodu',
    'İngilizce İsim', 'Satıcı İsmi', 'Muh. Detay', 'Depo Kodu', 'Br-1', 'Br-2',
    'Pay-1', 'Payda-1', 'Çevrim Değeri-1', 'Ölçü Br-3', 'Çevrim Pay-2', 'Çevrim Payda-2',
    'Çevrim Değeri-2', 'Çap', 'Kaplama', 'Min Mukavemet', 'Max Mukavemet', 'KG',
    'İç Çap/Boy Çubuk AD', 'Dış Çap/En Çubuk AD', 'Çap2', 'Shrink', 'Tolerans(+)',
    'Tolerans(-)', 'Ebat(En)', 'Göz Aralığı', 'Ebat(Boy)', 'Hasır Tipi',
    'Özel Saha 8 (Alf.)', 'Alış Fiyatı', 'Fiyat Birimi', 'Satış Fiyatı-1',
    'Satış Fiyatı-2', 'Satış Fiyatı-3', 'Satış Fiyatı-4', 'Satış Tipi',
    'Döviz Alış', 'Döviz Maliyeti', 'Döviz Satış Fiyatı', 'Azami Stok',
    'Asgari Stok', 'Döv.Tutar', 'Döv.Tipi', 'Bekleme Süresi', 'Temin Süresi',
    'Birim Ağırlık', 'Nakliye Tutar', 'Satış KDV Oranı', 'Alış KDV Oranı',
    'Stok Türü', 'Mali Grup Kodu', 'Barkod 1', 'Barkod 2', 'Barkod 3',
    'Kod-3', 'Kod-4', 'Kod-5', 'Esnek Yapılandır', 'Süper Reçete Kullanılsın',
    'Bağlı Stok Kodu', 'Yapılandırma Kodu', 'Yap. Açıklama', 'Alış Döviz Tipi',
    'Gümrük Tarife Kodu', 'Dağıtıcı Kodu', 'Menşei', 'METARIAL', 'DIA (MM)',
    'DIA TOL (MM) +', 'DIA TOL (MM) -', 'ZING COATING (GR/M2)', 'TENSILE ST. (MPA) MIN',
    'TENSILE ST. (MPA) MAX', 'WAX', 'LIFTING LUGS', 'UNWINDING', 'CAST KONT. (CM)',
    'HELIX KONT. (CM)', 'ELONGATION (%) MIN', 'COIL DIMENSIONS (CM) ID',
    'COIL DIMENSIONS (CM) OD', 'COIL WEIGHT (KG)', 'COIL WEIGHT (KG) MIN',
    'COIL WEIGHT (KG) MAX'
  ];

  const generateCompleteStokKartiData = () => {
    const cap = formatForExcel(mmGtData.cap, 'decimal');
    const toleransPlus = formatForExcel(mmGtData.tolerans_plus, 'decimal');
    const toleransMinus = formatForExcel(mmGtData.tolerans_minus, 'decimal');
    
    return [
      generateStokKodu(), // Stok Kodu
      generateStokAdi(), // Stok Adı
      'MM', // Grup Kodu
      'GT', // Kod-1
      mmGtData.kod_2, // Kod-2
      '', // Cari/Satıcı Kodu
      generateEnglishName(), // İngilizce İsim
      '', // Satıcı İsmi
      '26', // Muh. Detay
      '36', // Depo Kodu
      'KG', // Br-1
      'TN', // Br-2
      '1', // Pay-1
      '1.000', // Payda-1
      '0', // Çevrim Değeri-1
      '', // Ölçü Br-3
      '1', // Çevrim Pay-2
      '1', // Çevrim Payda-2
      '1', // Çevrim Değeri-2
      cap, // Çap
      mmGtData.kaplama, // Kaplama
      mmGtData.min_mukavemet, // Min Mukavemet
      mmGtData.max_mukavemet, // Max Mukavemet
      mmGtData.kg, // KG
      mmGtData.ic_cap, // İç Çap
      mmGtData.dis_cap, // Dış Çap
      '', // Çap2
      mmGtData.shrink, // Shrink
      toleransPlus, // Tolerans(+)
      toleransMinus, // Tolerans(-)
      '', // Ebat(En)
      '', // Göz Aralığı
      '', // Ebat(Boy)
      '', // Hasır Tipi
      '', // Özel Saha 8 (Alf.)
      '0', // Alış Fiyatı
      '1', // Fiyat Birimi
      '0', // Satış Fiyatı-1
      '0', // Satış Fiyatı-2
      '0', // Satış Fiyatı-3
      '0', // Satış Fiyatı-4
      '1', // Satış Tipi
      '0', // Döviz Alış
      '0', // Döviz Maliyeti
      '0', // Döviz Satış Fiyatı
      '0', // Azami Stok
      '0', // Asgari Stok
      '', // Döv.Tutar
      '0', // Döv.Tipi
      '0', // Bekleme Süresi
      '0', // Temin Süresi
      '0', // Birim Ağırlık
      '0', // Nakliye Tutar
      '20', // Satış KDV Oranı
      '20', // Alış KDV Oranı
      'D', // Stok Türü
      '', // Mali Grup Kodu
      '', // Barkod 1
      '', // Barkod 2
      '', // Barkod 3
      '', // Kod-3
      '', // Kod-4
      '', // Kod-5
      'H', // Esnek Yapılandır
      'H', // Süper Reçete Kullanılsın
      '', // Bağlı Stok Kodu
      '', // Yapılandırma Kodu
      '', // Yap. Açıklama
      '2', // Alış Döviz Tipi
      getGumrukTarifeKodu(), // Gümrük Tarife Kodu
      '', // Dağıtıcı Kodu
      '052', // Menşei
      'Galvanizli Tel', // METARIAL
      cap, // DIA (MM)
      toleransPlus, // DIA TOL (MM) +
      toleransMinus, // DIA TOL (MM) -
      mmGtData.kaplama, // ZING COATING (GR/M2)
      mmGtData.min_mukavemet, // TENSILE ST. (MPA) MIN
      mmGtData.max_mukavemet, // TENSILE ST. (MPA) MAX
      '+', // WAX
      '+', // LIFTING LUGS
      mmGtData.unwinding && mmGtData.unwinding !== 'Anti-Clockwise' ? mmGtData.unwinding : '', // UNWINDING
      mmGtData.cast_kont || '', // CAST KONT. (CM)
      mmGtData.helix_kont || '', // HELIX KONT. (CM)
      mmGtData.elongation || '', // ELONGATION (%) MIN
      mmGtData.ic_cap, // COIL DIMENSIONS (CM) ID
      mmGtData.dis_cap, // COIL DIMENSIONS (CM) OD
      mmGtData.kg, // COIL WEIGHT (KG)
      '', // COIL WEIGHT (KG) MIN
      '' // COIL WEIGHT (KG) MAX
    ];
  };

  // Excel için ondalık sayı formatla
  const formatForExcel = (value, type) => {
    if (type === 'decimal' && typeof value === 'number') {
      // Excel'de ondalık sayıları virgülle format et (sadece çap ve tolerans için)
      return value.toFixed(2).replace('.', ',');
    }
    return value;
  };

  const generateStokAdi = () => {
    const cap = mmGtData.cap;
    const toleransPlus = formatForExcel(mmGtData.tolerans_plus, 'decimal');
    const toleransMinus = formatForExcel(mmGtData.tolerans_minus, 'decimal');
    
    return `Galvanizli Tel ${cap} mm -${toleransMinus}/+${toleransPlus} ${mmGtData.kaplama} gr/m²${mmGtData.min_mukavemet}-${mmGtData.max_mukavemet} MPa ID:${mmGtData.ic_cap} cm OD:${mmGtData.dis_cap} cm ${mmGtData.kg} kg`;
  };

  const generateEnglishName = () => {
    const cap = mmGtData.cap;
    const toleransPlus = formatForExcel(mmGtData.tolerans_plus, 'decimal');
    const toleransMinus = formatForExcel(mmGtData.tolerans_minus, 'decimal');
    
    return `Galvanized Steel Wire ${cap} mm -${toleransMinus}/+${toleransPlus} ${mmGtData.kaplama} gr/m²${mmGtData.min_mukavemet}-${mmGtData.max_mukavemet} MPa ID:${mmGtData.ic_cap} cm OD:${mmGtData.dis_cap} cm ${mmGtData.kg} kg`;
  };

  const getGumrukTarifeKodu = () => {
    const cap = parseFloat(mmGtData.cap);
    if (cap >= 0.8 && cap < 1.5) return '721720300011';
    if (cap >= 1.5 && cap < 6.0) return '721720300012';
    return '721720300013';
  };

  // Bileşen ölçü birimleri
  const getOlcuBr = (bilesen) => {
    if (bilesen.includes('01')) return 'DK';
    if (bilesen.includes('03') || bilesen.includes('ASİT')) return 'KG';
    if (bilesen.includes('KARTON') || bilesen.includes('HALKA') || bilesen.includes('TOKA') || bilesen.includes('DESİ')) return 'AD';
    if (bilesen.includes('CEMBER') || bilesen.includes('GLV') || bilesen.includes('FLM')) return 'KG';
    return 'KG';
  };

  const getOlcuBrBilesen = (bilesen) => {
    return '1';
  };

  // Talep onaylama
  const handleApproveRequest = async () => {
    try {
      setIsLoading(true);
      
      const response = await fetchWithAuth(`${API_URLS.galSalRequests}/${selectedRequest.id}`, {
        method: 'PUT',
        body: JSON.stringify({
          status: 'approved',
          processed_by: user.username,
          processed_at: new Date().toISOString(),
          mm_gt_id: databaseIds.mmGtId
        })
      });
      
      if (response.ok) {
        toast.success('Talep onaylandı');
        fetchRequests();
        setSelectedRequest(null);
      } else {
        throw new Error('Talep onaylanamadı');
      }
    } catch (error) {
      console.error('Talep onaylama hatası:', error);
      toast.error('Talep onaylama hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Talep reddetme
  const handleRejectRequest = async (reason) => {
    try {
      setIsLoading(true);
      
      const response = await fetchWithAuth(`${API_URLS.galSalRequests}/${selectedRequest.id}`, {
        method: 'PUT',
        body: JSON.stringify({
          status: 'rejected',
          processed_by: user.username,
          processed_at: new Date().toISOString(),
          rejection_reason: reason
        })
      });
      
      if (response.ok) {
        toast.success('Talep reddedildi');
        fetchRequests();
        setSelectedRequest(null);
      } else {
        throw new Error('Talep reddedilemedi');
      }
    } catch (error) {
      console.error('Talep reddetme hatası:', error);
      toast.error('Talep reddetme hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Başlık ve Talep Butonu */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Galvanizli Tel Netsis Entegrasyonu</h1>
        <button
          onClick={() => setShowRequestsModal(true)}
          className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors relative"
        >
          Talepler
          {requests.length > 0 && (
            <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
              {requests.length}
            </span>
          )}
        </button>
      </div>

      {/* Hata ve Başarı Mesajları */}
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      {successMessage && (
        <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded mb-4">
          {successMessage}
        </div>
      )}

      {/* Ana İçerik */}
      {currentStep === 'input' && (
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-lg font-semibold mb-4">MM GT Ürün Bilgileri</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Çap (mm) <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                step="0.01"
                min="0.8"
                max="8.0"
                value={mmGtData.cap}
                onChange={(e) => handleInputChange('cap', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Kaplama Türü <span className="text-red-500">*</span>
              </label>
              <select
                value={mmGtData.kod_2}
                onChange={(e) => handleInputChange('kod_2', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              >
                <option value="NIT">NIT</option>
                <option value="PAD">PAD</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Kaplama (gr/m²) <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                min="50"
                max="400"
                value={mmGtData.kaplama}
                onChange={(e) => handleInputChange('kaplama', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Min Mukavemet (MPa) <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                min="350"
                max="1000"
                value={mmGtData.min_mukavemet}
                onChange={(e) => handleInputChange('min_mukavemet', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Max Mukavemet (MPa) <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                min="350"
                max="1000"
                value={mmGtData.max_mukavemet}
                onChange={(e) => handleInputChange('max_mukavemet', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Ağırlık (kg) <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                min="250"
                max="1250"
                value={mmGtData.kg}
                onChange={(e) => handleInputChange('kg', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                İç Çap (cm)
              </label>
              <select
                value={mmGtData.ic_cap}
                onChange={(e) => handleInputChange('ic_cap', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              >
                <option value={45}>45</option>
                <option value={50}>50</option>
                <option value={55}>55</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Dış Çap (cm)
              </label>
              <input
                type="number"
                value={mmGtData.dis_cap}
                onChange={(e) => handleInputChange('dis_cap', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                readOnly
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tolerans (+)
              </label>
              <input
                type="number"
                step="0.01"
                min="0"
                max="0.1"
                value={mmGtData.tolerans_plus}
                onChange={(e) => handleInputChange('tolerans_plus', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tolerans (-)
              </label>
              <input
                type="number"
                step="0.01"
                min="0"
                max="0.1"
                value={mmGtData.tolerans_minus}
                onChange={(e) => handleInputChange('tolerans_minus', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Shrink
              </label>
              <select
                value={mmGtData.shrink}
                onChange={(e) => handleInputChange('shrink', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              >
                <option value="evet">Evet</option>
                <option value="hayır">Hayır</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Unwinding
              </label>
              <select
                value={mmGtData.unwinding}
                onChange={(e) => handleInputChange('unwinding', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              >
                <option value="">Anti-Clockwise (Varsayılan)</option>
                <option value="Clockwise">Clockwise</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Cast Kont
              </label>
              <input
                type="text"
                value={mmGtData.cast_kont}
                onChange={(e) => handleInputChange('cast_kont', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Helix Kont
              </label>
              <input
                type="text"
                value={mmGtData.helix_kont}
                onChange={(e) => handleInputChange('helix_kont', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Elongation
              </label>
              <input
                type="text"
                value={mmGtData.elongation}
                onChange={(e) => handleInputChange('elongation', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
              />
            </div>
          </div>

          <div className="mt-6 flex justify-end">
            <button
              onClick={handleNext}
              disabled={isLoading}
              className="bg-red-600 text-white px-6 py-2 rounded-md hover:bg-red-700 transition-colors disabled:opacity-50"
            >
              {isLoading ? 'İşleniyor...' : 'Devam'}
            </button>
          </div>
        </div>
      )}

      {currentStep === 'summary' && (
        <div className="space-y-6">
          {/* MM GT Özet */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-semibold mb-4">MM GT Ürün Özeti</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <span className="text-sm text-gray-500">Stok Kodu:</span>
                <p className="font-medium">{generateStokKodu()}</p>
              </div>
              <div>
                <span className="text-sm text-gray-500">Çap:</span>
                <p className="font-medium">{mmGtData.cap} mm</p>
              </div>
              <div>
                <span className="text-sm text-gray-500">Kaplama Türü:</span>
                <p className="font-medium">{mmGtData.kod_2}</p>
              </div>
              <div>
                <span className="text-sm text-gray-500">Kaplama:</span>
                <p className="font-medium">{mmGtData.kaplama} gr/m²</p>
              </div>
              <div>
                <span className="text-sm text-gray-500">Mukavemet:</span>
                <p className="font-medium">{mmGtData.min_mukavemet}-{mmGtData.max_mukavemet} MPa</p>
              </div>
              <div>
                <span className="text-sm text-gray-500">Ağırlık:</span>
                <p className="font-medium">{mmGtData.kg} kg</p>
              </div>
            </div>
          </div>

          {/* YM GT Özet */}
          {ymGtData && (
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold mb-4">YM GT Ürün Özeti</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div>
                  <span className="text-sm text-gray-500">Stok Kodu:</span>
                  <p className="font-medium">{ymGtData.stok_kodu}</p>
                </div>
                <div>
                  <span className="text-sm text-gray-500">Stok Adı:</span>
                  <p className="font-medium">{ymGtData.stok_adi}</p>
                </div>
              </div>
            </div>
          )}

          {/* YM ST Yönetimi */}
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-semibold">YM ST Seçimi</h2>
              <button
                onClick={generateAutoYmSts}
                className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
              >
                Otomatik Oluştur
              </button>
            </div>

            {/* Uygun YM ST'ler */}
            {suitableYmSts.length > 0 && (
              <div className="mb-6">
                <h3 className="text-md font-medium mb-2">Veritabanından Uygun YM ST'ler</h3>
                <div className="space-y-2">
                  {suitableYmSts.map(ymSt => (
                    <div
                      key={ymSt.id}
                      className={`p-3 border rounded-md cursor-pointer ${
                        selectedYmSts.find(item => item.stok_kodu === ymSt.stok_kodu)
                          ? 'bg-blue-50 border-blue-500'
                          : 'bg-gray-50 border-gray-200'
                      }`}
                      onClick={() => handleYmStSelection(ymSt)}
                    >
                      <div className="flex justify-between items-center">
                        <div>
                          <p className="font-medium">{ymSt.stok_kodu}</p>
                          <p className="text-sm text-gray-600">{ymSt.stok_adi}</p>
                        </div>
                        <div className="text-sm text-gray-500">
                          {ymSt.cap} mm
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Otomatik Oluşturulan YM ST'ler */}
            {autoGeneratedYmSts.length > 0 && (
              <div className="mb-6">
                <h3 className="text-md font-medium mb-2">Otomatik Oluşturulan YM ST'ler</h3>
                <div className="space-y-2">
                  {autoGeneratedYmSts.map((ymSt, index) => (
                    <div
                      key={index}
                      className="p-3 border rounded-md bg-green-50 border-green-200"
                    >
                      <div className="flex justify-between items-center">
                        <div>
                          <p className="font-medium">{ymSt.stok_kodu}</p>
                          <p className="text-sm text-gray-600">{ymSt.stok_adi}</p>
                          <span className="inline-block mt-1 px-2 py-1 text-xs bg-green-100 text-green-800 rounded">
                            Otomatik Oluşturuldu
                          </span>
                        </div>
                        <div className="text-sm text-gray-500">
                          {ymSt.cap} mm
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Seçilen YM ST'ler */}
            {selectedYmSts.length > 0 && (
              <div>
                <h3 className="text-md font-medium mb-2">Seçilen YM ST'ler</h3>
                <div className="space-y-2">
                  {selectedYmSts.map((ymSt, index) => (
                    <div
                      key={index}
                      className="p-3 border rounded-md bg-blue-50 border-blue-200"
                    >
                      <div className="flex justify-between items-center">
                        <div>
                          <p className="font-medium">{ymSt.stok_kodu}</p>
                          <p className="text-sm text-gray-600">{ymSt.stok_adi}</p>
                          <span className="inline-block mt-1 px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded">
                            Veritabanından
                          </span>
                        </div>
                        <button
                          onClick={() => setSelectedYmSts(prev => prev.filter((_, i) => i !== index))}
                          className="text-red-500 hover:text-red-700"
                        >
                          Kaldır
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Reçete Bölümü */}
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-semibold">Reçete Değerleri</h2>
              <button
                onClick={calculateRecipeValues}
                className="bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 transition-colors"
              >
                Otomatik Doldur
              </button>
            </div>

            {/* MM GT Reçete */}
            <div className="mb-6">
              <h3 className="text-md font-medium mb-2">MM GT Reçete</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {Object.entries(mmGtRecete).map(([key, value]) => (
                  <div key={key}>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      {key}
                    </label>
                    <input
                      type="number"
                      step="0.000001"
                      value={value}
                      onChange={(e) => setMmGtRecete(prev => ({
                        ...prev,
                        [key]: parseFloat(e.target.value) || 0
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                    />
                  </div>
                ))}
              </div>
            </div>

            {/* YM GT Reçete */}
            <div className="mb-6">
              <h3 className="text-md font-medium mb-2">YM GT Reçete</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {Object.entries(ymGtRecete).map(([key, value]) => (
                  <div key={key}>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      {key}
                    </label>
                    <input
                      type="number"
                      step="0.000001"
                      value={value}
                      onChange={(e) => setYmGtRecete(prev => ({
                        ...prev,
                        [key]: parseFloat(e.target.value) || 0
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                    />
                  </div>
                ))}
              </div>
            </div>

            {/* YM ST Reçete */}
            <div>
              <h3 className="text-md font-medium mb-2">YM ST Reçete</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {Object.entries(ymStRecetes).map(([key, value]) => (
                  <div key={key}>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      {key}
                    </label>
                    <input
                      type="number"
                      step="0.000001"
                      value={value}
                      onChange={(e) => setYmStRecetes(prev => ({
                        ...prev,
                        [key]: parseFloat(e.target.value) || 0
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                    />
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* İşlem Butonları */}
          <div className="flex flex-wrap gap-4 justify-center">
            <button
              onClick={() => setCurrentStep('input')}
              className="bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors"
            >
              Geri
            </button>
            
            {!savedToDatabase && (
              <button
                onClick={saveToDatabase}
                disabled={isLoading}
                className="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50"
              >
                {isLoading ? 'Kaydediliyor...' : 'Veritabanına Kaydet'}
              </button>
            )}
            
            <button
              onClick={generateExcelFiles}
              disabled={isLoading}
              className="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700 transition-colors disabled:opacity-50"
            >
              {isLoading ? 'Oluşturuluyor...' : 'Excel Dosyalarını Oluştur'}
            </button>
            
            {selectedRequest && savedToDatabase && (
              <button
                onClick={handleApproveRequest}
                disabled={isLoading}
                className="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700 transition-colors disabled:opacity-50"
              >
                {isLoading ? 'Onaylanıyor...' : 'Talebi Onayla'}
              </button>
            )}
          </div>
        </div>
      )}

      {/* Talepler Modalı */}
      {showRequestsModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg w-full max-w-6xl max-h-[80vh] overflow-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-bold">Bekleyen Talepler</h2>
                <button
                  onClick={() => setShowRequestsModal(false)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              {isLoading ? (
                <div className="flex justify-center items-center py-8">
                  <div className="text-gray-500">Yükleniyor...</div>
                </div>
              ) : requests.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  Bekleyen talep bulunamadı.
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Çap
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Kaplama Türü
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Kaplama
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Mukavemet
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Ağırlık
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          İşlem
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {requests.map((request) => (
                        <tr key={request.id} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            {request.cap} mm
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {request.kod_2}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {request.kaplama} gr/m²
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {request.min_mukavemet}-{request.max_mukavemet} MPa
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {request.kg} kg
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button
                              onClick={() => handleSelectRequest(request)}
                              className="text-blue-600 hover:text-blue-900"
                            >
                              Seç
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default GalvanizliTelNetsis;
