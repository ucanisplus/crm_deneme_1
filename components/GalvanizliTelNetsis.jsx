// GalvanizliTelNetsis.jsx
import React, { useState, useEffect, useMemo } from 'react';
import { useAuth } from '@/context/AuthContext';
import { API_URLS, fetchWithAuth, normalizeInputValue } from '@/api-config';
import { toast } from 'react-toastify';
import ExcelJS from 'exceljs';
import { saveAs } from 'file-saver';

const GalvanizliTelNetsis = () => {
  const { user, hasPermission } = useAuth();
  
  // Ana state değişkenleri
  const [currentStep, setCurrentStep] = useState('input'); // input, summary, processing
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState('');
  
  // Talep yönetimi state'leri
  const [requests, setRequests] = useState([]);
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [showRequestsModal, setShowRequestsModal] = useState(false);
  
  // Mevcut MM GT seçimi için state'ler
  const [existingMmGts, setExistingMmGts] = useState([]);
  const [selectedExistingMmGt, setSelectedExistingMmGt] = useState(null);
  const [showExistingMmGtModal, setShowExistingMmGtModal] = useState(false);
  
  // Form verileri
  const [mmGtData, setMmGtData] = useState({
    cap: '',
    kod_2: 'NIT',
    kaplama: '',
    min_mukavemet: '',
    max_mukavemet: '',
    kg: '',
    ic_cap: 45,
    dis_cap: 75,
    tolerans_plus: 0,
    tolerans_minus: 0,
    shrink: 'evet',
    unwinding: '',
    cast_kont: '',
    helix_kont: '',
    elongation: ''
  });
  
  // Hesaplanan/oluşturulan veriler
  const [ymGtData, setYmGtData] = useState(null);
  const [suitableYmSts, setSuitableYmSts] = useState([]);
  const [selectedYmSts, setSelectedYmSts] = useState([]);
  const [autoGeneratedYmSts, setAutoGeneratedYmSts] = useState([]);
  
  // Reçete verileri - Her YMST için ayrı reçete tutulacak
  const [mmGtRecetes, setMmGtRecetes] = useState({}); // { index: receteData }
  const [ymGtRecete, setYmGtRecete] = useState({});
  const [ymStRecetes, setYmStRecetes] = useState({}); // { ymStId: receteData }
  
  // Veritabanı state'leri
  const [savedToDatabase, setSavedToDatabase] = useState(false);
  const [databaseIds, setDatabaseIds] = useState({
    mmGtIds: [], // Çoklu MM GT ID'ler
    ymGtId: null,
    ymStIds: []
  });

  // İzin kontrolü
  if (!hasPermission('access:galvanizli-tel')) {
    return (
      <div className="p-4 text-center">
        <div className="bg-red-50 border border-red-200 rounded-md p-4">
          <p className="text-red-700">Bu modüle erişim izniniz bulunmamaktadır.</p>
        </div>
      </div>
    );
  }

  // Sayfa yüklendiğinde talepleri getir
  useEffect(() => {
    fetchRequests();
    fetchExistingMmGts();
  }, []);

  // Cap değeri değiştiğinde Dış Çap'ı otomatik hesapla
  useEffect(() => {
    if (mmGtData.cap && mmGtData.ic_cap) {
      const cap = parseFloat(mmGtData.cap) || 0;
      const icCap = parseInt(mmGtData.ic_cap) || 45;
      let disCap;
      
      // Çap ve iç çapa göre dış çap hesaplama
      if (icCap === 45) disCap = 75;
      else if (icCap === 50) disCap = 90;
      else if (icCap === 55) disCap = 105;
      else disCap = icCap + (cap * 10); // Genel hesaplama
      
      setMmGtData(prev => ({ ...prev, dis_cap: disCap }));
    }
  }, [mmGtData.cap, mmGtData.ic_cap]);

  // Kod-2 değişikliğinde kaplama değerini güncelle
  useEffect(() => {
    if (mmGtData.kod_2 === 'PAD') {
      setMmGtData(prev => ({ ...prev, kaplama: '50' }));
    }
  }, [mmGtData.kod_2]);

  // Talepleri getir
  const fetchRequests = async () => {
    try {
      setIsLoading(true);
      const response = await fetchWithAuth(`${API_URLS.galSalRequests}?status=pending`);
      if (response && response.ok) {
        const data = await response.json();
        setRequests(Array.isArray(data) ? data : []);
      }
    } catch (error) {
      console.error('Talepler getirilirken hata:', error);
      toast.error('Talepler getirilemedi');
    } finally {
      setIsLoading(false);
    }
  };

  // Mevcut MM GT'leri getir
  const fetchExistingMmGts = async () => {
    try {
      const response = await fetchWithAuth(API_URLS.galMmGt);
      if (response && response.ok) {
        const data = await response.json();
        setExistingMmGts(Array.isArray(data) ? data : []);
      }
    } catch (error) {
      console.error('Mevcut MM GT listesi getirilirken hata:', error);
      toast.error('Mevcut MM GT listesi getirilemedi');
    }
  };

  // Talep seçimi
  const handleSelectRequest = (request) => {
    setSelectedRequest(request);
    setMmGtData({
      cap: request.cap ? request.cap.toString() : '',
      kod_2: request.kod_2 || 'NIT',
      kaplama: request.kaplama ? request.kaplama.toString() : '',
      min_mukavemet: request.min_mukavemet ? request.min_mukavemet.toString() : '',
      max_mukavemet: request.max_mukavemet ? request.max_mukavemet.toString() : '',
      kg: request.kg ? request.kg.toString() : '',
      ic_cap: request.ic_cap || 45,
      dis_cap: request.dis_cap || 75,
      tolerans_plus: request.tolerans_plus || 0,
      tolerans_minus: request.tolerans_minus || 0,
      shrink: request.shrink || 'evet',
      unwinding: request.unwinding || '',
      cast_kont: '',
      helix_kont: '',
      elongation: ''
    });
    setShowRequestsModal(false);
    setCurrentStep('summary');
    generateYmGtData();
    findSuitableYmSts();
    calculateRecipeValues();
  };

  // Mevcut MM GT seçimi
  const handleSelectExistingMmGt = (mmGt) => {
    setSelectedExistingMmGt(mmGt);
    setMmGtData({
      cap: mmGt.cap ? mmGt.cap.toString() : '',
      kod_2: mmGt.kod_2 || 'NIT',
      kaplama: mmGt.kaplama ? mmGt.kaplama.toString() : '',
      min_mukavemet: mmGt.min_mukavemet ? mmGt.min_mukavemet.toString() : '',
      max_mukavemet: mmGt.max_mukavemet ? mmGt.max_mukavemet.toString() : '',
      kg: mmGt.kg ? mmGt.kg.toString() : '',
      ic_cap: mmGt.ic_cap || 45,
      dis_cap: mmGt.dis_cap || 75,
      tolerans_plus: mmGt.tolerans_plus || 0,
      tolerans_minus: mmGt.tolerans_minus || 0,
      shrink: mmGt.shrink || 'evet',
      unwinding: mmGt.unwinding || '',
      cast_kont: mmGt.cast_kont || '',
      helix_kont: mmGt.helix_kont || '',
      elongation: mmGt.elongation || ''
    });
    setShowExistingMmGtModal(false);
    setCurrentStep('summary');
    generateYmGtData();
    findSuitableYmSts();
    calculateRecipeValues();
  };

  // YM GT verilerini otomatik oluştur
  const generateYmGtData = () => {
    if (!mmGtData.cap) return;
    
    const capFormatted = parseFloat(mmGtData.cap).toFixed(2).padStart(4, '0').replace('.', '');
    const sequence = '00'; // İlk YM GT için
    
    const ymGt = {
      stok_kodu: `YM.GT.${mmGtData.kod_2}.${capFormatted}.${sequence}`,
      stok_adi: `YM ${mmGtData.kod_2} Galvanizli Tel ${mmGtData.cap} mm`,
      cap: parseFloat(mmGtData.cap) || 0,
      kod_2: mmGtData.kod_2,
      kaplama: parseInt(mmGtData.kaplama) || 0,
      min_mukavemet: parseInt(mmGtData.min_mukavemet) || 0,
      max_mukavemet: parseInt(mmGtData.max_mukavemet) || 0,
      kg: parseInt(mmGtData.kg) || 0,
      ic_cap: mmGtData.ic_cap,
      dis_cap: mmGtData.dis_cap,
      tolerans_plus: parseFloat(mmGtData.tolerans_plus) || 0,
      tolerans_minus: parseFloat(mmGtData.tolerans_minus) || 0,
      shrink: mmGtData.shrink,
      unwinding: mmGtData.unwinding
    };
    
    setYmGtData(ymGt);
  };

  // Uygun YM ST'leri bul (prompt'taki kriterlere göre)
  const findSuitableYmSts = async () => {
    try {
      const response = await fetchWithAuth(API_URLS.galYmSt);
      if (response && response.ok) {
        const allYmSts = await response.json();
        const cap = parseFloat(mmGtData.cap) || 0;
        let filtered = [];
        
        if (Array.isArray(allYmSts)) {
          if (mmGtData.kod_2 === 'PAD') {
            // PAD için çap aralığı kriterlerine göre filtrele
            if (cap >= 0.12 && cap <= 0.14) {
              filtered = allYmSts.filter(ymSt => parseFloat(ymSt.cap) >= 0.12 && parseFloat(ymSt.cap) <= 0.14);
            } else if (cap >= 0.15 && cap <= 2.55) {
              filtered = allYmSts.filter(ymSt => parseFloat(ymSt.cap) >= 0.15 && parseFloat(ymSt.cap) <= 2.55);
            } else if (cap >= 2.60 && cap <= 4.25) {
              filtered = allYmSts.filter(ymSt => parseFloat(ymSt.cap) >= 2.60 && parseFloat(ymSt.cap) <= 4.25);
            } else if (cap >= 4.30 && cap <= 5.90) {
              filtered = allYmSts.filter(ymSt => parseFloat(ymSt.cap) >= 4.30 && parseFloat(ymSt.cap) <= 5.90);
            } else if (cap >= 6.00 && cap <= 7.00) {
              filtered = allYmSts.filter(ymSt => parseFloat(ymSt.cap) >= 6.00 && parseFloat(ymSt.cap) <= 7.00);
            } else if (cap >= 7.30 && cap <= 7.40) {
              filtered = allYmSts.filter(ymSt => parseFloat(ymSt.cap) >= 7.30 && parseFloat(ymSt.cap) <= 7.40);
            } else if (cap >= 7.70 && cap <= 8.00) {
              filtered = allYmSts.filter(ymSt => parseFloat(ymSt.cap) >= 7.70 && parseFloat(ymSt.cap) <= 8.00);
            }
          } else if (mmGtData.kod_2 === 'NIT') {
            // NIT için hesaplanan çap aralığına göre filtrele (prompt'ta belirtilen formüllerle)
            const minYmStCap = cap * 0.935; // %6.5 azalma
            const maxYmStCap = cap * 0.995; // %0.5 azalma
            filtered = allYmSts.filter(ymSt => {
              const ymStCap = parseFloat(ymSt.cap) || 0;
              return ymStCap >= minYmStCap && ymStCap <= maxYmStCap;
            });
          }
        }
        
        setSuitableYmSts(filtered);
      }
    } catch (error) {
      console.error('YM ST listesi getirilirken hata:', error);
      toast.error('YM ST listesi getirilemedi');
    }
  };

  // Otomatik YM ST oluştur
  const generateAutoYmSts = () => {
    const cap = parseFloat(mmGtData.cap) || 0;
    const autoYmSts = [];
    
    if (mmGtData.kod_2 === 'PAD') {
      // PAD için otomatik YM ST oluştur
      const adjustedCap = cap; // PAD için çap ayarlaması yok
      const capStr = adjustedCap.toFixed(2).padStart(4, '0').replace('.', '');
      const filmasinCap = getFilmasinForCap(cap);
      const quality = getQualityForCap(cap);
      
      autoYmSts.push({
        stok_kodu: `YM.ST.${capStr}.${filmasinCap}.${quality}`,
        stok_adi: `YM Siyah Tel ${capStr} mm HM:${filmasinCap}.${quality}`,
        cap: adjustedCap,
        filmasin: parseInt(filmasinCap),
        quality: quality,
        source: 'auto-generated'
      });
    } else if (mmGtData.kod_2 === 'NIT') {
      // NIT için otomatik YM ST oluştur
      const adjustedCap = cap * 0.96; // NIT için %4 azaltma
      const capStr = adjustedCap.toFixed(2).padStart(4, '0').replace('.', '');
      const filmasinCap = getFilmasinForCap(adjustedCap);
      const quality = getQualityForCap(adjustedCap);
      
      autoYmSts.push({
        stok_kodu: `YM.ST.${capStr}.${filmasinCap}.${quality}`,
        stok_adi: `YM Siyah Tel ${capStr} mm HM:${filmasinCap}.${quality}`,
        cap: adjustedCap,
        filmasin: parseInt(filmasinCap),
        quality: quality,
        source: 'auto-generated'
      });
    }
    
    setAutoGeneratedYmSts(autoYmSts);
  };

  // Çap değerine göre filmaşin seç
  const getFilmasinForCap = (cap) => {
    if (cap < 2.0) return '0550';
    if (cap >= 2.0 && cap < 3.0) return '0600';
    if (cap >= 3.0 && cap < 4.5) return '0600';
    if (cap >= 4.5 && cap < 6.0) return '0700';
    if (cap >= 6.0 && cap < 7.5) return '0800';
    return '1000';
  };

  // Çap değerine göre kalite seç
  const getQualityForCap = (cap) => {
    if (cap < 2.0) return '1006';
    if (cap >= 2.0 && cap < 3.0) return '1006';
    if (cap >= 3.0 && cap < 4.5) return '1008';
    if (cap >= 4.5 && cap < 6.0) return '1010';
    if (cap >= 6.0 && cap < 7.5) return '1010';
    return '1010';
  };

  // Reçete değerlerini hesapla
  const calculateRecipeValues = () => {
    if (!mmGtData.kg || !mmGtData.cap) return;
    
    const cap = parseFloat(mmGtData.cap) || 0;
    const kg = parseFloat(mmGtData.kg) || 0;
    const kaplama = parseInt(mmGtData.kaplama) || 0;
    
    // YM GT Reçete hesaplamaları
    const ymGtReceteValues = {
      GLV01: 1.15 - (0.125 * cap), // Galvanizleme operasyonu
      '150 03': (((1000 * 4000 / Math.PI / 7.85 / cap / cap * cap * Math.PI / 1000 * kaplama / 1000) + (5.54 * 0.6) + (2.73 * 0.7)) / 1000), // Çinko
      'SM.HİDROLİK.ASİT': calculateAcidConsumption(cap, kg, kaplama), // Asit
      'YM.ST.CONSUMPTION': 1 // YM ST tüketimi
    };
    
    // YM ST Reçete hesaplamaları (her YM ST için aynı)
    const ymStReceteTemplate = {
      TLC01: 0.2 / Math.pow(cap, 1.7) + 0.02, // Tel çekme operasyonu
      FILMASIN: 1 // Filmaşin tüketimi
    };
    
    setYmGtRecete(ymGtReceteValues);
    
    // Her seçili/oluşturulan YM ST için reçete oluştur
    const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
    const ymStReceteValues = {};
    allYmSts.forEach((ymSt, index) => {
      ymStReceteValues[ymSt.stok_kodu || index] = { ...ymStReceteTemplate };
    });
    setYmStRecetes(ymStReceteValues);
  };

  // Her MM GT için ayrı reçete hesapla
  const calculateMmGtRecetes = () => {
    const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
    const recetes = {};
    
    allYmSts.forEach((ymSt, index) => {
      const kg = parseFloat(mmGtData.kg) || 0;
      const cap = parseFloat(mmGtData.cap) || 0;
      
      recetes[index] = {
        'GTPKT01': (10 / kg) * 1000, // Paketleme operasyonu
        'AMB.ÇEM.KARTON.GAL': 8 / kg, // Karton
        [getShrinkCode(mmGtData.ic_cap)]: 1 / kg, // Shrink (dinamik kod ile)
        'SM.7MMHALKA': 4 / kg, // Halka
        'AMB.APEX CEMBER 38X080': 1.2 / kg, // Çember
        'AMB.TOKA.SIGNODE.114P. DKP': 4 / kg, // Toka
        'SM.DESİ.PAK': calculateDesiConsumption(kg, cap), // Desi
        'naylon': 1 / kg // Naylon (hesaplama formülü eklendi)
      };
    });
    
    setMmGtRecetes(recetes);
  };

  // Asit tüketimi hesaplama (Excel formülü)
  const calculateAcidConsumption = (cap, kg, kaplama) => {
    const yuzeyAlani = 1000 * 4000 / Math.PI / cap / cap / 7.85 * cap * Math.PI / 1000;
    const tuketilenAsit = 0.0647625; // kg/m2
    return (yuzeyAlani * tuketilenAsit) / 1000;
  };

  // Desi tüketimi hesapla (prompt'taki formüle göre)
  const calculateDesiConsumption = (kg, cap) => {
    // Önce kg kategorisine göre
    if (kg >= 500 && kg < 600) return 0.0020;
    if (kg >= 600 && kg < 650) return 0.0017;
    if (kg >= 650 && kg < 750) return 0.0015;
    if (kg >= 750 && kg <= 800) return 0.0013;
    if (kg > 800 && kg < 850) return 0.0012;
    if (kg >= 850 && kg < 900) return 0.0011;
    if (kg >= 900) return 0.0009;
    
    // Çapa göre fallback
    if (cap < 2.0) return 0.0020;
    if (cap >= 2.0 && cap <= 4.0) return 0.0013;
    return 0.0011;
  };

  // Shrink kodu belirle (tam kod ile)
  const getShrinkCode = (icCap) => {
    switch (parseInt(icCap)) {
      case 45: return 'AMB.SHRİNK.200*140CM';
      case 50: return 'AMB.SHRİNK.200*160CM';
      case 55: return 'AMB.SHRİNK.200*190CM';
      default: return 'AMB.SHRİNK.200*140CM';
    }
  };

  // Gümrük Tarife Kodu belirle
  const getGumrukTarifeKodu = () => {
    const cap = parseFloat(mmGtData.cap) || 0;
    if (cap >= 0.8 && cap < 1.5) return '721720300011';
    if (cap >= 1.5 && cap < 6.0) return '721720300012';
    return '721720300013';
  };

  // Form değişikliklerini işle - doğru formatlamaya dikkat et
  const handleInputChange = (field, value) => {
    setMmGtData(prev => ({
      ...prev,
      [field]: value // NormalizeInputValue kaldırıldı, direkt değer atanacak
    }));
  };

  // Manuele geri dön
  const handleBackToManual = () => {
    setSelectedRequest(null);
    setSelectedExistingMmGt(null);
    setCurrentStep('input');
    setSavedToDatabase(false);
    setDatabaseIds({ mmGtIds: [], ymGtId: null, ymStIds: [] });
  };

  // İleri butonu
  const handleNext = () => {
    if (!mmGtData.cap || !mmGtData.kaplama || !mmGtData.min_mukavemet || !mmGtData.max_mukavemet || !mmGtData.kg) {
      toast.error('Lütfen tüm gerekli alanları doldurun');
      return;
    }
    
    setCurrentStep('summary');
    generateYmGtData();
    findSuitableYmSts();
    calculateRecipeValues();
  };

  // YM ST seçimi
  const handleYmStSelection = (ymSt) => {
    const isSelected = selectedYmSts.find(item => item.stok_kodu === ymSt.stok_kodu);
    if (isSelected) {
      setSelectedYmSts(prev => prev.filter(item => item.stok_kodu !== ymSt.stok_kodu));
    } else {
      setSelectedYmSts(prev => [...prev, { ...ymSt, source: 'database' }]);
    }
  };

  // Seçili YM ST'lere göre MM GT reçetelerini güncelle
  useEffect(() => {
    if (selectedYmSts.length > 0 || autoGeneratedYmSts.length > 0) {
      calculateMmGtRecetes();
    }
  }, [selectedYmSts, autoGeneratedYmSts, mmGtData.kg, mmGtData.ic_cap]);

  // Veritabanına kaydet - çoklu MM GT destekli
  const saveToDatabase = async () => {
    try {
      setIsLoading(true);
      const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
      
      if (allYmSts.length === 0) {
        toast.error('En az bir YM ST seçmelisiniz veya oluşturmalısınız');
        return;
      }
      
      const mmGtIds = [];
      const ymStIds = [];
      
      // YM GT'yi kaydet
      const ymGtResponse = await fetchWithAuth(API_URLS.galYmGt, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(generateYmGtDatabaseData())
      });
      
      if (!ymGtResponse || !ymGtResponse.ok) {
        const errorText = await ymGtResponse?.text() || 'YM GT kaydedilemedi';
        throw new Error(errorText);
      }
      const ymGtResult = await ymGtResponse.json();
      
      // Her YM ST için bir MM GT oluştur
      for (let i = 0; i < allYmSts.length; i++) {
        const ymSt = allYmSts[i];
        const sequence = i.toString().padStart(2, '0');
        
        // MM GT kaydet
        const mmGtData = generateMmGtDatabaseData(sequence);
        const mmGtResponse = await fetchWithAuth(API_URLS.galMmGt, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(mmGtData)
        });
        
        if (!mmGtResponse || !mmGtResponse.ok) {
          const errorText = await mmGtResponse?.text() || 'MM GT kaydedilemedi';
          throw new Error(`MM GT kaydedilemedi (${i}): ${errorText}`);
        }
        const mmGtResult = await mmGtResponse.json();
        mmGtIds.push(mmGtResult.id);
        
        // YM ST kaydet (eğer auto-generated ise)
        if (ymSt.source === 'auto-generated') {
          const ymStResponse = await fetchWithAuth(API_URLS.galYmSt, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(generateYmStDatabaseData(ymSt))
          });
          
          if (ymStResponse && ymStResponse.ok) {
            const ymStResult = await ymStResponse.json();
            ymStIds.push(ymStResult.id);
          }
        } else {
          // Mevcut YM ST'nin ID'sini al
          ymStIds.push(ymSt.id);
        }
        
        // MM GT-YM ST ilişkisini kaydet
        await fetchWithAuth(API_URLS.galMmGtYmSt, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            mm_gt_id: mmGtResult.id,
            ym_st_id: ymStIds[i]
          })
        });
      }
      
      // Reçeteleri kaydet
      await saveRecipesToDatabase(mmGtIds, ymGtResult.id, ymStIds);
      
      setDatabaseIds({
        mmGtIds: mmGtIds,
        ymGtId: ymGtResult.id,
        ymStIds: ymStIds
      });
      
      setSavedToDatabase(true);
      toast.success('Veriler başarıyla kaydedildi');
      
    } catch (error) {
      console.error('Veritabanına kaydetme hatası:', error);
      toast.error('Veritabanına kaydetme hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Veritabanı için MM GT verisi oluştur
  const generateMmGtDatabaseData = (sequence = '00') => {
    const capFormatted = parseFloat(mmGtData.cap).toFixed(2).padStart(4, '0').replace('.', '');
    
    return {
      stok_kodu: `GT.${mmGtData.kod_2}.${capFormatted}.${sequence}`,
      stok_adi: generateStokAdi(),
      grup_kodu: 'MM',
      kod_1: 'GT',
      kod_2: mmGtData.kod_2,
      muh_detay: '26',
      depo_kodu: '36',
      br_1: 'KG',
      br_2: 'TN',
      pay_1: 1,
      payda_1: 1.000,
      cevrim_degeri_1: 0,
      cevrim_pay_2: 1,
      cevrim_payda_2: 1,
      cevrim_degeri_2: 1,
      cap: parseFloat(mmGtData.cap),
      kaplama: parseInt(mmGtData.kaplama),
      min_mukavemet: parseInt(mmGtData.min_mukavemet),
      max_mukavemet: parseInt(mmGtData.max_mukavemet),
      kg: parseInt(mmGtData.kg),
      ic_cap: parseInt(mmGtData.ic_cap),
      dis_cap: parseInt(mmGtData.dis_cap),
      tolerans_plus: parseFloat(mmGtData.tolerans_plus) || 0,
      tolerans_minus: parseFloat(mmGtData.tolerans_minus) || 0,
      shrink: mmGtData.shrink,
      unwinding: mmGtData.unwinding,
      cast_kont: mmGtData.cast_kont,
      helix_kont: mmGtData.helix_kont,
      elongation: mmGtData.elongation,
      satis_kdv_orani: '20',
      alis_kdv_orani: '20',
      stok_turu: 'D',
      esnek_yapilandir: 'H',
      super_recete_kullanilsin: 'H',
      alis_doviz_tipi: 2,
      gumruk_tarife_kodu: getGumrukTarifeKodu(),
      ingilizce_isim: generateEnglishName(),
      amb_shrink: getShrinkCode(mmGtData.ic_cap)
    };
  };

  // Veritabanı için YM GT verisi oluştur
  const generateYmGtDatabaseData = () => {
    if (!ymGtData) return {};
    
    return {
      ...ymGtData,
      grup_kodu: 'YM',
      kod_1: 'GT',
      muh_detay: '83',
      depo_kodu: '35',
      br_1: 'KG',
      br_2: 'TN',
      pay_1: 1,
      payda_1: 1.000,
      cevrim_degeri_1: 0,
      cevrim_pay_2: 1,
      cevrim_payda_2: 1,
      cevrim_degeri_2: 1,
      satis_kdv_orani: '20',
      alis_kdv_orani: '20',
      stok_turu: 'D',
      esnek_yapilandir: 'H',
      super_recete_kullanilsin: 'H'
    };
  };

  // Veritabanı için YM ST verisi oluştur
  const generateYmStDatabaseData = (ymSt) => {
    return {
      stok_kodu: ymSt.stok_kodu,
      stok_adi: ymSt.stok_adi,
      grup_kodu: 'YM',
      kod_1: 'ST',
      muh_detay: '28',
      depo_kodu: '35',
      br_1: 'KG',
      br_2: 'TN',
      pay_1: 1,
      payda_1: 1.000,
      cevrim_degeri_1: 0,
      cevrim_pay_2: 1,
      cevrim_payda_2: 1,
      cevrim_degeri_2: 1,
      satis_kdv_orani: '20',
      cap: parseFloat(ymSt.cap),
      filmasin: ymSt.filmasin,
      quality: ymSt.quality,
      ozel_saha_1_say: 1,
      esnek_yapilandir: 'H',
      super_recete_kullanilsin: 'H'
    };
  };

  // Reçeteleri kaydet - düzeltilmiş versiyon
  const saveRecipesToDatabase = async (mmGtIds, ymGtId, ymStIds) => {
    try {
      // MM GT reçetelerini kaydet - her MM GT için ayrı
      for (let i = 0; i < mmGtIds.length; i++) {
        const mmGtId = mmGtIds[i];
        const recete = mmGtRecetes[i];
        let siraNo = 1;
        
        for (const [key, value] of Object.entries(recete)) {
          await fetchWithAuth(API_URLS.galMmGtRecete, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              mm_gt_id: mmGtId,
              mamul_kodu: `GT.${mmGtData.kod_2}.${parseFloat(mmGtData.cap).toFixed(2).padStart(4, '0').replace('.', '')}.${i.toString().padStart(2, '0')}`,
              bilesen_kodu: key,
              miktar: value,
              sira_no: siraNo++,
              operasyon_bilesen: key.includes('01') ? 'Operasyon' : 'Bileşen',
              olcu_br: getOlcuBr(key),
              olcu_br_bilesen: '1',
              aciklama: getReceteAciklama(key),
              ua_dahil_edilsin: 'evet',
              son_operasyon: 'evet'
            })
          });
        }
      }
      
      // YM GT reçetesini kaydet
      let siraNo = 1;
      for (const [key, value] of Object.entries(ymGtRecete)) {
        await fetchWithAuth(API_URLS.galYmGtRecete, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            ym_gt_id: ymGtId,
            mamul_kodu: ymGtData.stok_kodu,
            bilesen_kodu: key === 'YM.ST.CONSUMPTION' ? getFirstYmStKodu() : key,
            miktar: value,
            sira_no: siraNo++,
            operasyon_bilesen: key.includes('01') ? 'Operasyon' : 'Bileşen',
            olcu_br: getOlcuBr(key),
            olcu_br_bilesen: '1',
            aciklama: getReceteAciklama(key)
          })
        });
      }
      
      // YM ST reçetelerini kaydet
      for (let i = 0; i < ymStIds.length; i++) {
        const ymStId = ymStIds[i];
        const ymSt = [...selectedYmSts, ...autoGeneratedYmSts][i];
        const recete = ymStRecetes[ymSt.stok_kodu || i];
        
        if (recete) {
          let siraNo = 1;
          for (const [key, value] of Object.entries(recete)) {
            await fetchWithAuth(API_URLS.galYmStRecete, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                ym_st_id: ymStId,
                mamul_kodu: ymSt.stok_kodu,
                bilesen_kodu: key === 'FILMASIN' ? getFilmasinKodu(ymSt) : key,
                miktar: value,
                sira_no: siraNo++,
                operasyon_bilesen: key.includes('01') ? 'Operasyon' : 'Bileşen',
                olcu_br: getOlcuBr(key),
                olcu_br_bilesen: '1',
                aciklama: getReceteAciklama(key)
              })
            });
          }
        }
      }
    } catch (error) {
      console.error('Reçete kaydetme hatası:', error);
      throw error;
    }
  };

  // Ölçü birimi alma fonksiyonu
  const getOlcuBr = (bilesen) => {
    if (bilesen.includes('01')) return 'DK';
    if (bilesen.includes('03') || bilesen.includes('ASİT') || bilesen.includes('GLV')) return 'KG';
    if (bilesen.includes('KARTON') || bilesen.includes('HALKA') || bilesen.includes('TOKA') || bilesen.includes('DESİ')) return 'AD';
    if (bilesen.includes('CEMBER') || bilesen.includes('SHRİNK') || bilesen.includes('naylon')) return 'KG';
    return 'KG';
  };

  // Reçete açıklama alma
  const getReceteAciklama = (bilesen) => {
    if (bilesen === 'GTPKT01') return 'Paketleme Operasyonu';
    if (bilesen === 'GLV01') return 'Galvanizleme Operasyonu';
    if (bilesen === 'TLC01') return 'Tel Çekme Operasyonu';
    if (bilesen === '150 03') return 'Çinko Tüketim Miktarı';
    if (bilesen === 'SM.HİDROLİK.ASİT') return 'Asit Tüketim Miktarı';
    if (bilesen === 'FILMASIN') return 'Filmaşin Tüketimi';
    if (bilesen === 'YM.ST.CONSUMPTION') return 'Galvanizli Tel Tüketim Miktarı';
    if (bilesen.includes('KARTON')) return 'Karton Tüketim Miktarı';
    if (bilesen.includes('SHRİNK')) return 'Naylon Tüketim Miktarı';
    if (bilesen.includes('HALKA')) return 'Kaldırma Kancası Tüketim Miktarı';
    if (bilesen.includes('CEMBER')) return 'Çelik çember Tüketim Miktarı';
    if (bilesen.includes('TOKA')) return 'Çember Tokası Tüketim Miktarı';
    if (bilesen.includes('DESİ')) return 'Slikajel Tüketim Miktarı';
    if (bilesen === 'naylon') return 'Naylon Tüketim Miktarı';
    return '';
  };

  // İlk YM ST kodunu al
  const getFirstYmStKodu = () => {
    const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
    return allYmSts.length > 0 ? allYmSts[0].stok_kodu : '';
  };

  // Filmaşin kodu oluştur
  const getFilmasinKodu = (ymSt) => {
    if (!ymSt) return 'FLM.0600.1006';
    const filmasin = ymSt.filmasin ? ymSt.filmasin.toString().padStart(4, '0') : '0600';
    const quality = ymSt.quality || '1006';
    return `FLM.${filmasin}.${quality}`;
  };

  // Excel dosyalarını oluştur - güncellenmiş
  const generateExcelFiles = async () => {
    try {
      setIsLoading(true);
      
      // Stok Kartı Excel
      await generateStokKartiExcel();
      
      // Reçete Excel
      await generateReceteExcel();
      
      toast.success('Excel dosyaları başarıyla oluşturuldu');
    } catch (error) {
      console.error('Excel oluşturma hatası:', error);
      toast.error('Excel oluşturma hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Stok Kartı Excel oluştur - çoklu MM GT destekli
  const generateStokKartiExcel = async () => {
    const workbook = new ExcelJS.Workbook();
    const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
    
    // MM GT Sheet
    const mmGtSheet = workbook.addWorksheet('MM GT');
    const mmGtHeaders = getStokKartiHeaders();
    mmGtSheet.addRow(mmGtHeaders);
    
    // Her YM ST için bir MM GT ekle
    allYmSts.forEach((_, index) => {
      const sequence = index.toString().padStart(2, '0');
      mmGtSheet.addRow(generateMmGtStokKartiData(sequence));
    });
    
    // YM GT Sheet
    const ymGtSheet = workbook.addWorksheet('YM GT');
    const ymGtHeaders = getYmGtHeaders();
    ymGtSheet.addRow(ymGtHeaders);
    if (ymGtData) {
      ymGtSheet.addRow(generateYmGtStokKartiData());
    }
    
    // YM ST Sheet
    const ymStSheet = workbook.addWorksheet('YM ST');
    const ymStHeaders = getYmStHeaders();
    ymStSheet.addRow(ymStHeaders);
    
    allYmSts.forEach(ymSt => {
      ymStSheet.addRow(generateYmStStokKartiData(ymSt));
    });
    
    const buffer = await workbook.xlsx.writeBuffer();
    saveAs(new Blob([buffer]), 'Galvaniz_Stok_Karti.xlsx');
  };

  // Reçete Excel oluştur - çoklu MM GT ve doğru satır sayıları ile
  const generateReceteExcel = async () => {
    const workbook = new ExcelJS.Workbook();
    const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
    
    // MM GT REÇETE Sheet
    const mmGtReceteSheet = workbook.addWorksheet('MM GT REÇETE');
    const receteHeaders = getReceteHeaders();
    mmGtReceteSheet.addRow(receteHeaders);
    
    // Her MM GT için reçete satırları ekle
    allYmSts.forEach((ymSt, index) => {
      const recete = mmGtRecetes[index];
      const sequence = index.toString().padStart(2, '0');
      let siraNo = 1;
      
      Object.entries(recete).forEach(([key, value]) => {
        mmGtReceteSheet.addRow(generateMmGtReceteRow(key, value, siraNo, sequence));
        siraNo++;
      });
    });
    
    // YM GT REÇETE Sheet
    const ymGtReceteSheet = workbook.addWorksheet('YM GT REÇETE');
    ymGtReceteSheet.addRow(receteHeaders);
    let siraNo = 1;
    
    Object.entries(ymGtRecete).forEach(([key, value]) => {
      ymGtReceteSheet.addRow(generateYmGtReceteRow(key, value, siraNo));
      siraNo++;
    });
    
    // YM ST REÇETE Sheet
    const ymStReceteSheet = workbook.addWorksheet('YM ST REÇETE');
    ymStReceteSheet.addRow(receteHeaders);
    
    // Her YM ST için reçete satırları
    allYmSts.forEach((ymSt) => {
      const recete = ymStRecetes[ymSt.stok_kodu || ymSt.id];
      let siraNo = 1;
      
      if (recete) {
        Object.entries(recete).forEach(([key, value]) => {
          ymStReceteSheet.addRow(generateYmStReceteRow(key, value, siraNo, ymSt));
          siraNo++;
        });
      }
    });
    
    const buffer = await workbook.xlsx.writeBuffer();
    saveAs(new Blob([buffer]), 'Galvanizli_Tel_Recete.xlsx');
  };

  // Excel header fonksiyonları (tam Excel formatına uygun)
  const getStokKartiHeaders = () => [
    'Stok Kodu', 'Stok Adı', 'Grup Kodu', 'Kod-1', 'Kod-2', 'Cari/Satıcı Kodu',
    'İngilizce İsim', 'Satıcı İsmi', 'Muh. Detay', 'Depo Kodu', 'Br-1', 'Br-2',
    'Pay-1', 'Payda-1', 'Çevrim Değeri-1', 'Ölçü Br-3', 'Çevrim Pay-2', 'Çevrim Payda-2',
    'Çevrim Değeri-2', 'Çap', 'Kaplama', 'Min Mukavemet', 'Max Mukavemet', 'KG',
    'İç Çap/Boy Çubuk AD', 'Dış Çap/En Çubuk AD', 'Çap2', 'Shrink', 'Tolerans(+)',
    'Tolerans(-)', 'Ebat(En)', 'Göz Aralığı', 'Ebat(Boy)', 'Hasır Tipi',
    'Özel Saha 8 (Alf.)', 'Alış Fiyatı', 'Fiyat Birimi', 'Satış Fiyatı-1',
    'Satış Fiyatı-2', 'Satış Fiyatı-3', 'Satış Fiyatı-4', 'Satış Tipi',
    'Döviz Alış', 'Döviz Maliyeti', 'Döviz Satış Fiyatı', 'Azami Stok',
    'Asgari Stok', 'Döv.Tutar', 'Döv.Tipi', 'Bekleme Süresi', 'Temin Süresi',
    'Birim Ağırlık', 'Nakliye Tutar', 'Satış KDV Oranı', 'Alış KDV Oranı',
    'Stok Türü', 'Mali Grup Kodu', 'Barkod 1', 'Barkod 2', 'Barkod 3',
    'Kod-3', 'Kod-4', 'Kod-5', 'Esnek Yapılandır', 'Süper Reçete Kullanılsın',
    'Bağlı Stok Kodu', 'Yapılandırma Kodu', 'Yap. Açıklama', 'Alış Döviz Tipi',
    'Gümrük Tarife Kodu', 'Dağıtıcı Kodu', 'Menşei', 'METARIAL', 'DIA (MM)',
    'DIA TOL (MM) +', 'DIA TOL (MM) -', 'ZING COATING (GR/M2)', 'TENSILE ST. (MPA) MIN',
    'TENSILE ST. (MPA) MAX', 'WAX', 'LIFTING LUGS', 'UNWINDING', 'CAST KONT. (CM)',
    'HELIX KONT. (CM)', 'ELONGATION (%) MIN', 'COIL DIMENSIONS (CM) ID',
    'COIL DIMENSIONS (CM) OD', 'COIL WEIGHT (KG)', 'COIL WEIGHT (KG) MIN',
    'COIL WEIGHT (KG) MAX'
  ];

  const getYmGtHeaders = () => [
    'Stok Kodu', 'Stok Adı', 'Grup Kodu', 'Kod-1', 'Kod-2', 'Cari/Satıcı Kodu',
    'İngilizce İsim', 'Satıcı İsmi', 'Muh. Detay', 'Depo Kodu', 'Br-1', 'Br-2',
    'Pay-1', 'Payda-1', 'Çevrim Değeri-1', 'Ölçü Br-3', 'Çevrim Pay-2', 'Çevrim Payda-2',
    'Çevrim Değeri-2', 'Çap', 'Kaplama', 'Min Mukavemet', 'Max Mukavemet', 'KG',
    'İç Çap/Boy Çubuk AD', 'Dış Çap/En Çubuk AD', 'Çap2', 'Shrink', 'Tolerans(+)',
    'Tolerans(-)', 'Ebat(En)', 'Göz Aralığı', 'Ebat(Boy)', 'Hasır Tipi',
    'Özel Saha 8 (Alf.)', 'Alış Fiyatı', 'Fiyat Birimi', 'Satış Fiyatı-1',
    'Satış Fiyatı-2', 'Satış Fiyatı-3', 'Satış Fiyatı-4', 'Satış Tipi',
    'Döviz Alış', 'Döviz Maliyeti', 'Döviz Satış Fiyatı', 'Azami Stok',
    'Asgari Stok', 'Döv.Tutar', 'Döv.Tipi', 'Bekleme Süresi', 'Temin Süresi',
    'Birim Ağırlık', 'Nakliye Tutar', 'Satış KDV Oranı', 'Alış KDV Oranı',
    'Stok Türü', 'Mali Grup Kodu', 'Barkod 1', 'Barkod 2', 'Barkod 3',
    'Kod-3', 'Kod-4', 'Kod-5', 'Esnek Yapılandır', 'Süper Reçete Kullanılsın',
    'Bağlı Stok Kodu', 'Yapılandırma Kodu', 'Yap. Açıklama', 'Alış Döviz Tipi',
    'Gümrük Tarife Kodu', 'Dağıtıcı Kodu', 'Menşei'
  ];

  const getYmStHeaders = () => [
    'Stok Kodu', 'Stok Adı', 'Grup Kodu', 'Kod-1', 'Kod-2', 'Kod-3',
    'Satış KDV Oranı', 'Muh.Detay', 'Depo Kodu', 'Br-1', 'Br-2', 'Pay-1',
    'Payda-1', 'Çevrim Değeri-1', 'Ölçü Br-3', 'Çevrim Pay-2', 'Çevrim Payda-2',
    'Çevrim Değeri-2', 'Alış Fiyatı', 'Fiyat Birimi', 'Satış Fiyatı-1',
    'Satış Fiyatı-2', 'Satış Fiyatı-3', 'Satış Fiyatı-4', 'Döviz Tip',
    'Döviz Alış', 'Döviz Maliyeti', 'Döviz Satış Fiyatı', 'Azami Stok',
    'Asgari Stok', 'Döv.Tutar', 'Döv.Tipi', 'Alış Döviz Tipi', 'Bekleme Süresi',
    'Temin Süresi', 'Birim Ağırlık', 'Nakliye Tutar', 'Stok Türü', 'Mali Grup Kodu',
    'İngilizce İsim', 'Özel Saha 1 (Say.)', 'Özel Saha 2 (Say.)', 'Özel Saha 3 (Say.)',
    'Özel Saha 4 (Say.)', 'Özel Saha 5 (Say.)', 'Özel Saha 6 (Say.)', 'Özel Saha 7 (Say.)',
    'Özel Saha 8 (Say.)', 'Özel Saha 1 (Alf.)', 'Özel Saha 2 (Alf.)', 'Özel Saha 3 (Alf.)',
    'Özel Saha 4 (Alf.)', 'Özel Saha 5 (Alf.)', 'Özel Saha 6 (Alf.)', 'Özel Saha 7 (Alf.)',
    'Özel Saha 8 (Alf.)', 'Kod-4', 'Kod-5', 'Esnek Yapılandır', 'Süper Reçete Kullanılsın',
    'Bağlı Stok Kodu', 'Yapılandırma Kodu', 'Yap. Açıklama'
  ];

  const getReceteHeaders = () => [
    'Mamul Kodu(*)', 'Reçete Top.', 'Fire Oranı (%)', 'Oto.Reç.', 'Ölçü Br.',
    'Sıra No(*)', 'Operasyon Bileşen', 'Bileşen Kodu(*)', 'Ölçü Br. - Bileşen',
    'Miktar(*)', 'Açıklama', 'Miktar Sabitle', 'Stok/Maliyet', 'Fire Mik.',
    'Sabit Fire Mik.', 'İstasyon Kodu', 'Hazırlık Süresi', 'Üretim Süresi',
    'Ü.A.Dahil Edilsin', 'Son Operasyon', 'Öncelik', 'Planlama Oranı',
    'Alternatif Politika - D.A.Transfer Fişi', 'Alternatif Politika - Ambar Ç. Fişi',
    'Alternatif Politika - Üretim S.Kaydı', 'Alternatif Politika - MRP', 'İÇ/DIŞ'
  ];

  // Excel veri oluşturma fonksiyonları - Excel formatına uygun
  const generateMmGtStokKartiData = (sequence = '00') => {
    const cap = formatForExcel(mmGtData.cap, 'decimal');
    const toleransPlus = formatForExcel(mmGtData.tolerans_plus, 'decimal');
    const toleransMinus = formatForExcel(mmGtData.tolerans_minus, 'decimal');
    const capFormatted = parseFloat(mmGtData.cap).toFixed(2).padStart(4, '0').replace('.', '');
    
    return [
      `GT.${mmGtData.kod_2}.${capFormatted}.${sequence}`, // Stok Kodu
      generateStokAdi(), // Stok Adı
      'MM', // Grup Kodu
      'GT', // Kod-1
      mmGtData.kod_2, // Kod-2
      '', // Cari/Satıcı Kodu
      generateEnglishName(), // İngilizce İsim
      '', // Satıcı İsmi
      '26', // Muh. Detay
      '36', // Depo Kodu
      'KG', // Br-1
      'TN', // Br-2
      '1', // Pay-1
      '1,000', // Payda-1 (Excel formatı virgül)
      '0', // Çevrim Değeri-1
      '', // Ölçü Br-3
      '1', // Çevrim Pay-2
      '1', // Çevrim Payda-2
      '1', // Çevrim Değeri-2
      cap, // Çap
      mmGtData.kaplama, // Kaplama
      mmGtData.min_mukavemet, // Min Mukavemet
      mmGtData.max_mukavemet, // Max Mukavemet
      mmGtData.kg, // KG
      mmGtData.ic_cap, // İç Çap
      mmGtData.dis_cap, // Dış Çap
      '', // Çap2
      mmGtData.shrink, // Shrink
      toleransPlus, // Tolerans(+)
      toleransMinus, // Tolerans(-)
      '', // Ebat(En)
      '', // Göz Aralığı
      '', // Ebat(Boy)
      '', // Hasır Tipi
      '', // Özel Saha 8 (Alf.)
      '0', // Alış Fiyatı
      '1', // Fiyat Birimi
      '0', // Satış Fiyatı-1
      '0', // Satış Fiyatı-2
      '0', // Satış Fiyatı-3
      '0', // Satış Fiyatı-4
      '1', // Satış Tipi
      '0', // Döviz Alış
      '0', // Döviz Maliyeti
      '0', // Döviz Satış Fiyatı
      '0', // Azami Stok
      '0', // Asgari Stok
      '', // Döv.Tutar
      '0', // Döv.Tipi
      '0', // Bekleme Süresi
      '0', // Temin Süresi
      '0', // Birim Ağırlık
      '0', // Nakliye Tutar
      '20', // Satış KDV Oranı
      '20', // Alış KDV Oranı
      'D', // Stok Türü
      '', // Mali Grup Kodu
      '', // Barkod 1
      '', // Barkod 2
      '', // Barkod 3
      '', // Kod-3
      '', // Kod-4
      '', // Kod-5
      'H', // Esnek Yapılandır
      'H', // Süper Reçete Kullanılsın
      '', // Bağlı Stok Kodu
      '', // Yapılandırma Kodu
      '', // Yap. Açıklama
      '2', // Alış Döviz Tipi
      getGumrukTarifeKodu(), // Gümrük Tarife Kodu
      '', // Dağıtıcı Kodu
      '052', // Menşei
      'Galvanizli Tel', // METARIAL
      cap, // DIA (MM)
      toleransPlus, // DIA TOL (MM) +
      toleransMinus, // DIA TOL (MM) -
      mmGtData.kaplama, // ZING COATING (GR/M2)
      mmGtData.min_mukavemet, // TENSILE ST. (MPA) MIN
      mmGtData.max_mukavemet, // TENSILE ST. (MPA) MAX
      '+', // WAX
      '+', // LIFTING LUGS
      mmGtData.unwinding === 'Clockwise' ? 'Clockwise' : '', // UNWINDING
      mmGtData.cast_kont || '', // CAST KONT. (CM)
      mmGtData.helix_kont || '', // HELIX KONT. (CM)
      mmGtData.elongation || '', // ELONGATION (%) MIN
      mmGtData.ic_cap, // COIL DIMENSIONS (CM) ID
      mmGtData.dis_cap, // COIL DIMENSIONS (CM) OD
      mmGtData.kg, // COIL WEIGHT (KG)
      '', // COIL WEIGHT (KG) MIN
      '' // COIL WEIGHT (KG) MAX
    ];
  };

  const generateYmGtStokKartiData = () => {
    if (!ymGtData) return [];
    
    const cap = formatForExcel(ymGtData.cap, 'decimal');
    const toleransPlus = formatForExcel(ymGtData.tolerans_plus, 'decimal');
    const toleransMinus = formatForExcel(ymGtData.tolerans_minus, 'decimal');
    
    return [
      ymGtData.stok_kodu, // Stok Kodu
      ymGtData.stok_adi, // Stok Adı
      'YM', // Grup Kodu
      'GT', // Kod-1
      ymGtData.kod_2, // Kod-2
      '', // Cari/Satıcı Kodu
      ymGtData.stok_adi, // İngilizce İsim
      '', // Satıcı İsmi
      '83', // Muh. Detay
      '35', // Depo Kodu
      'KG', // Br-1
      'TN', // Br-2
      '1', // Pay-1
      '1,000', // Payda-1 (Excel formatı)
      '0', // Çevrim Değeri-1
      '', // Ölçü Br-3
      '1', // Çevrim Pay-2
      '1', // Çevrim Payda-2
      '1', // Çevrim Değeri-2
      cap, // Çap
      ymGtData.kaplama, // Kaplama
      ymGtData.min_mukavemet, // Min Mukavemet
      ymGtData.max_mukavemet, // Max Mukavemet
      ymGtData.kg, // KG
      ymGtData.ic_cap, // İç Çap
      ymGtData.dis_cap, // Dış Çap
      '', // Çap2
      ymGtData.shrink, // Shrink
      toleransPlus, // Tolerans(+)
      toleransMinus, // Tolerans(-)
      '', // Ebat(En)
      '', // Göz Aralığı
      '', // Ebat(Boy)
      '', // Hasır Tipi
      '', // Özel Saha 8 (Alf.)
      '0', // Alış Fiyatı
      '1', // Fiyat Birimi
      '0', // Satış Fiyatı-1
      '0', // Satış Fiyatı-2
      '0', // Satış Fiyatı-3
      '0', // Satış Fiyatı-4
      '1', // Satış Tipi
      '0', // Döviz Alış
      '0', // Döviz Maliyeti
      '0', // Döviz Satış Fiyatı
      '0', // Azami Stok
      '0', // Asgari Stok
      '', // Döv.Tutar
      '0', // Döv.Tipi
      '0', // Bekleme Süresi
      '0', // Temin Süresi
      '0', // Birim Ağırlık
      '0', // Nakliye Tutar
      '20', // Satış KDV Oranı
      '20', // Alış KDV Oranı
      'D', // Stok Türü
      '', // Mali Grup Kodu
      '', // Barkod 1
      '', // Barkod 2
      '', // Barkod 3
      '', // Kod-3
      '', // Kod-4
      '', // Kod-5
      'H', // Esnek Yapılandır
      'H', // Süper Reçete Kullanılsın
      '', // Bağlı Stok Kodu
      '', // Yapılandırma Kodu
      '', // Yap. Açıklama
      '', // Alış Döviz Tipi
      '', // Gümrük Tarife Kodu
      '', // Dağıtıcı Kodu
      '' // Menşei
    ];
  };

  const generateYmStStokKartiData = (ymSt) => {
    return [
      ymSt.stok_kodu, // Stok Kodu
      ymSt.stok_adi, // Stok Adı
      'YM', // Grup Kodu
      'ST', // Kod-1
      '', // Kod-2
      '', // Kod-3
      '20', // Satış KDV Oranı
      '28', // Muh.Detay
      '35', // Depo Kodu
      'KG', // Br-1
      'TN', // Br-2
      '1', // Pay-1
      '1,000', // Payda-1 (Excel formatı)
      '0', // Çevrim Değeri-1
      '', // Ölçü Br-3
      '1', // Çevrim Pay-2
      '1', // Çevrim Payda-2
      '1', // Çevrim Değeri-2
      '0', // Alış Fiyatı
      '1', // Fiyat Birimi
      '0', // Satış Fiyatı-1
      '0', // Satış Fiyatı-2
      '0', // Satış Fiyatı-3
      '0', // Satış Fiyatı-4
      '1', // Döviz Tip
      '0', // Döviz Alış
      '0', // Döviz Maliyeti
      '0', // Döviz Satış Fiyatı
      '0', // Azami Stok
      '0', // Asgari Stok
      '', // Döv.Tutar
      '0', // Döv.Tipi
      '0', // Alış Döviz Tipi
      '0', // Bekleme Süresi
      '0', // Temin Süresi
      '0', // Birim Ağırlık
      '0', // Nakliye Tutar
      'D', // Stok Türü
      '', // Mali Grup Kodu
      '', // İngilizce İsim
      '1', // Özel Saha 1 (Say.)
      '0', // Özel Saha 2 (Say.)
      '0', // Özel Saha 3 (Say.)
      '0', // Özel Saha 4 (Say.)
      '0', // Özel Saha 5 (Say.)
      '0', // Özel Saha 6 (Say.)
      '0', // Özel Saha 7 (Say.)
      '0', // Özel Saha 8 (Say.)
      '', // Özel Saha 1 (Alf.)
      '', // Özel Saha 2 (Alf.)
      '', // Özel Saha 3 (Alf.)
      '', // Özel Saha 4 (Alf.)
      '', // Özel Saha 5 (Alf.)
      '', // Özel Saha 6 (Alf.)
      '', // Özel Saha 7 (Alf.)
      '', // Özel Saha 8 (Alf.)
      '', // Kod-4
      '', // Kod-5
      'H', // Esnek Yapılandır
      'H', // Süper Reçete Kullanılsın
      '', // Bağlı Stok Kodu
      '', // Yapılandırma Kodu
      '' // Yap. Açıklama
    ];
  };

  // Reçete satır oluşturma fonksiyonları
  const generateMmGtReceteRow = (bilesenKodu, miktar, siraNo, sequence = '00') => {
    const capFormatted = parseFloat(mmGtData.cap).toFixed(2).padStart(4, '0').replace('.', '');
    
    return [
      `GT.${mmGtData.kod_2}.${capFormatted}.${sequence}`, // Mamul Kodu
      '1', // Reçete Top.
      '0,0004', // Fire Oranı (%) (Excel formatı virgül)
      '', // Oto.Reç.
      getOlcuBr(bilesenKodu), // Ölçü Br.
      siraNo, // Sıra No
      bilesenKodu.includes('01') ? 'Operasyon' : 'Bileşen', // Operasyon Bileşen
      bilesenKodu, // Bileşen Kodu
      '1', // Ölçü Br. - Bileşen
      formatForExcel(miktar, 'number'), // Miktar (Excel formatı)
      getReceteAciklama(bilesenKodu), // Açıklama
      '', // Miktar Sabitle
      '', // Stok/Maliyet
      '', // Fire Mik.
      '', // Sabit Fire Mik.
      '', // İstasyon Kodu
      '', // Hazırlık Süresi
      bilesenKodu.includes('01') ? formatForExcel(miktar, 'number') : '', // Üretim Süresi
      'evet', // Ü.A.Dahil Edilsin
      'evet', // Son Operasyon
      '', // Öncelik
      '', // Planlama Oranı
      '', // Alternatif Politika - D.A.Transfer Fişi
      '', // Alternatif Politika - Ambar Ç. Fişi
      '', // Alternatif Politika - Üretim S.Kaydı
      '', // Alternatif Politika - MRP
      '' // İÇ/DIŞ
    ];
  };

  const generateYmGtReceteRow = (bilesenKodu, miktar, siraNo) => {
    return [
      ymGtData?.stok_kodu || '', // Mamul Kodu
      '1', // Reçete Top.
      '0', // Fire Oranı (%)
      '', // Oto.Reç.
      getOlcuBr(bilesenKodu), // Ölçü Br.
      siraNo, // Sıra No
      bilesenKodu.includes('01') ? 'Operasyon' : 'Bileşen', // Operasyon Bileşen
      bilesenKodu === 'YM.ST.CONSUMPTION' ? getFirstYmStKodu() : bilesenKodu, // Bileşen Kodu
      '1', // Ölçü Br. - Bileşen
      formatForExcel(miktar, 'number'), // Miktar
      getReceteAciklama(bilesenKodu), // Açıklama
      '', // Miktar Sabitle
      '', // Stok/Maliyet
      '', // Fire Mik.
      '', // Sabit Fire Mik.
      '', // İstasyon Kodu
      '', // Hazırlık Süresi
      bilesenKodu.includes('01') ? formatForExcel(miktar, 'number') : '', // Üretim Süresi
      '', // Ü.A.Dahil Edilsin
      '', // Son Operasyon
      '', // Öncelik
      '', // Planlama Oranı
      '', // Alternatif Politika - D.A.Transfer Fişi
      '', // Alternatif Politika - Ambar Ç. Fişi
      '', // Alternatif Politika - Üretim S.Kaydı
      '', // Alternatif Politika - MRP
      '' // İÇ/DIŞ
    ];
  };

  const generateYmStReceteRow = (bilesenKodu, miktar, siraNo, ymSt) => {
    return [
      ymSt.stok_kodu || '', // Mamul Kodu
      '1', // Reçete Top.
      '', // Fire Oranı (%)
      '', // Oto.Reç.
      getOlcuBr(bilesenKodu), // Ölçü Br.
      siraNo, // Sıra No
      bilesenKodu.includes('01') ? 'Operasyon' : 'Bileşen', // Operasyon Bileşen
      bilesenKodu === 'FILMASIN' ? getFilmasinKodu(ymSt) : bilesenKodu, // Bileşen Kodu
      '1', // Ölçü Br. - Bileşen
      formatForExcel(miktar, 'number'), // Miktar
      getReceteAciklama(bilesenKodu), // Açıklama
      '', // Miktar Sabitle
      '', // Stok/Maliyet
      '', // Fire Mik.
      '', // Sabit Fire Mik.
      '', // İstasyon Kodu
      '', // Hazırlık Süresi
      bilesenKodu.includes('01') ? formatForExcel(miktar, 'number') : '', // Üretim Süresi
      '', // Ü.A.Dahil Edilsin
      '', // Son Operasyon
      '', // Öncelik
      '', // Planlama Oranı
      '', // Alternatif Politika - D.A.Transfer Fişi
      '', // Alternatif Politika - Ambar Ç. Fişi
      '', // Alternatif Politika - Üretim S.Kaydı
      '', // Alternatif Politika - MRP
      '' // İÇ/DIŞ
    ];
  };

  // Excel formatı için sayı formatlama
  const formatForExcel = (value, type) => {
    if (!value) return '';
    
    const numValue = parseFloat(value);
    if (isNaN(numValue)) return value;
    
    // Excel'de bazı kolonlar için virgül formatı kullan
    if (type === 'decimal' && (typeof value === 'number' || typeof value === 'string')) {
      // Çap ve tolerans değerleri için virgülle format et
      return numValue.toFixed(2).replace('.', ',');
    } else if (type === 'number') {
      // Diğer sayılar için dot kullan
      return numValue.toString();
    }
    
    return value;
  };

  // String oluşturma fonksiyonları
  const generateStokAdi = () => {
    const cap = mmGtData.cap || '0';
    const toleransPlus = formatForExcel(mmGtData.tolerans_plus, 'decimal');
    const toleransMinus = formatForExcel(mmGtData.tolerans_minus, 'decimal');
    
    return `Galvanizli Tel ${cap} mm -${toleransMinus}/+${toleransPlus} ${mmGtData.kaplama || '0'} gr/m²${mmGtData.min_mukavemet || '0'}-${mmGtData.max_mukavemet || '0'} MPa ID:${mmGtData.ic_cap || '45'} cm OD:${mmGtData.dis_cap || '75'} cm ${mmGtData.kg || '0'} kg`;
  };

  const generateEnglishName = () => {
    const cap = mmGtData.cap || '0';
    const toleransPlus = formatForExcel(mmGtData.tolerans_plus, 'decimal');
    const toleransMinus = formatForExcel(mmGtData.tolerans_minus, 'decimal');
    
    return `Galvanized Steel Wire ${cap} mm -${toleransMinus}/+${toleransPlus} ${mmGtData.kaplama || '0'} gr/m²${mmGtData.min_mukavemet || '0'}-${mmGtData.max_mukavemet || '0'} MPa ID:${mmGtData.ic_cap || '45'} cm OD:${mmGtData.dis_cap || '75'} cm ${mmGtData.kg || '0'} kg`;
  };

  // Talep onaylama
  const handleApproveRequest = async () => {
    if (!selectedRequest || !databaseIds.mmGtIds.length) {
      toast.error('Onaylamak için önce veritabanına kaydedin');
      return;
    }
    
    try {
      setIsLoading(true);
      
      const response = await fetchWithAuth(`${API_URLS.galSalRequests}/${selectedRequest.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          status: 'approved',
          processed_by: user.username,
          processed_at: new Date().toISOString(),
          mm_gt_id: databaseIds.mmGtIds[0] // İlk MM GT ID'yi kullan
        })
      });
      
      if (response && response.ok) {
        toast.success('Talep onaylandı');
        fetchRequests();
        setSelectedRequest(null);
      } else {
        throw new Error('Talep onaylanamadı');
      }
    } catch (error) {
      console.error('Talep onaylama hatası:', error);
      toast.error('Talep onaylama hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Talep reddetme
  const handleRejectRequest = async () => {
    if (!selectedRequest) return;
    
    const reason = prompt('Red nedeni:');
    if (!reason) return;
    
    try {
      setIsLoading(true);
      
      const response = await fetchWithAuth(`${API_URLS.galSalRequests}/${selectedRequest.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          status: 'rejected',
          processed_by: user.username,
          processed_at: new Date().toISOString(),
          rejection_reason: reason
        })
      });
      
      if (response && response.ok) {
        toast.success('Talep reddedildi');
        fetchRequests();
        setSelectedRequest(null);
      } else {
        throw new Error('Talep reddedilemedi');
      }
    } catch (error) {
      console.error('Talep reddetme hatası:', error);
      toast.error('Talep reddetme hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="p-6 max-w-7xl mx-auto bg-gray-50 min-h-screen">
      {/* Ana Başlık ve Butonlar */}
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold text-gray-800 flex items-center gap-3">
          <div className="w-8 h-8 bg-red-600 rounded-lg flex items-center justify-center">
            <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
          Galvanizli Tel Netsis Entegrasyonu
        </h1>
        
        <div className="flex gap-3">
          <button
            onClick={() => setShowExistingMmGtModal(true)}
            className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors shadow-lg flex items-center gap-2"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
            Mevcut MM GT Seç
          </button>
          
          <button
            onClick={() => setShowRequestsModal(true)}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors shadow-lg relative flex items-center gap-2"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
            </svg>
            Talepler
            {requests.length > 0 && (
              <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                {requests.length}
              </span>
            )}
          </button>
        </div>
      </div>

      {/* Hata ve Başarı Mesajları */}
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4 shadow-sm">
          <div className="flex items-center gap-2">
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
            {error}
          </div>
        </div>
      )}
      
      {successMessage && (
        <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg mb-4 shadow-sm">
          <div className="flex items-center gap-2">
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            {successMessage}
          </div>
        </div>
      )}

      {/* Ana İçerik */}
      {currentStep === 'input' && (
        <div className="bg-white rounded-xl shadow-lg p-8">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-semibold text-gray-800">MM GT Ürün Bilgileri</h2>
            <div className="flex items-center gap-2 text-sm text-gray-500">
              <span className="w-2 h-2 bg-red-500 rounded-full"></span>
              <span>Zorunlu Alanlar</span>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Çap (mm) <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                step="0.01"
                min="0.8"
                max="8.0"
                value={mmGtData.cap}
                onChange={(e) => handleInputChange('cap', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="0.00"
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Kaplama Türü <span className="text-red-500">*</span>
              </label>
              <select
                value={mmGtData.kod_2}
                onChange={(e) => handleInputChange('kod_2', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
              >
                <option value="NIT">NIT</option>
                <option value="PAD">PAD</option>
              </select>
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Kaplama (gr/m²) <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                min="50"
                max="400"
                value={mmGtData.kaplama}
                onChange={(e) => handleInputChange('kaplama', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                disabled={mmGtData.kod_2 === 'PAD'}
                placeholder="50-400"
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Min Mukavemet (MPa) <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                min="350"
                max="1000"
                value={mmGtData.min_mukavemet}
                onChange={(e) => handleInputChange('min_mukavemet', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="350-1000"
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Max Mukavemet (MPa) <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                min="350"
                max="1000"
                value={mmGtData.max_mukavemet}
                onChange={(e) => handleInputChange('max_mukavemet', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="350-1000"
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Ağırlık (kg) <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                min="250"
                max="1250"
                value={mmGtData.kg}
                onChange={(e) => handleInputChange('kg', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="250-1250"
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                İç Çap (cm)
              </label>
              <select
                value={mmGtData.ic_cap}
                onChange={(e) => handleInputChange('ic_cap', parseInt(e.target.value))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
              >
                <option value={45}>45</option>
                <option value={50}>50</option>
                <option value={55}>55</option>
              </select>
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Dış Çap (cm)
              </label>
              <input
                type="number"
                value={mmGtData.dis_cap || ''}
                onChange={(e) => handleInputChange('dis_cap', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all bg-gray-50"
                readOnly
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Tolerans (+)
              </label>
              <input
                type="number"
                step="0.01"
                min="0"
                max="0.1"
                value={mmGtData.tolerans_plus || ''}
                onChange={(e) => handleInputChange('tolerans_plus', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="0.00"
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Tolerans (-)
              </label>
              <input
                type="number"
                step="0.01"
                min="0"
                max="0.1"
                value={mmGtData.tolerans_minus || ''}
                onChange={(e) => handleInputChange('tolerans_minus', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="0.00"
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Shrink
              </label>
              <select
                value={mmGtData.shrink}
                onChange={(e) => handleInputChange('shrink', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
              >
                <option value="evet">Evet</option>
                <option value="hayır">Hayır</option>
              </select>
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Unwinding
              </label>
              <select
                value={mmGtData.unwinding}
                onChange={(e) => handleInputChange('unwinding', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
              >
                <option value="">Anti-Clockwise (Varsayılan)</option>
                <option value="Clockwise">Clockwise</option>
              </select>
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Cast Kont
              </label>
              <input
                type="text"
                value={mmGtData.cast_kont}
                onChange={(e) => handleInputChange('cast_kont', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="Opsiyonel"
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Helix Kont
              </label>
              <input
                type="text"
                value={mmGtData.helix_kont}
                onChange={(e) => handleInputChange('helix_kont', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="Opsiyonel"
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Elongation
              </label>
              <input
                type="text"
                value={mmGtData.elongation}
                onChange={(e) => handleInputChange('elongation', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="Opsiyonel"
              />
            </div>
          </div>

          <div className="mt-8 flex justify-end">
            <button
              onClick={handleNext}
              disabled={isLoading}
              className="bg-red-600 text-white px-8 py-3 rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50 shadow-lg flex items-center gap-2"
            >
              {isLoading ? (
                <>
                  <svg className="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  İşleniyor...
                </>
              ) : (
                <>
                  Devam
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </>
              )}
            </button>
          </div>
        </div>
      )}

      {currentStep === 'summary' && (
        <div className="space-y-6">
          {/* Durum Çubuğu */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                {selectedRequest && (
                  <div className="bg-blue-50 px-4 py-2 rounded-lg">
                    <span className="text-blue-700 font-medium">📋 Talep Seçildi</span>
                  </div>
                )}
                {selectedExistingMmGt && (
                  <div className="bg-purple-50 px-4 py-2 rounded-lg">
                    <span className="text-purple-700 font-medium">🔍 Mevcut MM GT Seçildi</span>
                  </div>
                )}
              </div>
              
              <button
                onClick={handleBackToManual}
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors flex items-center gap-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Manuel Girişe Dön
              </button>
            </div>
          </div>

          {/* MM GT Özet */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <div className="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center">
                <span className="text-red-600 font-bold">MM</span>
              </div>
              MM GT Ürün Özeti
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[
                { label: 'Stok Kodu', value: `GT.${mmGtData.kod_2}.${parseFloat(mmGtData.cap || 0).toFixed(2).padStart(4, '0').replace('.', '')}.00` },
                { label: 'Çap', value: `${mmGtData.cap || '0'} mm` },
                { label: 'Kaplama Türü', value: mmGtData.kod_2 },
                { label: 'Kaplama', value: `${mmGtData.kaplama || '0'} gr/m²` },
                { label: 'Mukavemet', value: `${mmGtData.min_mukavemet || '0'}-${mmGtData.max_mukavemet || '0'} MPa` },
                { label: 'Ağırlık', value: `${mmGtData.kg || '0'} kg` }
              ].map((item, index) => (
                <div key={index} className="bg-gray-50 p-4 rounded-lg">
                  <span className="text-sm text-gray-500 block">{item.label}:</span>
                  <p className="font-semibold text-gray-800">{item.value}</p>
                </div>
              ))}
            </div>
          </div>

          {/* YM GT Özet */}
          {ymGtData && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <div className="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center">
                  <span className="text-yellow-600 font-bold">YM</span>
                </div>
                YM GT Ürün Özeti
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-gray-50 p-4 rounded-lg">
                  <span className="text-sm text-gray-500 block">Stok Kodu:</span>
                  <p className="font-semibold text-gray-800">{ymGtData.stok_kodu}</p>
                </div>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <span className="text-sm text-gray-500 block">Stok Adı:</span>
                  <p className="font-semibold text-gray-800">{ymGtData.stok_adi}</p>
                </div>
              </div>
            </div>
          )}

          {/* YM ST Yönetimi */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-semibold flex items-center gap-2">
                <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                  <span className="text-green-600 font-bold">ST</span>
                </div>
                YM ST Seçimi
              </h2>
              <button
                onClick={generateAutoYmSts}
                className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors shadow-lg flex items-center gap-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Otomatik Oluştur
              </button>
            </div>

            {/* Uygun YM ST'ler */}
            {suitableYmSts.length > 0 && (
              <div className="mb-6">
                <h3 className="text-lg font-medium mb-3 text-gray-700">Veritabanından Uygun YM ST'ler</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {suitableYmSts.map(ymSt => (
                    <div
                      key={ymSt.id}
                      className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${
                        selectedYmSts.find(item => item.stok_kodu === ymSt.stok_kodu)
                          ? 'bg-blue-50 border-blue-500 shadow-lg'
                          : 'bg-gray-50 border-gray-200 hover:bg-gray-100'
                      }`}
                      onClick={() => handleYmStSelection(ymSt)}
                    >
                      <div className="flex justify-between items-center">
                        <div className="flex-1">
                          <p className="font-medium text-gray-800">{ymSt.stok_kodu || ''}</p>
                          <p className="text-sm text-gray-600 mt-1">{ymSt.stok_adi || ''}</p>
                        </div>
                        <div className="text-sm text-gray-500 text-right">
                          <p>{ymSt.cap || '0'} mm</p>
                          {selectedYmSts.find(item => item.stok_kodu === ymSt.stok_kodu) && (
                            <span className="text-blue-600">✓ Seçildi</span>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Otomatik Oluşturulan YM ST'ler */}
            {autoGeneratedYmSts.length > 0 && (
              <div className="mb-6">
                <h3 className="text-lg font-medium mb-3 text-gray-700">Otomatik Oluşturulan YM ST'ler</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {autoGeneratedYmSts.map((ymSt, index) => (
                    <div
                      key={index}
                      className="p-4 border-2 rounded-lg bg-green-50 border-green-200"
                    >
                      <div className="flex justify-between items-center">
                        <div className="flex-1">
                          <p className="font-medium text-gray-800">{ymSt.stok_kodu || ''}</p>
                          <p className="text-sm text-gray-600 mt-1">{ymSt.stok_adi || ''}</p>
                          <span className="inline-block mt-2 px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">
                            Otomatik Oluşturuldu
                          </span>
                        </div>
                        <div className="text-sm text-gray-500 text-right">
                          <p>{ymSt.cap || '0'} mm</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Seçilen YM ST'ler */}
            {selectedYmSts.length > 0 && (
              <div>
                <h3 className="text-lg font-medium mb-3 text-gray-700">Seçilen YM ST'ler</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {selectedYmSts.map((ymSt, index) => (
                    <div
                      key={index}
                      className="p-4 border-2 rounded-lg bg-blue-50 border-blue-200"
                    >
                      <div className="flex justify-between items-center">
                        <div className="flex-1">
                          <p className="font-medium text-gray-800">{ymSt.stok_kodu || ''}</p>
                          <p className="text-sm text-gray-600 mt-1">{ymSt.stok_adi || ''}</p>
                          <span className="inline-block mt-2 px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                            Veritabanından
                          </span>
                        </div>
                        <button
                          onClick={() => setSelectedYmSts(prev => prev.filter((_, i) => i !== index))}
                          className="text-red-500 hover:text-red-700 ml-4"
                        >
                          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Reçete Bölümü */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-semibold flex items-center gap-2">
                <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                  <span className="text-purple-600 font-bold">R</span>
                </div>
                Reçete Değerleri
              </h2>
              <button
                onClick={calculateRecipeValues}
                className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors shadow-lg flex items-center gap-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7l4-4 4 4m0 6l-4 4-4-4" />
                </svg>
                Otomatik Doldur
              </button>
            </div>

            {/* MM GT Reçeteleri */}
            {Object.keys(mmGtRecetes).length > 0 && (
              <div className="mb-8">
                <h3 className="text-lg font-medium mb-3 text-gray-700">MM GT Reçeteleri</h3>
                {Object.entries(mmGtRecetes).map(([index, recete]) => (
                  <div key={index} className="mb-6 p-4 bg-red-50 rounded-lg">
                    <h4 className="font-medium text-red-700 mb-3">
                      MM GT #{parseInt(index) + 1}
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {Object.entries(recete).map(([key, value]) => (
                        <div key={key} className="space-y-1">
                          <label className="block text-sm font-medium text-gray-700">
                            {key}
                          </label>
                          <input
                            type="number"
                            step="0.000001"
                            value={value || ''}
                            onChange={(e) => setMmGtRecetes(prev => ({
                              ...prev,
                              [index]: {
                                ...prev[index],
                                [key]: parseFloat(e.target.value) || 0
                              }
                            }))}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                          />
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* YM GT Reçete */}
            <div className="mb-8">
              <h3 className="text-lg font-medium mb-3 text-gray-700">YM GT Reçete</h3>
              <div className="p-4 bg-yellow-50 rounded-lg">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {Object.entries(ymGtRecete).map(([key, value]) => (
                    <div key={key} className="space-y-1">
                      <label className="block text-sm font-medium text-gray-700">
                        {key}
                      </label>
                      <input
                        type="number"
                        step="0.000001"
                        value={value || ''}
                        onChange={(e) => setYmGtRecete(prev => ({
                          ...prev,
                          [key]: parseFloat(e.target.value) || 0
                        }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500"
                      />
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* YM ST Reçeteleri */}
            {Object.keys(ymStRecetes).length > 0 && (
              <div>
                <h3 className="text-lg font-medium mb-3 text-gray-700">YM ST Reçeteleri</h3>
                {Object.entries(ymStRecetes).map(([stokKodu, recete]) => (
                  <div key={stokKodu} className="mb-6 p-4 bg-green-50 rounded-lg">
                    <h4 className="font-medium text-green-700 mb-3">
                      {stokKodu}
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {Object.entries(recete).map(([key, value]) => (
                        <div key={key} className="space-y-1">
                          <label className="block text-sm font-medium text-gray-700">
                            {key}
                          </label>
                          <input
                            type="number"
                            step="0.000001"
                            value={value || ''}
                            onChange={(e) => setYmStRecetes(prev => ({
                              ...prev,
                              [stokKodu]: {
                                ...prev[stokKodu],
                                [key]: parseFloat(e.target.value) || 0
                              }
                            }))}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                          />
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* İşlem Butonları */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex flex-wrap gap-4 justify-center">
              <button
                onClick={() => setCurrentStep('input')}
                className="bg-gray-500 text-white px-6 py-3 rounded-lg hover:bg-gray-600 transition-colors shadow-lg flex items-center gap-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                Geri
              </button>
              
              {!savedToDatabase && (
                <button
                  onClick={saveToDatabase}
                  disabled={isLoading}
                  className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 shadow-lg flex items-center gap-2"
                >
                  {isLoading ? (
                    <>
                      <svg className="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Kaydediliyor...
                    </>
                  ) : (
                    <>
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
                      </svg>
                      Veritabanına Kaydet
                    </>
                  )}
                </button>
              )}
              
              <button
                onClick={generateExcelFiles}
                disabled={isLoading}
                className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 shadow-lg flex items-center gap-2"
              >
                {isLoading ? (
                  <>
                    <svg className="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Oluşturuluyor...
                  </>
                ) : (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
                    </svg>
                    Excel Dosyalarını Oluştur
                  </>
                )}
              </button>
              
              {selectedRequest && savedToDatabase && (
                <>
                  <button
                    onClick={handleApproveRequest}
                    disabled={isLoading}
                    className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 shadow-lg flex items-center gap-2"
                  >
                    {isLoading ? (
                      <>
                        <svg className="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Onaylanıyor...
                      </>
                    ) : (
                      <>
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Talebi Onayla
                      </>
                    )}
                  </button>
                  <button
                    onClick={handleRejectRequest}
                    disabled={isLoading}
                    className="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50 shadow-lg flex items-center gap-2"
                  >
                    {isLoading ? (
                      <>
                        <svg className="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        İşleniyor...
                      </>
                    ) : (
                      <>
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                        Talebi Reddet
                      </>
                    )}
                  </button>
                </>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Talepler Modalı */}
      {showRequestsModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl w-full max-w-6xl max-h-[80vh] overflow-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-800 flex items-center gap-2">
                  <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                  </svg>
                  Bekleyen Talepler
                </h2>
                <button
                  onClick={() => setShowRequestsModal(false)}
                  className="text-gray-500 hover:text-gray-700 transition-colors"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              {isLoading ? (
                <div className="flex justify-center items-center py-12">
                  <div className="text-gray-500 flex items-center gap-2">
                    <svg className="animate-spin h-5 w-5" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Yükleniyor...
                  </div>
                </div>
              ) : requests.length === 0 ? (
                <div className="text-center py-12">
                  <svg className="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                  </svg>
                  <p className="text-gray-500 text-lg">Bekleyen talep bulunamadı.</p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Çap
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Kaplama Türü
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Kaplama
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Mukavemet
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Ağırlık
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          İşlem
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {requests.map((request) => (
                        <tr key={request.id} className="hover:bg-gray-50 transition-colors">
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            {request.cap || '0'} mm
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                              request.kod_2 === 'NIT' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'
                            }`}>
                              {request.kod_2 || ''}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {request.kaplama || '0'} gr/m²
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {request.min_mukavemet || '0'}-{request.max_mukavemet || '0'} MPa
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {request.kg || '0'} kg
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button
                              onClick={() => handleSelectRequest(request)}
                              className="text-blue-600 hover:text-blue-900 transition-colors"
                            >
                              Seç
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Mevcut MM GT Modalı */}
      {showExistingMmGtModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl w-full max-w-6xl max-h-[80vh] overflow-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-800 flex items-center gap-2">
                  <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                  Mevcut MM GT Listesi
                </h2>
                <button
                  onClick={() => setShowExistingMmGtModal(false)}
                  className="text-gray-500 hover:text-gray-700 transition-colors"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              {existingMmGts.length === 0 ? (
                <div className="text-center py-12">
                  <svg className="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                  <p className="text-gray-500 text-lg">Mevcut MM GT bulunamadı.</p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Stok Kodu
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Çap
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Kaplama Türü
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Kaplama
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Mukavemet
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Ağırlık
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          İşlem
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {existingMmGts.map((mmGt) => (
                        <tr key={mmGt.id} className="hover:bg-gray-50 transition-colors">
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            {mmGt.stok_kodu || ''}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {mmGt.cap || '0'} mm
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                              mmGt.kod_2 === 'NIT' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'
                            }`}>
                              {mmGt.kod_2 || ''}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {mmGt.kaplama || '0'} gr/m²
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {mmGt.min_mukavemet || '0'}-{mmGt.max_mukavemet || '0'} MPa
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {mmGt.kg || '0'} kg
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button
                              onClick={() => handleSelectExistingMmGt(mmGt)}
                              className="text-purple-600 hover:text-purple-900 transition-colors"
                            >
                              Seç
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default GalvanizliTelNetsis;
