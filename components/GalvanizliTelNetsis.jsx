// GalvanizliTelNetsis.jsx - Düzeltilmiş Versiyon
import React, { useState, useEffect, useMemo } from 'react';
import { useAuth } from '@/context/AuthContext';
import { API_URLS, fetchWithAuth, normalizeInputValue } from '@/api-config';
import { fetchWithCorsProxy, CORS_PROXY_API_URLS } from '@/lib/cors-proxy';
import { toast } from 'react-toastify';
import ExcelJS from 'exceljs';
import { saveAs } from 'file-saver';

const GalvanizliTelNetsis = () => {
  const { user, hasPermission } = useAuth();
  
  // Ana state değişkenleri
  const [currentStep, setCurrentStep] = useState('input'); // input, summary, processing
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState('');
  
  // User input values for calculations
  const [userInputValues, setUserInputValues] = useState({
    ash: 5.54, // Ash (Kül) (Kg/tonne)
    lapa: 2.73, // Lapa (Kg/tonne)
    uretim_kapasitesi_aylik: 2800,
    toplam_tuketilen_asit: 30000,
    ortalama_uretim_capi: 3.08,
    paketlemeDkAdet: 10
  });
  
  // Talep yönetimi state'leri
  const [requests, setRequests] = useState([]);
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [showRequestsModal, setShowRequestsModal] = useState(false);
  const [isRequestUsed, setIsRequestUsed] = useState(false); // Talep kullanılma durumu
  
  // Mevcut MM GT seçimi için state'ler
  const [existingMmGts, setExistingMmGts] = useState([]);
  const [selectedExistingMmGt, setSelectedExistingMmGt] = useState(null);
  const [showExistingMmGtModal, setShowExistingMmGtModal] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [itemToDelete, setItemToDelete] = useState(null);
  const [deleteType, setDeleteType] = useState('mmgt'); // 'mmgt' or 'ymst'
  
  // Settings modal for user input values
  const [showSettingsModal, setShowSettingsModal] = useState(false);
  
  // YM ST ekleme modalı
  const [showAddYmStModal, setShowAddYmStModal] = useState(false);
  const [newYmStData, setNewYmStData] = useState({
    cap: '',
    filmasin: '',
    quality: ''
  });
  
  // YMST listesi için stateler
  const [existingYmSts, setExistingYmSts] = useState([]);
  const [activeDbTab, setActiveDbTab] = useState('mmgt'); // 'mmgt' or 'ymst'
  const [mainYmStIndex, setMainYmStIndex] = useState(0); // Ana YMST'nin index'i (1:1:n ilişkisi için)
  
  // Session tracking - aynı oturumda kaydedilen ürünleri takip etmek için
  const [sessionSavedProducts, setSessionSavedProducts] = useState({
    mmGtIds: [],
    ymGtId: null,
    ymStIds: []
  });
  
  // Form verileri - Decimal değerleri nokta formatına çeviren yardımcı fonksiyon - NOKTA KULLAN
  const normalizeDecimalDisplay = (value) => {
    // Handle null or undefined
    if (value === null || value === undefined) {
      return '';
    }
    
    // For numbers, force specific formatting with points
    if (typeof value === 'number') {
      // Use string conversion to force point as decimal separator
      return value.toString();
    }
    
    // For strings with commas, convert to points
    if (typeof value === 'string' && value.includes(',')) {
      return value.replace(/,/g, '.');
    }
    
    // For strings that are already properly formatted with points, return as is
    if (typeof value === 'string') {
      return value;
    }
    
    // Fallback
    return value ? value.toString() : '';
  };
  
  // Form verileri - NOKTA kullan decimal için
  const [mmGtData, setMmGtData] = useState({
    cap: '2.50', // Ensure point decimal separator 
    kod_2: 'NIT',
    kaplama: '50', // Integer value
    min_mukavemet: '350', // Integer value
    max_mukavemet: '550', // Integer value
    kg: '500', // Integer value
    ic_cap: 45,
    dis_cap: 75,
    tolerans_plus: '0.05', // Ensure point decimal separator
    tolerans_minus: '0.06', // Ensure point decimal separator
    shrink: 'evet',
    unwinding: '',
    cast_kont: '',
    helix_kont: '',
    elongation: ''
  });
  
  // Hesaplanan/oluşturulan veriler
  const [ymGtData, setYmGtData] = useState(null);
  const [suitableYmSts, setSuitableYmSts] = useState([]);
  const [selectedYmSts, setSelectedYmSts] = useState([]);
  const [autoGeneratedYmSts, setAutoGeneratedYmSts] = useState([]);
  
  // Reçete verileri - Her YM ST için MM GT, YM GT ve YM ST reçeteleri
  const [allRecipes, setAllRecipes] = useState({
    mmGtRecipes: {}, // { ymStIndex: { recipe } }
    ymGtRecipe: {}, // Tek YM GT reçetesi (sequence matching)
    ymStRecipes: {} // { ymStIndex: { recipe } }
  });
  
  // Reçete durumu takibi - hangi alan nereden geldi
  const [recipeStatus, setRecipeStatus] = useState({
    mmGtRecipes: {}, // { ymStIndex: { bilesen_kodu: 'database' | 'auto' | 'manual' } }
    ymGtRecipe: {}, // { bilesen_kodu: 'database' | 'auto' | 'manual' }
    ymStRecipes: {} // { ymStIndex: { bilesen_kodu: 'database' | 'auto' | 'manual' } }
  });
  
  // Aktif reçete sekmesi
  const [activeRecipeTab, setActiveRecipeTab] = useState(0); // Hangi YM ST'nin reçetesi gösteriliyor
  
  // Veritabanı state'leri
  const [savedToDatabase, setSavedToDatabase] = useState(false);
  const [databaseIds, setDatabaseIds] = useState({
    mmGtIds: [], // Çoklu MM GT ID'ler
    ymGtId: null,
    ymStIds: []
  });

  // Dostça alan adları
  const friendlyNames = {
    'TLC01': 'Tel Çekme Süre (TLC01)',
    'SM.HİDROLİK.ASİT': 'HCL Asit (SM.HİDROLİK.ASİT)',
    '150 03': 'Çinko (150 03)',
    'AMB.APEX CEMBER 38X080': 'Çelik çember (AMB.APEX CEMBER 38X080)',
    'AMB.TOKA.SIGNODE.114P. DKP': 'Çember tokası (AMB.TOKA.SIGNODE.114P. DKP)',
    'SM.7MMHALKA': 'Kaldırma kancası (SM.7MMHALKA)',
    'AMB.SHRİNK.200*140CM': 'Shrink (AMB.SHRİNK.200*140CM)',
    'AMB.SHRİNK.200*160CM': 'Shrink (AMB.SHRİNK.200*160CM)',
    'AMB.SHRİNK.200*190CM': 'Shrink (AMB.SHRİNK.200*190CM)',
    'AMB.ÇEM.KARTON.GAL': 'Karton (AMB.ÇEM.KARTON.GAL)',
    'GTPKT01': 'Paketleme Süre (GTPKT01)',
    'GLV01': 'Galvaniz Süre (GLV01)',
    'SM.DESİ.PAK': 'Silkajel Tüketimi (AD)'
  };

  // İzin kontrolü
  if (!hasPermission('access:galvanizli-tel')) {
    return (
      <div className="p-4 text-center">
        <div className="bg-red-50 border border-red-200 rounded-md p-4">
          <p className="text-red-700">Bu modüle erişim izniniz bulunmamaktadır.</p>
        </div>
      </div>
    );
  }

  // Sayfa yüklendiğinde talepleri getir
  useEffect(() => {
    fetchRequests();
    fetchExistingMmGts();
    fetchExistingYmSts();
    fetchUserInputValues();
  }, []);
  
  // Fetch user input values from database
  const fetchUserInputValues = async () => {
    try {
      // Check if the API endpoint URL is defined
      if (!API_URLS.galUserInputValues) {
        console.warn('galUserInputValues API endpoint is not defined, using default values');
        return;
      }
      
      const response = await fetch(API_URLS.galUserInputValues);
      if (response && response.ok) {
        const data = await response.json();
        // Get the latest entry
        if (data && data.length > 0) {
          // Sort by created_at in descending order to get the latest
          const sortedData = data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
          const latestValues = sortedData[0];
          
          setUserInputValues({
            ash: parseFloat(latestValues.ash) || 5.54,
            lapa: parseFloat(latestValues.lapa) || 2.73,
            uretim_kapasitesi_aylik: parseFloat(latestValues.uretim_kapasitesi_aylik) || 2800,
            toplam_tuketilen_asit: parseFloat(latestValues.toplam_tuketilen_asit) || 30000,
            ortalama_uretim_capi: parseFloat(latestValues.ortalama_uretim_capi) || 3.08,
            paketlemeDkAdet: parseFloat(latestValues.paketlemeDkAdet) || 10
          });
        }
      }
    } catch (error) {
      console.error('Error fetching user input values:', error);
    }
  };
  
  // Save user input values to database
  const saveUserInputValues = async () => {
    try {
      setIsLoading(true);
      
      // Make sure all inputs are valid numbers
      const validatedInputs = {
        ash: parseFloat(userInputValues.ash) || 5.54,
        lapa: parseFloat(userInputValues.lapa) || 2.73,
        uretim_kapasitesi_aylik: parseFloat(userInputValues.uretim_kapasitesi_aylik) || 2800,
        toplam_tuketilen_asit: parseFloat(userInputValues.toplam_tuketilen_asit) || 30000,
        ortalama_uretim_capi: parseFloat(userInputValues.ortalama_uretim_capi) || 3.08,
        paketlemeDkAdet: parseFloat(userInputValues.paketlemeDkAdet) || 10
      };
      
      // Update the state with validated values
      setUserInputValues(validatedInputs);
      
      // Check if the API endpoint URL is defined
      if (API_URLS.galUserInputValues) {
        // Save to database if endpoint exists
        const response = await fetch(API_URLS.galUserInputValues, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(validatedInputs)
        });
        
        if (response.ok) {
          toast.success('Hesaplama değerleri başarıyla kaydedildi.');
        } else {
          toast.error('Hesaplama değerleri kaydedilirken bir hata oluştu.');
        }
      } else {
        // Just update local state if no endpoint
        toast.success('Hesaplama değerleri güncellendi.');
      }
      
      // Close the modal
      setShowSettingsModal(false);
      
      // Recalculate recipes with new values if any exist
      if (Object.keys(allRecipes.ymGtRecipe).length > 0 || 
          Object.keys(allRecipes.ymStRecipes).length > 0) {
        calculateAutoRecipeValues();
      }
    } catch (error) {
      console.error('Error saving user input values:', error);
      toast.error('Hesaplama değerleri kaydedilirken bir hata oluştu.');
    } finally {
      setIsLoading(false);
    }
  };

  // Cap değeri değiştiğinde Dış Çap'ı otomatik hesapla
  useEffect(() => {
    if (mmGtData.cap && mmGtData.ic_cap) {
      const cap = parseFloat(mmGtData.cap) || 0;
      const icCap = parseInt(mmGtData.ic_cap) || 45;
      let disCap;
      
      // Çap ve iç çapa göre dış çap hesaplama
      if (icCap === 45) disCap = 75;
      else if (icCap === 50) disCap = 90;
      else if (icCap === 55) disCap = 105;
      else disCap = icCap + (cap * 10); // Genel hesaplama
      
      setMmGtData(prev => ({ ...prev, dis_cap: disCap }));
    }
  }, [mmGtData.cap, mmGtData.ic_cap]);

  // Kod-2 değişikliğinde kaplama değerini güncelle
  useEffect(() => {
    if (mmGtData.kod_2 === 'PAD') {
      setMmGtData(prev => ({ ...prev, kaplama: '50' }));
    }
  }, [mmGtData.kod_2]);

  // Talepleri getir
  const fetchRequests = async () => {
    try {
      setIsLoading(true);
      const response = await fetchWithAuth(`${API_URLS.galSalRequests}?status=pending`);
      if (response && response.ok) {
        const data = await response.json();
        setRequests(Array.isArray(data) ? data : []);
      }
    } catch (error) {
      console.error('Talepler getirilirken hata:', error);
      toast.error('Talepler getirilemedi');
    } finally {
      setIsLoading(false);
    }
  };

  // Mevcut MM GT'leri getir
  const fetchExistingMmGts = async () => {
    try {
      const response = await fetchWithAuth(API_URLS.galMmGt);
      if (response && response.ok) {
        const data = await response.json();
        setExistingMmGts(Array.isArray(data) ? data : []);
      }
    } catch (error) {
      console.error('Mevcut MM GT listesi getirilirken hata:', error);
      toast.error('Mevcut MM GT listesi getirilemedi');
    }
  };

  // Mevcut YM ST'leri getir
  const fetchExistingYmSts = async () => {
    try {
      const response = await fetchWithAuth(API_URLS.galYmSt);
      if (response && response.ok) {
        const data = await response.json();
        setExistingYmSts(Array.isArray(data) ? data : []);
      }
    } catch (error) {
      console.error('Mevcut YM ST listesi getirilirken hata:', error);
      toast.error('Mevcut YM ST listesi getirilemedi');
    }
  };

  // Mevcut reçete verilerini getir (daha güçlü)
  const fetchExistingRecipes = async (mmGtId, ymGtId, ymStIds) => {
    try {
      setIsLoading(true);
      let statusUpdates = {
        mmGtRecipes: {},
        ymGtRecipe: {},
        ymStRecipes: {}
      };
      
      // MM GT reçetelerini getir
      if (mmGtId) {
        const mmGtRecipeResponse = await fetchWithAuth(`${API_URLS.galMmGtRecete}?mm_gt_id=${mmGtId}`);
        if (mmGtRecipeResponse && mmGtRecipeResponse.ok) {
          const mmGtRecipeData = await mmGtRecipeResponse.json();
          // Parse recipe data
          const parsedMmGtRecipe = {};
          mmGtRecipeData.forEach(item => {
            parsedMmGtRecipe[item.bilesen_kodu] = item.miktar;
            if (!statusUpdates.mmGtRecipes[0]) statusUpdates.mmGtRecipes[0] = {};
            statusUpdates.mmGtRecipes[0][item.bilesen_kodu] = 'database';
          });
          setAllRecipes(prev => ({
            ...prev,
            mmGtRecipes: { ...prev.mmGtRecipes, 0: parsedMmGtRecipe }
          }));
        }
      }
      
      // YM GT reçetesini getir
      if (ymGtId) {
        const ymGtRecipeResponse = await fetchWithAuth(`${API_URLS.galYmGtRecete}?ym_gt_id=${ymGtId}`);
        if (ymGtRecipeResponse && ymGtRecipeResponse.ok) {
          const ymGtRecipeData = await ymGtRecipeResponse.json();
          const parsedYmGtRecipe = {};
          ymGtRecipeData.forEach(item => {
            parsedYmGtRecipe[item.bilesen_kodu] = item.miktar;
            statusUpdates.ymGtRecipe[item.bilesen_kodu] = 'database';
          });
          setAllRecipes(prev => ({
            ...prev,
            ymGtRecipe: parsedYmGtRecipe
          }));
        }
      }
      
      // YM ST reçetelerini getir
      if (ymStIds.length > 0) {
        for (let i = 0; i < ymStIds.length; i++) {
          const ymStId = ymStIds[i];
          const ymStRecipeResponse = await fetchWithAuth(`${API_URLS.galYmStRecete}?ym_st_id=${ymStId}`);
          if (ymStRecipeResponse && ymStRecipeResponse.ok) {
            const ymStRecipeData = await ymStRecipeResponse.json();
            const parsedYmStRecipe = {};
            ymStRecipeData.forEach(item => {
              parsedYmStRecipe[item.bilesen_kodu] = item.miktar;
              if (!statusUpdates.ymStRecipes[i]) statusUpdates.ymStRecipes[i] = {};
              statusUpdates.ymStRecipes[i][item.bilesen_kodu] = 'database';
            });
            setAllRecipes(prev => ({
              ...prev,
              ymStRecipes: { ...prev.ymStRecipes, [i]: parsedYmStRecipe }
            }));
          }
        }
      }
      
      // Reçete durumlarını güncelle
      setRecipeStatus(statusUpdates);
      
    } catch (error) {
      console.error('Mevcut reçeteler getirilirken hata:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Veritabanından reçete getir fonksiyonu
  const fetchRecipesFromDatabase = async () => {
    try {
      setIsLoading(true);
      const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
      let foundAny = false;
      let statusUpdates = {
        mmGtRecipes: {},
        ymGtRecipe: {},
        ymStRecipes: {}
      };
      
      // ÖNEMLİ: Bu kısım sadece mevcut reçeteleri kontrol etmek için kullanılıyor
      // Burada sadece mainYmSt için MMGT reçetesi aranmalı
      const mainYmStIndex = 0; // Ana YMST'yi kullan
      
      // Sequence için veritabanını kontrol et, eğer yeni ürün ise '00'
      let mainSequence = '00';
      for (let i = 0; i < 1; i++) { // Sadece bir kez çalıştır (ana YMST için)
        const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
        // Eğer yeni ürün değilse mevcut sequence kullanılacak
        const mmGtStokKodu = `GT.${mmGtData.kod_2}.${capFormatted}.${mainSequence}`;
        
        // MM GT'yi bul
        const mmGtResponse = await fetchWithAuth(`${API_URLS.galMmGt}?stok_kodu=${encodeURIComponent(mmGtStokKodu)}`);
        if (mmGtResponse && mmGtResponse.ok) {
          const mmGtData = await mmGtResponse.json();
          if (mmGtData.length > 0) {
            const mmGtId = mmGtData[0].id;
            
            // MM GT reçetesini getir
            const mmGtRecipeResponse = await fetchWithAuth(`${API_URLS.galMmGtRecete}?mm_gt_id=${mmGtId}`);
            if (mmGtRecipeResponse && mmGtRecipeResponse.ok) {
              const mmGtRecipeData = await mmGtRecipeResponse.json();
              if (mmGtRecipeData.length > 0) {
                const parsedMmGtRecipe = {};
                mmGtRecipeData.forEach(item => {
                  parsedMmGtRecipe[item.bilesen_kodu] = item.miktar;
                  if (!statusUpdates.mmGtRecipes[i]) statusUpdates.mmGtRecipes[i] = {};
                  statusUpdates.mmGtRecipes[i][item.bilesen_kodu] = 'database';
                });
                setAllRecipes(prev => ({
                  ...prev,
                  mmGtRecipes: { ...prev.mmGtRecipes, [i]: parsedMmGtRecipe }
                }));
                foundAny = true;
              }
            }
          }
        }
      }
      
      // YM GT reçetelerini getir (her sequence için)
      for (let i = 0; i < allYmSts.length; i++) {
        const sequence = i.toString().padStart(2, '0');
        const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
        const ymGtStokKodu = `YM.GT.${mmGtData.kod_2}.${capFormatted}.${sequence}`;
        
        // YM GT'yi bul
        const ymGtResponse = await fetchWithAuth(`${API_URLS.galYmGt}?stok_kodu=${encodeURIComponent(ymGtStokKodu)}`);
        if (ymGtResponse && ymGtResponse.ok) {
          const ymGtData = await ymGtResponse.json();
          if (ymGtData.length > 0) {
            const ymGtId = ymGtData[0].id;
            
            // YM GT reçetesini getir
            const ymGtRecipeResponse = await fetchWithAuth(`${API_URLS.galYmGtRecete}?ym_gt_id=${ymGtId}`);
            if (ymGtRecipeResponse && ymGtRecipeResponse.ok) {
              const ymGtRecipeData = await ymGtRecipeResponse.json();
              if (ymGtRecipeData.length > 0) {
                const parsedYmGtRecipe = {};
                ymGtRecipeData.forEach(item => {
                  // YM ST bağlantısını sequence'e göre güncelle
                  if (item.bilesen_kodu.includes('YM.ST.')) {
                    parsedYmGtRecipe[allYmSts[i].stok_kodu] = item.miktar;
                    statusUpdates.ymGtRecipe[allYmSts[i].stok_kodu] = 'database';
                  } else {
                    parsedYmGtRecipe[item.bilesen_kodu] = item.miktar;
                    statusUpdates.ymGtRecipe[item.bilesen_kodu] = 'database';
                  }
                });
                setAllRecipes(prev => ({
                  ...prev,
                  ymGtRecipe: parsedYmGtRecipe
                }));
                foundAny = true;
              }
            }
          }
        }
      }
      
      // YM ST reçetelerini getir
      for (let i = 0; i < allYmSts.length; i++) {
        const ymSt = allYmSts[i];
        
        // YM ST'yi bul
        let ymStResponse;
        if (ymSt.id) {
          // Veritabanından seçilmiş YM ST
          ymStResponse = await fetchWithAuth(`${API_URLS.galYmSt}/${ymSt.id}`);
        } else {
          // Otomatik oluşturulmuş YM ST için stok koduna göre ara
          ymStResponse = await fetchWithAuth(`${API_URLS.galYmSt}?stok_kodu=${encodeURIComponent(ymSt.stok_kodu)}`);
        }
        
        if (ymStResponse && ymStResponse.ok) {
          let ymStData = await ymStResponse.json();
          if (Array.isArray(ymStData)) ymStData = ymStData[0];
          
          if (ymStData && ymStData.id) {
            // YM ST reçetesini getir
            const ymStRecipeResponse = await fetchWithAuth(`${API_URLS.galYmStRecete}?ym_st_id=${ymStData.id}`);
            if (ymStRecipeResponse && ymStRecipeResponse.ok) {
              const ymStRecipeData = await ymStRecipeResponse.json();
              if (ymStRecipeData.length > 0) {
                const parsedYmStRecipe = {};
                ymStRecipeData.forEach(item => {
                  parsedYmStRecipe[item.bilesen_kodu] = item.miktar;
                  if (!statusUpdates.ymStRecipes[i]) statusUpdates.ymStRecipes[i] = {};
                  statusUpdates.ymStRecipes[i][item.bilesen_kodu] = 'database';
                });
                setAllRecipes(prev => ({
                  ...prev,
                  ymStRecipes: { ...prev.ymStRecipes, [i]: parsedYmStRecipe }
                }));
                foundAny = true;
              }
            }
          }
        }
      }
      
      // Reçete durumlarını güncelle
      setRecipeStatus(statusUpdates);
      
      if (!foundAny) {
        toast.info('Veritabanında eşleşen reçete bulunamadı');
        // Alanları temizle
        setAllRecipes({
          mmGtRecipes: {},
          ymGtRecipe: {},
          ymStRecipes: {}
        });
        setRecipeStatus({
          mmGtRecipes: {},
          ymGtRecipe: {},
          ymStRecipes: {}
        });
      } else {
        toast.success('Veritabanından reçeteler başarıyla getirildi');
      }
    } catch (error) {
      console.error('Veritabanından reçete getirme hatası:', error);
      toast.error('Veritabanından reçete getirme hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Talep sil fonksiyonu
  const deleteRequest = async (requestId) => {
    try {
      setIsLoading(true);
      const response = await fetchWithAuth(`${API_URLS.galSalRequests}/${requestId}`, {
        method: 'DELETE'
      });
      
      if (response && response.ok) {
        toast.success('Talep başarıyla silindi');
        fetchRequests(); // Listeyi yenile
      } else {
        toast.error('Talep silinirken hata oluştu');
      }
    } catch (error) {
      console.error('Talep silme hatası:', error);
      toast.error('Talep silme hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // MM GT silme fonksiyonu - İyileştirilmiş hata yönetimi
  const deleteMmGt = async (mmGt) => {
    try {
      setIsLoading(true);
      
      // Sequential MM GT'leri bul ve sil
      const baseCode = mmGt.stok_kodu.substring(0, mmGt.stok_kodu.lastIndexOf('.'));
      const existingMmGts = await fetchWithAuth(`${API_URLS.galMmGt}?stok_kodu_like=${encodeURIComponent(baseCode)}`);
      
      let mmGtIdsToDelete = [];
      if (existingMmGts && existingMmGts.ok) {
        const mmGtList = await existingMmGts.json();
        mmGtIdsToDelete = mmGtList.map(item => item.id);
      }
      
      // Her MM GT için bağlantılı verileri sil
      for (const mmGtId of mmGtIdsToDelete) {
        // MM GT reçetelerini sil
        try {
          const mmGtRecipes = await fetchWithAuth(`${API_URLS.galMmGtRecete}?mm_gt_id=${mmGtId}`);
          if (mmGtRecipes && mmGtRecipes.ok) {
            const recipes = await mmGtRecipes.json();
            for (const recipe of recipes) {
              await fetchWithAuth(`${API_URLS.galMmGtRecete}/${recipe.id}`, { method: 'DELETE' });
            }
          }
        } catch (error) {
          console.log('MM GT reçetesi bulunamadı veya silinirken hata:', error);
        }
        
        // MM GT-YM ST ilişkilerini sil
        try {
          const mmGtYmStRelations = await fetchWithAuth(`${API_URLS.galMmGtYmSt}?mm_gt_id=${mmGtId}`);
          if (mmGtYmStRelations && mmGtYmStRelations.ok) {
            const relations = await mmGtYmStRelations.json();
            for (const relation of relations) {
              await fetchWithAuth(`${API_URLS.galMmGtYmSt}/${relation.id}`, { method: 'DELETE' });
            }
          }
        } catch (error) {
          console.log('MM GT-YM ST ilişkisi bulunamadı veya silinirken hata:', error);
        }
        
        // MM GT'yi sil
        await fetchWithAuth(`${API_URLS.galMmGt}/${mmGtId}`, { method: 'DELETE' });
      }
      
      // İlişkili YM GT'leri bul ve sil
      const ymGtBaseCode = baseCode.replace('GT.', 'YM.GT.');
      try {
        const existingYmGts = await fetchWithAuth(`${API_URLS.galYmGt}?stok_kodu_like=${encodeURIComponent(ymGtBaseCode)}`);
        
        if (existingYmGts && existingYmGts.ok) {
          const ymGtList = await existingYmGts.json();
          for (const ymGt of ymGtList) {
            // YM GT reçetelerini sil
            try {
              const ymGtRecipes = await fetchWithAuth(`${API_URLS.galYmGtRecete}?ym_gt_id=${ymGt.id}`);
              if (ymGtRecipes && ymGtRecipes.ok) {
                const recipes = await ymGtRecipes.json();
                for (const recipe of recipes) {
                  await fetchWithAuth(`${API_URLS.galYmGtRecete}/${recipe.id}`, { method: 'DELETE' });
                }
              }
            } catch (error) {
              console.log('YM GT reçetesi bulunamadı veya silinirken hata:', error);
            }
            
            // YM GT'yi sil
            await fetchWithAuth(`${API_URLS.galYmGt}/${ymGt.id}`, { method: 'DELETE' });
          }
        }
      } catch (error) {
        console.log('YM GT bulunamadı veya silinirken hata:', error);
      }
      
      // Listeyi yenile
      await fetchExistingMmGts();
      
      setShowDeleteConfirm(false);
      setItemToDelete(null);
      toast.success('MM GT ve bağlı veriler başarıyla silindi');
    } catch (error) {
      console.error('MM GT silme hatası:', error);
      toast.error('MM GT silme hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // YMST silme fonksiyonu
  const deleteYmSt = async (ymSt) => {
    try {
      setIsLoading(true);
      
      // YMST reçetelerini sil
      try {
        const ymStRecipes = await fetchWithAuth(`${API_URLS.galYmStRecete}?ym_st_id=${ymSt.id}`);
        if (ymStRecipes && ymStRecipes.ok) {
          const recipes = await ymStRecipes.json();
          for (const recipe of recipes) {
            await fetchWithAuth(`${API_URLS.galYmStRecete}/${recipe.id}`, { method: 'DELETE' });
          }
        }
      } catch (error) {
        console.log('YM ST reçetesi bulunamadı veya silinirken hata:', error);
      }
      
      // YMST'yi sil
      await fetchWithAuth(`${API_URLS.galYmSt}/${ymSt.id}`, { method: 'DELETE' });
      
      // Listeyi yenile
      await fetchExistingYmSts();
      
      setShowDeleteConfirm(false);
      setItemToDelete(null);
      toast.success('YM ST ve bağlı veriler başarıyla silindi');
    } catch (error) {
      console.error('YM ST silme hatası:', error);
      toast.error('YM ST silme hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Silme onayı aç
  const handleDeleteClick = (item, type) => {
    setItemToDelete(item);
    setDeleteType(type);
    setShowDeleteConfirm(true);
  };

  // Silme onayı kapat
  const handleDeleteCancel = () => {
    setShowDeleteConfirm(false);
    setItemToDelete(null);
    setDeleteType('mmgt');
  };

  // Talep seçimi
  const handleSelectRequest = (request) => {
    setSelectedRequest(request);
    setIsRequestUsed(true); // Talep kullanıldı olarak işaretle
    // Use normalized decimal display for all numeric values to ensure points not commas
    setMmGtData({
      cap: request.cap ? normalizeDecimalDisplay(request.cap) : '',
      kod_2: request.kod_2 || 'NIT',
      kaplama: request.kaplama ? normalizeDecimalDisplay(request.kaplama) : '',
      min_mukavemet: request.min_mukavemet ? normalizeDecimalDisplay(request.min_mukavemet) : '',
      max_mukavemet: request.max_mukavemet ? normalizeDecimalDisplay(request.max_mukavemet) : '',
      kg: request.kg ? normalizeDecimalDisplay(request.kg) : '',
      ic_cap: request.ic_cap || 45,
      dis_cap: request.dis_cap || 75,
      tolerans_plus: request.tolerans_plus ? normalizeDecimalDisplay(request.tolerans_plus) : '',
      tolerans_minus: request.tolerans_minus ? normalizeDecimalDisplay(request.tolerans_minus) : '',
      shrink: request.shrink || 'evet',
      unwinding: request.unwinding || '',
      cast_kont: '',
      helix_kont: '',
      elongation: ''
    });
    setShowRequestsModal(false);
    setCurrentStep('summary');
    generateYmGtData();
    findSuitableYmSts();
  };

  // Mevcut MM GT seçimi
  const handleSelectExistingMmGt = async (mmGt) => {
    setSelectedExistingMmGt(mmGt);
    // Use normalized decimal display for numeric values to ensure points not commas
    setMmGtData({
      cap: mmGt.cap ? normalizeDecimalDisplay(mmGt.cap) : '',
      kod_2: mmGt.kod_2 || 'NIT',
      kaplama: mmGt.kaplama ? normalizeDecimalDisplay(mmGt.kaplama) : '',
      min_mukavemet: mmGt.min_mukavemet ? normalizeDecimalDisplay(mmGt.min_mukavemet) : '',
      max_mukavemet: mmGt.max_mukavemet ? normalizeDecimalDisplay(mmGt.max_mukavemet) : '',
      kg: mmGt.kg ? normalizeDecimalDisplay(mmGt.kg) : '',
      ic_cap: mmGt.ic_cap || 45,
      dis_cap: mmGt.dis_cap || 75,
      tolerans_plus: mmGt.tolerans_plus ? normalizeDecimalDisplay(mmGt.tolerans_plus) : '',
      tolerans_minus: mmGt.tolerans_minus ? normalizeDecimalDisplay(mmGt.tolerans_minus) : '',
      shrink: mmGt.shrink || 'evet',
      unwinding: mmGt.unwinding || '',
      cast_kont: mmGt.cast_kont || '',
      helix_kont: mmGt.helix_kont || '',
      elongation: mmGt.elongation || ''
    });
    setShowExistingMmGtModal(false);
    setCurrentStep('summary');
    generateYmGtData();
    findSuitableYmSts();
    
    // Mevcut reçeteleri getir
    const ymGtId = mmGt.ym_gt_id; // Eğer MM GT ile bağlantılı YM GT varsa
    const ymStIds = []; // MM GT ile bağlantılı YM ST'leri getir
    if (mmGt.id) {
      await fetchExistingRecipes(mmGt.id, ymGtId, ymStIds);
    }
  };

  // YM GT verilerini otomatik oluştur
  const generateYmGtData = () => {
    if (!mmGtData.cap) return;
    
    // Çap formatını düzelt: 2.50 -> 0250 (tam 4 karakter)
    const capValue = parseFloat(mmGtData.cap);
    const capFormatted = Math.round(capValue * 100).toString().padStart(4, '0');
    const sequence = '00'; // İlk YM GT için
    
    const ymGt = {
      stok_kodu: `YM.GT.${mmGtData.kod_2}.${capFormatted}.${sequence}`,
      stok_adi: `YM Galvanizli Tel ${capValue.toFixed(2)} mm -${Math.abs(parseFloat(mmGtData.tolerans_minus || 0)).toFixed(2)}/+${parseFloat(mmGtData.tolerans_plus || 0).toFixed(2)} ${mmGtData.kaplama || '0'} gr/m²${mmGtData.min_mukavemet || '0'}-${mmGtData.max_mukavemet || '0'} MPa ID:${mmGtData.ic_cap || '45'} cm OD:${mmGtData.dis_cap || '75'} cm ${mmGtData.kg || '0'} kg`,
      cap: capValue,
      kod_2: mmGtData.kod_2,
      kaplama: parseInt(mmGtData.kaplama) || 0,
      min_mukavemet: parseInt(mmGtData.min_mukavemet) || 0,
      max_mukavemet: parseInt(mmGtData.max_mukavemet) || 0,
      kg: parseInt(mmGtData.kg) || 0,
      ic_cap: mmGtData.ic_cap,
      dis_cap: mmGtData.dis_cap,
      tolerans_plus: parseFloat(mmGtData.tolerans_plus) || 0,
      tolerans_minus: parseFloat(mmGtData.tolerans_minus) || 0,
      shrink: mmGtData.shrink,
      unwinding: mmGtData.unwinding
    };
    
    setYmGtData(ymGt);
  };

  // Uygun YM ST'leri bul - yeniden arama yapma fonksiyonu
  const findSuitableYmSts = async () => {
    try {
      setIsLoading(true);
      const response = await fetchWithAuth(API_URLS.galYmSt);
      if (response && response.ok) {
        const allYmSts = await response.json();
        const cap = parseFloat(mmGtData.cap) || 0;
        let filtered = [];
        
        if (Array.isArray(allYmSts)) {
          // Önce tam eşleşme olup olmadığını kontrol et
          const exactMatch = allYmSts.find(ymSt => {
            const ymStCap = parseFloat(ymSt.cap) || 0;
            return Math.abs(ymStCap - cap) < 0.01; // Tam eşleşme için tolerance
          });
          
          if (exactMatch) {
            filtered.push(exactMatch);
          }
          
          // Ardından geniş aralıkta filtrele
          if (mmGtData.kod_2 === 'PAD') {
            // PAD için çap aralığı kriterlerine göre filtrele
            if (cap >= 0.12 && cap <= 0.14) {
              const rangeFilter = allYmSts.filter(ymSt => {
                const ymStCap = parseFloat(ymSt.cap) || 0;
                return ymStCap >= 0.12 && ymStCap <= 0.14 && !filtered.includes(ymSt);
              });
              filtered = [...filtered, ...rangeFilter];
            } else if (cap >= 0.15 && cap <= 2.55) {
              const rangeFilter = allYmSts.filter(ymSt => {
                const ymStCap = parseFloat(ymSt.cap) || 0;
                return ymStCap >= 0.15 && ymStCap <= 2.55 && !filtered.includes(ymSt);
              });
              filtered = [...filtered, ...rangeFilter];
            } else if (cap >= 2.60 && cap <= 4.25) {
              const rangeFilter = allYmSts.filter(ymSt => {
                const ymStCap = parseFloat(ymSt.cap) || 0;
                return ymStCap >= 2.60 && ymStCap <= 4.25 && !filtered.includes(ymSt);
              });
              filtered = [...filtered, ...rangeFilter];
            } else if (cap >= 4.30 && cap <= 5.90) {
              const rangeFilter = allYmSts.filter(ymSt => {
                const ymStCap = parseFloat(ymSt.cap) || 0;
                return ymStCap >= 4.30 && ymStCap <= 5.90 && !filtered.includes(ymSt);
              });
              filtered = [...filtered, ...rangeFilter];
            } else if (cap >= 6.00 && cap <= 7.00) {
              const rangeFilter = allYmSts.filter(ymSt => {
                const ymStCap = parseFloat(ymSt.cap) || 0;
                return ymStCap >= 6.00 && ymStCap <= 7.00 && !filtered.includes(ymSt);
              });
              filtered = [...filtered, ...rangeFilter];
            } else if (cap >= 7.30 && cap <= 7.40) {
              const rangeFilter = allYmSts.filter(ymSt => {
                const ymStCap = parseFloat(ymSt.cap) || 0;
                return ymStCap >= 7.30 && ymStCap <= 7.40 && !filtered.includes(ymSt);
              });
              filtered = [...filtered, ...rangeFilter];
            } else if (cap >= 7.70 && cap <= 8.00) {
              const rangeFilter = allYmSts.filter(ymSt => {
                const ymStCap = parseFloat(ymSt.cap) || 0;
                return ymStCap >= 7.70 && ymStCap <= 8.00 && !filtered.includes(ymSt);
              });
              filtered = [...filtered, ...rangeFilter];
            }
          } else if (mmGtData.kod_2 === 'NIT') {
            // NIT için hesaplanan çap aralığına göre filtrele (prompt'ta belirtilen formüllerle)
            const minYmStCap = cap * 0.935; // %6.5 azalma
            const maxYmStCap = cap * 0.995; // %0.5 azalma
            const rangeFilter = allYmSts.filter(ymSt => {
              const ymStCap = parseFloat(ymSt.cap) || 0;
              return ymStCap >= minYmStCap && ymStCap <= maxYmStCap && !filtered.includes(ymSt);
            });
            filtered = [...filtered, ...rangeFilter];
          }
          
          // En yakın 5 ürünle sınırla
          filtered = filtered.slice(0, 5);
        }
        
        setSuitableYmSts(filtered);
      }
    } catch (error) {
      console.error('YM ST listesi getirilirken hata:', error);
      toast.error('YM ST listesi getirilemedi');
    } finally {
      setIsLoading(false);
    }
  };

  // Otomatik YM ST oluştur - 2 farklı adet (düzeltildi)
  const generateAutoYmSts = () => {
    const cap = parseFloat(mmGtData.cap) || 0;
    const autoYmSts = [];
    
    if (mmGtData.kod_2 === 'PAD') {
      // PAD için otomatik YM ST oluştur - 2 farklı versiyonla
      const baseAdjustedCap = cap; // PAD için çap ayarlaması yok
      const filmasinCap = getFilmasinForCap(cap);
      const quality = getQualityForCap(cap);
      
      // İlk YM ST - Tam ölçü
      const capStr1 = Math.round(baseAdjustedCap * 100).toString().padStart(4, '0');
      autoYmSts.push({
        stok_kodu: `YM.ST.${capStr1}.${filmasinCap}.${quality}`,
        stok_adi: `YM Siyah Tel ${capStr1} mm HM:${filmasinCap}.${quality}`,
        cap: baseAdjustedCap,
        filmasin: parseInt(filmasinCap),
        quality: quality,
        source: 'auto-generated'
      });
      
      // İkinci YM ST - Alternatif ölçü (%1 azaltılmış)
      const alternativeCap = baseAdjustedCap * 0.99;
      // Format to 2 decimals for display
      const alternativeCapFormatted = Number(alternativeCap.toFixed(2));
      const capStr2 = Math.round(alternativeCapFormatted * 100).toString().padStart(4, '0');
      autoYmSts.push({
        stok_kodu: `YM.ST.${capStr2}.${filmasinCap}.${quality}`,
        stok_adi: `YM Siyah Tel ${alternativeCapFormatted.toFixed(2)} mm HM:${filmasinCap}.${quality}`,
        cap: alternativeCapFormatted,
        filmasin: parseInt(filmasinCap),
        quality: quality,
        source: 'auto-generated'
      });
    } else if (mmGtData.kod_2 === 'NIT') {
      // NIT için otomatik YM ST oluştur - 2 farklı versiyonla
      const baseAdjustedCap = cap * 0.96; // NIT için %4 azaltma
      // Format to 2 decimals for display
      const baseAdjustedCapFormatted = Number(baseAdjustedCap.toFixed(2));
      const filmasinCap = getFilmasinForCap(baseAdjustedCapFormatted);
      const quality = getQualityForCap(baseAdjustedCapFormatted);
      
      // İlk YM ST
      const capStr1 = Math.round(baseAdjustedCapFormatted * 100).toString().padStart(4, '0');
      autoYmSts.push({
        stok_kodu: `YM.ST.${capStr1}.${filmasinCap}.${quality}`,
        stok_adi: `YM Siyah Tel ${baseAdjustedCapFormatted.toFixed(2)} mm HM:${filmasinCap}.${quality}`,
        cap: baseAdjustedCapFormatted,
        filmasin: parseInt(filmasinCap),
        quality: quality,
        source: 'auto-generated'
      });
      
      // İkinci YM ST - Farklı variant
      const alternativeCap = cap * 0.94; // Daha fazla azaltma
      // Format to 2 decimals for display
      const alternativeCapFormatted = Number(alternativeCap.toFixed(2));
      const capStr2 = Math.round(alternativeCapFormatted * 100).toString().padStart(4, '0');
      autoYmSts.push({
        stok_kodu: `YM.ST.${capStr2}.${filmasinCap}.${quality}`,
        stok_adi: `YM Siyah Tel ${alternativeCapFormatted.toFixed(2)} mm HM:${filmasinCap}.${quality}`,
        cap: alternativeCapFormatted,
        filmasin: parseInt(filmasinCap),
        quality: quality,
        source: 'auto-generated'
      });
    }
    
    setAutoGeneratedYmSts(autoYmSts);
    
    // If this is the first time we're adding YMSTs and there are none selected yet,
    // auto-set the first auto-generated YMST as the main one
    const totalYmSts = selectedYmSts.length + autoYmSts.length;
    if (totalYmSts > 0 && selectedYmSts.length === 0 && autoYmSts.length > 0) {
      setMainYmStIndex(0);
    }
    
    // Otomatik oluşturulan YM ST'ler için reçeteleri hesapla
    setTimeout(() => {
      calculateAutoRecipeValues();
    }, 100);
  };

  // Çap değerine göre filmaşin seç
  const getFilmasinForCap = (cap) => {
    if (cap < 2.0) return '0550';
    if (cap >= 2.0 && cap < 3.0) return '0600';
    if (cap >= 3.0 && cap < 4.5) return '0600';
    if (cap >= 4.5 && cap < 6.0) return '0700';
    if (cap >= 6.0 && cap < 7.5) return '0800';
    return '1000';
  };

  // Çap değerine göre kalite seç
  const getQualityForCap = (cap) => {
    if (cap < 2.0) return '1006';
    if (cap >= 2.0 && cap < 3.0) return '1006';
    if (cap >= 3.0 && cap < 4.5) return '1008';
    if (cap >= 4.5 && cap < 6.0) return '1010';
    if (cap >= 6.0 && cap < 7.5) return '1010';
    return '1010';
  };

  // Otomatik reçete değerlerini hesapla - NOKTA kullan
  const calculateAutoRecipeValues = () => {
    if (!mmGtData.kg || !mmGtData.cap) return;
    
    const cap = parseFloat(mmGtData.cap) || 0;
    const kg = parseFloat(mmGtData.kg) || 0;
    const kaplama = parseInt(mmGtData.kaplama) || 0;
    const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
    
    // Tüm YM ST'ler için reçeteler hesapla
    const newMmGtRecipes = {};
    const newYmStRecipes = {};
    let newYmGtRecipe = {};
    
    // Reçete durumlarını güncelle
    const newRecipeStatus = {
      mmGtRecipes: {},
      ymGtRecipe: {},
      ymStRecipes: {}
    };
    
    // Her YM ST için sequence değer hesapla
    allYmSts.forEach((ymSt, index) => {
      const sequence = index.toString().padStart(2, '0');
      const capFormatted = Math.round(cap * 100).toString().padStart(4, '0');
      
      // MM GT Reçete - her MM GT için
      const ymGtStokKodu = `YM.GT.${mmGtData.kod_2}.${capFormatted}.${sequence}`; // Sequence eşleştirme!
      
      // Shrink tipi ve miktarını otomatik belirle
      const shrinkCode = getShrinkCode(mmGtData.ic_cap);
      const shrinkAmount = calculateShrinkAmount(kg);
      
      // Updated formulas based on GalvanizliFormulas.txt
      // NAYLON (KG/TON): =(1*(1000/'COIL WEIGHT (KG)'))/1000
      const naylonValue = parseFloat(((1 * (1000 / kg)) / 1000).toFixed(5));
      
      // AMB.APEX CEMBER 38X080: =(1.2*(1000/'COIL WEIGHT (KG)'))/1000
      const cemberValue = parseFloat(((1.2 * (1000 / kg)) / 1000).toFixed(5));
      
      // AMB.TOKA.SIGNODE.114P. DKP: =(4*(1000/'COIL WEIGHT (KG)'))/1000
      const tokaValue = parseFloat(((4 * (1000 / kg)) / 1000).toFixed(5));
      
      // SM.7MMHALKA: =(4*(1000/'COIL WEIGHT (KG)'))/1000
      const halkaValue = parseFloat(((4 * (1000 / kg)) / 1000).toFixed(5));
      
      // AMB.ÇEM.KARTON.GAL: (8*(1000/'COIL WEIGHT (KG)'))/1000
      const kartonValue = parseFloat(((8 * (1000 / kg)) / 1000).toFixed(5));
      
      // GTPKT01: =(1000/'COIL WEIGHT (KG)'*'PaketlemeDkAdet')/1000
      const gtpktValue = parseFloat(((1000 / kg * userInputValues.paketlemeDkAdet) / 1000).toFixed(5));
      
      // SM.DESİ.PAK =0.1231* AMB.ÇEM.KARTON.GAL + 0.0154* NAYLON (KG/TON)
      const desiValue = parseFloat((0.1231 * kartonValue + 0.0154 * naylonValue).toFixed(5));
      
      newMmGtRecipes[index] = {
        [ymGtStokKodu]: 1, // YM GT bileşeni sequence eşleştirmeli
        'GTPKT01': gtpktValue,
        'NAYLON (KG/TON)': naylonValue,
        'AMB.ÇEM.KARTON.GAL': kartonValue,
        [shrinkCode]: shrinkAmount, // Otomatik shrink tipi ve miktarı
        'SM.7MMHALKA': halkaValue,
        'AMB.APEX CEMBER 38X080': cemberValue,
        'AMB.TOKA.SIGNODE.114P. DKP': tokaValue,
        'SM.DESİ.PAK': desiValue
      };
      
      // Reçete durumlarını 'auto' olarak işaretle
      newRecipeStatus.mmGtRecipes[index] = {};
      Object.keys(newMmGtRecipes[index]).forEach(key => {
        newRecipeStatus.mmGtRecipes[index][key] = 'auto';
      });
      
      // YM ST Reçete
      const ymStCap = parseFloat(ymSt.cap) || cap;
      const filmasinKodu = getFilmasinKodu(ymSt);
      
      // Extract HM_Cap from filmasinKodu (e.g., "FLM.0800.1010" -> 8)
      const hmCapMatch = filmasinKodu.match(/FLM\.0*(\d+)\./);
      const hmCap = hmCapMatch ? parseFloat(hmCapMatch[1]) / 100 : 6; // Default to 6 if not found
      
      // Calculate TLC_Hiz using the lookup table with the DÜŞEYARA formula
      // TLC_Hiz= =DÜŞEYARA(BİRLEŞTİR(HM_Cap;"x"; Çap);'TLC_Hızlar'!C:F;4;YANLIŞ)*0.7
      const tlcHiz = calculateTlcHiz(hmCap, ymStCap);
      
      // Calculate TLC01 using the formula: TLC01 = 1000*4000/3.14/7.85/Cap/Cap/TLC_Hiz/60
      const tlcValue = parseFloat((1000 * 4000 / Math.PI / 7.85 / ymStCap / ymStCap / tlcHiz / 60).toFixed(5));
      
      newYmStRecipes[index] = {
        [filmasinKodu]: 1, // Use the Filmaşin code directly
        'TLC01': tlcValue
      };
      
      // YM ST reçete durumlarını 'auto' olarak işaretle
      newRecipeStatus.ymStRecipes[index] = {};
      Object.keys(newYmStRecipes[index]).forEach(key => {
        newRecipeStatus.ymStRecipes[index][key] = 'auto';
      });
    });
    
    // YM GT Reçete (sequence 00 için)
    if (allYmSts.length > 0) {
      // Calculate DV (Durdurma Vinç) value based on Min Mukavemet
      const dvValue = calculateDV(parseInt(mmGtData.min_mukavemet));
      
      // GLV01:= =1000*4000/ Çap/ Çap /PI()/7.85/'DV'* Çap
      // Convert to minutes by dividing by 1000 and 60 (result is in DK)
      const glvTime = parseFloat(((1000 * 4000 / cap / cap / Math.PI / 7.85 / dvValue * cap) / 1000 / 60).toFixed(5));
      
      // 150 03(Çinko) : =((1000*4000/3.14/7.85/'DIA (MM)'/'DIA (MM)'*'DIA (MM)'*3.14/1000*'ZING COATING (GR/M2)'/1000)+('Ash'*0.6)+('Lapa'*0.7))/1000
      const zincConsumption = parseFloat((
        ((1000 * 4000 / Math.PI / 7.85 / cap / cap * cap * Math.PI / 1000 * kaplama / 1000) + 
        (userInputValues.ash * 0.6) + 
        (userInputValues.lapa * 0.7)) / 1000
      ).toFixed(5));
      
      // SM.HİDROLİK.ASİT: =('YuzeyAlani'*'tuketilenAsit')/1000
      const yuzeyAlani = calculateYuzeyAlani(cap);
      const tuketilenAsit = calculateTuketilenAsit();
      const acidConsumption = parseFloat(((yuzeyAlani * tuketilenAsit) / 1000).toFixed(5));
      
      newYmGtRecipe = {
        [allYmSts[0].stok_kodu]: 1, // İlk YM ST
        'GLV01': glvTime,
        '150 03': zincConsumption,
        'SM.HİDROLİK.ASİT': acidConsumption
      };
      
      // YM GT reçete durumlarını 'auto' olarak işaretle
      Object.keys(newYmGtRecipe).forEach(key => {
        newRecipeStatus.ymGtRecipe[key] = 'auto';
      });
    }
    
    setAllRecipes(prev => ({
      ...prev,
      mmGtRecipes: newMmGtRecipes,
      ymGtRecipe: newYmGtRecipe,
      ymStRecipes: newYmStRecipes
    }));
    
    setRecipeStatus(prev => ({
      ...prev,
      ...newRecipeStatus
    }));
  };

  // Shrink miktarı hesapla - NOKTA değer döndür with 5 decimals - Excel ile tam uyumlu
  const calculateShrinkAmount = (kg) => {
    // Calculate with full precision, then format to 5 decimal places to match Excel
    const result = 1 / kg;
    return parseFloat(result.toFixed(5));
  };

  // Asit tüketimi hesaplama (Excel formülü) - NOKTA değer döndür with 5 decimals - Excel ile tam uyumlu
  const calculateAcidConsumption = (cap, kg, kaplama) => {
    const yuzeyAlani = 1000 * 4000 / Math.PI / cap / cap / 7.85 * cap * Math.PI / 1000;
    const tuketilenAsit = 0.0647625; // kg/m2 - match Excel formula exactly
    
    // Calculate with full precision, then format to 5 decimal places to match Excel
    const result = (yuzeyAlani * tuketilenAsit) / 1000;
    return parseFloat(result.toFixed(5));
  };

  // Desi tüketimi hesapla (formüle göre) - NOKTA değer döndür with 5 decimals - Excel ile tam uyumlu
  const calculateDesiConsumption = (kg, cap) => {
    // Return values with 5 decimal places for consistency with Excel
    // Önce kg kategorisine göre
    if (kg >= 500 && kg < 600) return 0.00200;
    if (kg >= 600 && kg < 650) return 0.00170;
    if (kg >= 650 && kg < 750) return 0.00150;
    if (kg >= 750 && kg <= 800) return 0.00130;
    if (kg > 800 && kg < 850) return 0.00120;
    if (kg >= 850 && kg < 900) return 0.00110;
    if (kg >= 900) return 0.00090;
    
    // Çapa göre fallback
    if (cap < 2.0) return 0.00200;
    if (cap >= 2.0 && cap <= 4.0) return 0.00130;
    return 0.00110;
  };

  // Shrink kodu belirle (tam kod ile)
  const getShrinkCode = (icCap) => {
    switch (parseInt(icCap)) {
      case 45: return 'AMB.SHRİNK.200*140CM';
      case 50: return 'AMB.SHRİNK.200*160CM';
      case 55: return 'AMB.SHRİNK.200*190CM';
      default: return 'AMB.SHRİNK.200*140CM';
    }
  };

  // Gümrük Tarife Kodu belirle
  const getGumrukTarifeKodu = () => {
    const cap = parseFloat(mmGtData.cap) || 0;
    if (cap >= 0.8 && cap < 1.5) return '721720300011';
    if (cap >= 1.5 && cap < 6.0) return '721720300012';
    return '721720300013';
  };

  // Form değişikliklerini işle - her zaman nokta formatı kullan
  // Comma to point conversion handler for onKeyDown
  const handleCommaToPoint = (e, field) => {
    // Allow decimal comma input but convert to point
    if (e.key === ',') {
      e.preventDefault();
      // Get current value and caret position
      const input = e.target;
      const currentValue = input.value;
      const caretPos = input.selectionStart;
      
      // Insert decimal point where the comma would have gone
      const newValue = currentValue.substring(0, caretPos) + '.' + currentValue.substring(input.selectionEnd);
      
      // Update input value and reset caret position
      handleInputChange(field, newValue);
      // Need to use setTimeout to let React update the DOM
      setTimeout(() => {
        input.selectionStart = input.selectionEnd = caretPos + 1;
      }, 0);
    }
    
    // Ensure periods can be entered anywhere in the input
    if (e.key === '.') {
      // Allow periods even if the field already has one
      // Do nothing special, let the default behavior proceed
    }
  };
  
  // Comma to point conversion handler for recipe inputs
  const handleRecipeCommaToPoint = (e, recipeType, ymStIndex, key) => {
    // Allow decimal comma input but convert to point
    if (e.key === ',') {
      e.preventDefault();
      // Get current value and caret position
      const input = e.target;
      const currentValue = input.value;
      const caretPos = input.selectionStart;
      
      // Insert decimal point where the comma would have gone
      const newValue = currentValue.substring(0, caretPos) + '.' + currentValue.substring(input.selectionEnd);
      
      // Update recipe value and reset caret position
      updateRecipeValue(recipeType, ymStIndex, key, newValue);
      // Need to use setTimeout to let React update the DOM
      setTimeout(() => {
        input.selectionStart = input.selectionEnd = caretPos + 1;
      }, 0);
    }
    
    // Ensure periods can be entered anywhere in the input
    if (e.key === '.') {
      // Check if the input already contains a period
      const input = e.target;
      const currentValue = input.value;
      
      // Allow periods even if the field already has one
      // This will let users enter periods anywhere, and validation will happen elsewhere
      // Do nothing special, let the default behavior proceed
    }
  };

  const handleInputChange = (field, value) => {
    // Enforce point as decimal separator for any input value
    let normalizedValue;
    
    // First ensure the value is trimmed
    const trimmedValue = typeof value === 'string' ? value.trim() : value;
    
    // Special case for decimal inputs - maintain exact format
    if (typeof trimmedValue === 'string' && trimmedValue.includes('.')) {
      // If the string contains a decimal point, preserve its format exactly
      setMmGtData(prev => ({
        ...prev,
        [field]: trimmedValue
      }));
      return;
    }
    
    if (typeof trimmedValue === 'string' && trimmedValue.includes(',')) {
      // If input contains comma, replace with point
      normalizedValue = trimmedValue.replace(/,/g, '.');
    } else {
      // Otherwise use the trimmed value or normalize if not a string
      normalizedValue = typeof trimmedValue === 'string' ? trimmedValue : normalizeInputValue(trimmedValue);
    }
    
    // For numeric fields, ensure we store with point decimal separator but keep as strings
    if (['cap', 'kaplama', 'min_mukavemet', 'max_mukavemet', 'kg', 'tolerans_plus', 'tolerans_minus'].includes(field)) {
      if (typeof normalizedValue === 'string' && normalizedValue !== '') {
        // Remove any commas first and replace with points to be sure
        const valueWithPoints = normalizedValue.replace(/,/g, '.');
        
        // If it's a valid number, ensure it uses point as decimal separator
        const num = parseFloat(valueWithPoints);
        if (!isNaN(num)) {
          // For decimal input, keep the decimal part as-is to preserve user input exactly as entered
          if (valueWithPoints.includes('.')) {
            // If user is typing a decimal number, keep their input exactly as is (with points)
            normalizedValue = valueWithPoints;
          } else {
            // For whole numbers, no decimal formatting needed
            normalizedValue = valueWithPoints;
          }
        }
      }
    }
    
    setMmGtData(prev => ({
      ...prev,
      [field]: normalizedValue
    }));
  };

  // Manuel YM ST ekleme işleyicisi
  const handleAddYmSt = () => {
    if (!newYmStData.cap || !newYmStData.filmasin || !newYmStData.quality) {
      toast.error('Lütfen tüm alanları doldurun');
      return;
    }
    
    const capValue = parseFloat(newYmStData.cap);
    const capStr = Math.round(capValue * 100).toString().padStart(4, '0');
    const newYmSt = {
      stok_kodu: `YM.ST.${capStr}.${newYmStData.filmasin}.${newYmStData.quality}`,
      stok_adi: `YM Siyah Tel ${capStr} mm HM:${newYmStData.filmasin}.${newYmStData.quality}`,
      cap: capValue,
      filmasin: parseInt(newYmStData.filmasin),
      quality: newYmStData.quality,
      source: 'manual-added'
    };
    
    setSelectedYmSts(prev => [...prev, newYmSt]);
    setShowAddYmStModal(false);
    setNewYmStData({ cap: '', filmasin: '', quality: '' });
    
    // Yeni eklenen YM ST için reçeteleri hesapla
    setTimeout(() => {
      calculateAutoRecipeValues();
    }, 100);
  };

  // Manuel girişe geri dön - tüm state'i temizle
  const handleBackToManual = () => {
    setCurrentStep('input');
    setSelectedRequest(null);
    setSelectedExistingMmGt(null);
    setIsRequestUsed(false); // Talep kullanım durumunu sıfırla
    setYmGtData(null);
    setSuitableYmSts([]);
    setSelectedYmSts([]);
    setAutoGeneratedYmSts([]);
    setSavedToDatabase(false);
    setDatabaseIds({ mmGtIds: [], ymGtId: null, ymStIds: [] });
    setAllRecipes({ mmGtRecipes: {}, ymGtRecipe: {}, ymStRecipes: {} });
    setRecipeStatus({ mmGtRecipes: {}, ymGtRecipe: {}, ymStRecipes: {} });
    setActiveRecipeTab(0);
    setError(null);
    setSuccessMessage('');
    
    // Session tracking temizle
    setSessionSavedProducts({ mmGtIds: [], ymGtId: null, ymStIds: [] });
    
    // Formu temizle - NOKTA ile default değerler
    setMmGtData({
      cap: '2.50', // Using point as decimal separator
      kod_2: 'NIT',
      kaplama: '50',
      min_mukavemet: '350',
      max_mukavemet: '550',
      kg: '500',
      ic_cap: 45,
      dis_cap: 75,
      tolerans_plus: '0.05',
      tolerans_minus: '0.06',
      shrink: 'evet',
      unwinding: '',
      cast_kont: '',
      helix_kont: '',
      elongation: ''
    });
  };

  // İleri butonu
  const handleNext = () => {
    if (!mmGtData.cap || !mmGtData.kaplama || !mmGtData.min_mukavemet || !mmGtData.max_mukavemet || !mmGtData.kg) {
      toast.error('Lütfen tüm gerekli alanları doldurun');
      return;
    }
    
    setCurrentStep('summary');
    generateYmGtData();
    findSuitableYmSts();
    calculateAutoRecipeValues();
  };

  // YM ST seçimi
  const handleYmStSelection = (ymSt) => {
    const isSelected = selectedYmSts.find(item => item.stok_kodu === ymSt.stok_kodu);
    if (isSelected) {
      // If removing a YM ST, check if it's the main one
      const removedIndex = selectedYmSts.findIndex(item => item.stok_kodu === ymSt.stok_kodu);
      if (removedIndex === mainYmStIndex) {
        // If we're removing the main YMST, set a new main index
        const totalLength = selectedYmSts.length + autoGeneratedYmSts.length;
        if (totalLength > 1) {
          // If there are still YMSTs left, select a new main YMST
          // Prefer to keep the main YMST among selected YMSTs
          if (selectedYmSts.length > 1) {
            // If there are other selected YMSTs, choose one of them
            setMainYmStIndex(removedIndex === selectedYmSts.length - 1 ? removedIndex - 1 : 0);
          } else if (autoGeneratedYmSts.length > 0) {
            // Fall back to the first auto-generated YMST
            setMainYmStIndex(0);
          }
        }
      } else if (removedIndex < mainYmStIndex) {
        // If removing an YMST with index less than main, adjust main index
        setMainYmStIndex(mainYmStIndex - 1);
      }
      
      setSelectedYmSts(prev => prev.filter(item => item.stok_kodu !== ymSt.stok_kodu));
    } else {
      // Adding a new YMST
      setSelectedYmSts(prev => {
        const newYmSts = [...prev, { ...ymSt, source: 'database' }];
        
        // If this is the first YMST (either selected or auto), make it the main one
        const totalYmSts = newYmSts.length + autoGeneratedYmSts.length;
        if (totalYmSts === 1) {
          setMainYmStIndex(0);
        }
        
        return newYmSts;
      });
    }
    
    // Seçim değiştiğinde reçeteleri yeniden hesapla
    setTimeout(() => {
      calculateAutoRecipeValues();
    }, 100);
  };

  // Otomatik oluşturulan YM ST'yi sil
  const removeAutoGeneratedYmSt = (index) => {
    // The auto index in the overall selection
    const autoIndex = selectedYmSts.length + index;
    
    // If removing the main YMST, set a new main YMST
    if (autoIndex === mainYmStIndex) {
      const totalLength = selectedYmSts.length + autoGeneratedYmSts.length;
      if (totalLength > 1) {
        // Prefer to keep the main among auto YMSTs if possible
        if (autoGeneratedYmSts.length > 1) {
          const newMainIndex = index === autoGeneratedYmSts.length - 1 
            ? autoIndex - 1 
            : autoIndex + 1 < totalLength ? autoIndex + 1 : 0;
          setMainYmStIndex(newMainIndex);
        } else if (selectedYmSts.length > 0) {
          // Fall back to selected YMSTs
          setMainYmStIndex(0);
        }
      }
    } else if (autoIndex < mainYmStIndex) {
      // If removing an YMST with index less than main, adjust main index
      setMainYmStIndex(mainYmStIndex - 1);
    }
    
    setAutoGeneratedYmSts(prev => prev.filter((_, i) => i !== index));
    setTimeout(() => {
      calculateAutoRecipeValues();
    }, 100);
  };

  // Seçili YM ST'yi sil
  const removeSelectedYmSt = (index) => {
    // If removing the main YMST, set a new main YMST
    if (index === mainYmStIndex) {
      const totalLength = selectedYmSts.length + autoGeneratedYmSts.length;
      if (totalLength > 1) {
        // Prefer to keep the main among selected YMSTs if possible
        if (selectedYmSts.length > 1) {
          const newMainIndex = index === selectedYmSts.length - 1 ? index - 1 : index + 1 < selectedYmSts.length ? index + 1 : 0;
          setMainYmStIndex(newMainIndex);
        } else if (autoGeneratedYmSts.length > 0) {
          // Fall back to auto YMSTs, which start at index selectedYmSts.length
          setMainYmStIndex(selectedYmSts.length - 1); // Will be correct after removal
        }
      }
    } else if (index < mainYmStIndex) {
      // If removing an YMST with index less than main, adjust main index
      setMainYmStIndex(mainYmStIndex - 1);
    }
    
    setSelectedYmSts(prev => prev.filter((_, i) => i !== index));
    setTimeout(() => {
      calculateAutoRecipeValues();
    }, 100);
  };

  // Reçete güncelleme fonksiyonu - NOKTA kullan
  const updateRecipeValue = (recipeType, ymStIndex, key, value) => {
    // Handle comma to point conversion first (direct replacement)
    let inputValue = value;
    if (typeof inputValue === 'string' && inputValue.includes(',')) {
      inputValue = inputValue.replace(/,/g, '.');
    }
    
    // Special case handling for direct decimal input
    // This allows decimal points to be properly entered and maintained in the field
    if (typeof inputValue === 'string') {
      // If we have a string with a decimal point (.5 or 3.1), preserve its exact format
      // This handles decimal points that were just added by the user
      if (inputValue.includes('.')) {
        // Store it as is to maintain positions of digits and decimal points
        setRecipeStatus(prev => ({
          ...prev,
          [recipeType === 'mmgt' 
            ? 'mmGtRecipes' 
            : recipeType === 'ymgt' 
              ? 'ymGtRecipe' 
              : 'ymStRecipes']: recipeType === 'ymgt' 
                ? { ...prev.ymGtRecipe, [key]: 'manual' }
                : {
                    ...prev[recipeType === 'mmgt' ? 'mmGtRecipes' : 'ymStRecipes'],
                    [ymStIndex]: {
                      ...prev[recipeType === 'mmgt' ? 'mmGtRecipes' : 'ymStRecipes'][ymStIndex],
                      [key]: 'manual'
                    }
                  }
        }));
        
        // Update the appropriate recipe with the exact string value
        if (recipeType === 'mmgt') {
          setAllRecipes(prev => ({
            ...prev,
            mmGtRecipes: {
              ...prev.mmGtRecipes,
              [ymStIndex]: {
                ...prev.mmGtRecipes[ymStIndex],
                [key]: inputValue // Keep as string with decimal point
              }
            }
          }));
          return; // Exit early to avoid overwriting with number parsing
        } else if (recipeType === 'ymgt') {
          setAllRecipes(prev => ({
            ...prev,
            ymGtRecipe: {
              ...prev.ymGtRecipe,
              [key]: inputValue // Keep as string with decimal point
            }
          }));
          return; // Exit early
        } else {
          setAllRecipes(prev => ({
            ...prev,
            ymStRecipes: {
              ...prev.ymStRecipes,
              [ymStIndex]: {
                ...prev.ymStRecipes[ymStIndex],
                [key]: inputValue // Keep as string with decimal point
              }
            }
          }));
          return; // Exit early
        }
      }
    }
    
    // For other cases (non-decimal string, empty string, number, etc.)
    // Continue with standard handling
    const normalizedValue = typeof inputValue === 'string' ? inputValue : normalizeInputValue(inputValue);
    
    // Ensure we have a proper numeric value with point decimal separator
    // Store the formatted string to maintain proper decimal display
    const numValue = parseFloat(normalizedValue) || 0;
    const formattedValue = numValue.toLocaleString('en-US', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 5,
      useGrouping: false // No thousand separators
    });

    if (recipeType === 'mmgt') {
      setAllRecipes(prev => ({
        ...prev,
        mmGtRecipes: {
          ...prev.mmGtRecipes,
          [ymStIndex]: {
            ...prev.mmGtRecipes[ymStIndex],
            [key]: formattedValue // Store as formatted string with point decimal
          }
        }
      }));
      // Manuel değişiklik olarak işaretle
      setRecipeStatus(prev => ({
        ...prev,
        mmGtRecipes: {
          ...prev.mmGtRecipes,
          [ymStIndex]: {
            ...prev.mmGtRecipes[ymStIndex],
            [key]: 'manual'
          }
        }
      }));
    } else if (recipeType === 'ymgt') {
      setAllRecipes(prev => ({
        ...prev,
        ymGtRecipe: {
          ...prev.ymGtRecipe,
          [key]: formattedValue // Store as formatted string with point decimal
        }
      }));
      // Manuel değişiklik olarak işaretle
      setRecipeStatus(prev => ({
        ...prev,
        ymGtRecipe: {
          ...prev.ymGtRecipe,
          [key]: 'manual'
        }
      }));
    } else if (recipeType === 'ymst') {
      setAllRecipes(prev => ({
        ...prev,
        ymStRecipes: {
          ...prev.ymStRecipes,
          [ymStIndex]: {
            ...prev.ymStRecipes[ymStIndex],
            [key]: formattedValue // Store as formatted string with point decimal
          }
        }
      }));
      // Manuel değişiklik olarak işaretle
      setRecipeStatus(prev => ({
        ...prev,
        ymStRecipes: {
          ...prev.ymStRecipes,
          [ymStIndex]: {
            ...prev.ymStRecipes[ymStIndex],
            [key]: 'manual'
          }
        }
      }));
      // FLM değişikliği durumunda diğer hesaplamaları tetikle
      if (key.includes('FLM.')) {
        setTimeout(() => {
          calculateAutoRecipeValues();
        }, 100);
      }
    }
  };

  // Reçete durumunu gösterir
  const getRecipeStatusText = (recipeType, ymStIndex, key) => {
    let status = '';
    if (recipeType === 'mmgt') {
      status = recipeStatus.mmGtRecipes[ymStIndex]?.[key];
    } else if (recipeType === 'ymgt') {
      status = recipeStatus.ymGtRecipe[key];
    } else if (recipeType === 'ymst') {
      status = recipeStatus.ymStRecipes[ymStIndex]?.[key];
    }
    
    switch (status) {
      case 'database': return 'Veritabanında seçildi';
      case 'auto': return 'Otomatik dolduruldu';
      case 'manual': return 'Elle dolduruldu';
      default: return '';
    }
  };

  // İnkremental ürün oluşturma kontrolü - Değişen mantık: Sadece stok_kodu veya stok_adı etkileyen değerler değişirse
  const checkForExistingProducts = async (cap, kod_2, kaplama, minMukavemet, maxMukavemet, kg) => {
    try {
      const capFormatted = Math.round(parseFloat(cap) * 100).toString().padStart(4, '0');
      const baseCode = `GT.${kod_2}.${capFormatted}`;
      
      // Aynı core değerlere sahip ürünleri ara
      const response = await fetchWithAuth(`${API_URLS.galMmGt}?stok_kodu_like=${encodeURIComponent(baseCode)}`);
      if (response && response.ok) {
        const existingProducts = await response.json();
        
        // Tamamen aynı ürün var mı kontrol et (stok_kodu ve stok_adi etkileyen tüm değerler)
        const stokAdi = `Galvanizli Tel ${parseFloat(cap).toFixed(2)} mm -${Math.abs(parseFloat(mmGtData.tolerans_minus)).toFixed(2)}/+${parseFloat(mmGtData.tolerans_plus).toFixed(2)} ${kaplama} gr/m² ${minMukavemet}-${maxMukavemet} MPa ID:${mmGtData.ic_cap} cm OD:${mmGtData.dis_cap} cm ${kg} kg`;
        
        // Tamamen eşleşen bir ürün var mı?
        const exactMatch = existingProducts.find(product => {
          // Stok adı ile karşılaştırma için normalizasyon (boşluklar ve case-sensitive olmayan karşılaştırma)
          const normalizedProductAdi = product.stok_adi.replace(/\s+/g, ' ').trim().toLowerCase();
          const normalizedStokAdi = stokAdi.replace(/\s+/g, ' ').trim().toLowerCase();
          
          // Stok kodu base'i ve stok adı eşleşiyorsa
          return normalizedProductAdi === normalizedStokAdi;
        });
        
        if (exactMatch) {
          // Kullanıcıya güncelleme onayı göster
          const confirmUpdate = window.confirm(
            `Tam olarak aynı değerlere sahip bir ürün mevcut:\n${exactMatch.stok_kodu} - ${exactMatch.stok_adi}\n\nKayıtlı ürünü güncellemek istediğinize emin misiniz?`
          );
          
          if (confirmUpdate) {
            // Bu ürünün sequence kodunu kullan
            const sequencePart = exactMatch.stok_kodu.split('.').pop();
            const sequenceNum = parseInt(sequencePart);
            return sequenceNum; // Mevcut sequence'i kullan
          }
        }
        
        // Eğer tamamen eşleşen yoksa veya kullanıcı güncellemeyi reddettiyse, yeni bir ürün oluştur
        let maxSequence = -1;
        existingProducts.forEach(product => {
          const sequencePart = product.stok_kodu.split('.').pop();
          const sequenceNum = parseInt(sequencePart);
          if (!isNaN(sequenceNum) && sequenceNum > maxSequence) {
            maxSequence = sequenceNum;
          }
        });
        
        return maxSequence + 1;
      }
    } catch (error) {
      console.error('Mevcut ürün kontrolü hatası:', error);
    }
    return 0; // Hata durumunda 0'dan başla
  };

  // Session'daki ürünleri güncelle - Yeni 1:1:n ilişki modeli ile
  const updateSessionProducts = async () => {
    const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
    
    if (sessionSavedProducts.mmGtIds.length > 0) {
      // Ana YM ST'yi belirle
      const mainYmSt = allYmSts[mainYmStIndex] || allYmSts[0];
      
      // MMGT için doğru sequence'i belirle - özellikle key değerleri değiştiyse önemli
      let sequence = '00';
      let oldSequence = '00';
      
      // MMGT'nin stok_kodu'ndan mevcut sequence'i al
      const mmGtResponse = await fetchWithAuth(`${API_URLS.galMmGt}/${sessionSavedProducts.mmGtIds[0]}`);
      if (mmGtResponse && mmGtResponse.ok) {
        const mmGt = await mmGtResponse.json();
        if (mmGt && mmGt.stok_kodu) {
          oldSequence = mmGt.stok_kodu.split('.').pop();
          console.log(`Mevcut MMGT sequence: ${oldSequence}, stok_kodu: ${mmGt.stok_kodu}`);
          
          // Key değerlerinde değişim var mı çok dikkatli kontrol et
          const currentKey = `${mmGtData.cap}|${mmGtData.kod_2}|${mmGtData.kaplama}|${mmGtData.min_mukavemet}|${mmGtData.max_mukavemet}|${mmGtData.kg}`;
          const oldKey = `${mmGt.cap}|${mmGt.kod_2}|${mmGt.kaplama}|${mmGt.min_mukavemet}|${mmGt.max_mukavemet}|${mmGt.kg}`;
          
          if (currentKey !== oldKey) {
            console.log(`Key değerlerinde değişim tespit edildi!`);
            console.log(`Eski: ${oldKey}`);
            console.log(`Yeni: ${currentKey}`);
            
            // ÖNEMLİ: Önce veritabanında aynı key değerlere sahip ürün var mı kontrol et
            const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
            const baseCode = `GT.${mmGtData.kod_2}.${capFormatted}`;
            
            try {
              // Aynı base koda sahip ürünleri ara
              const response = await fetchWithAuth(`${API_URLS.galMmGt}?stok_kodu_like=${encodeURIComponent(baseCode)}`);
              if (response && response.ok) {
                const existingProducts = await response.json();
                console.log(`${existingProducts.length} adet benzer ürün bulundu`);
                
                if (existingProducts.length > 0) {
                  // Tam eşleşen bir ürün ara
                  const stokAdi = `Galvanizli Tel ${parseFloat(mmGtData.cap).toFixed(2)} mm -${Math.abs(parseFloat(mmGtData.tolerans_minus)).toFixed(2)}/+${parseFloat(mmGtData.tolerans_plus).toFixed(2)} ${mmGtData.kaplama} gr/m² ${mmGtData.min_mukavemet}-${mmGtData.max_mukavemet} MPa ID:${mmGtData.ic_cap} cm OD:${mmGtData.dis_cap} cm ${mmGtData.kg} kg`;
                  const normalizedStokAdi = stokAdi.replace(/\s+/g, ' ').trim().toLowerCase();
                  
                  let exactMatch = null;
                  for (const product of existingProducts) {
                    if (product.id === sessionSavedProducts.mmGtIds[0]) continue; // Kendisi olmamalı
                    
                    const normalizedProductAdi = product.stok_adi.replace(/\s+/g, ' ').trim().toLowerCase();
                    if (normalizedProductAdi === normalizedStokAdi) {
                      exactMatch = product;
                      break;
                    }
                  }
                  
                  if (exactMatch) {
                    // Tam eşleşen ürün bulundu - bu ürünün sequence'ini kullan
                    sequence = exactMatch.stok_kodu.split('.').pop();
                    console.log(`Tam eşleşen ürün bulundu, sequence kullanılacak: ${sequence}`);
                  } else {
                    // En yüksek sequence'i bul
                    let maxSequence = -1;
                    existingProducts.forEach(product => {
                      const sequencePart = product.stok_kodu.split('.').pop();
                      const sequenceNum = parseInt(sequencePart);
                      if (!isNaN(sequenceNum) && sequenceNum > maxSequence) {
                        maxSequence = sequenceNum;
                      }
                    });
                    
                    // Yeni ürün için sequence artır
                    sequence = (maxSequence + 1).toString().padStart(2, '0');
                    console.log(`Key değişimi nedeniyle yeni sequence hesaplandı: ${sequence}`);
                  }
                } else {
                  // Benzer ürün bulunamadı - yeni sequence hesapla
                  sequence = '00';
                  console.log(`Benzer ürün bulunamadı, yeni sequence hesaplanacak`);
                }
              }
            } catch (error) {
              console.error('Veritabanı sorgulama hatası:', error);
            }
            
            // Hala sequence belirlenemedi ise yeni hesapla
            if (sequence === '00') {
              // Key değişmişse yeni sequence hesapla
              const nextSequence = await checkForExistingProducts(
                mmGtData.cap,
                mmGtData.kod_2,
                mmGtData.kaplama,
                mmGtData.min_mukavemet,
                mmGtData.max_mukavemet,
                mmGtData.kg
              );
              sequence = nextSequence.toString().padStart(2, '0');
              console.log(`checkForExistingProducts ile yeni sequence hesaplandı: ${sequence}`);
            }
          } else {
            // Key değişmemişse mevcut sequence'i kullan
            sequence = oldSequence;
            console.log(`Key değerleri değişmemiş, mevcut sequence kullanılıyor: ${sequence}`);
          }
        }
      }
      
      console.log(`Ürün güncellemesi için kullanılacak sequence: ${sequence}`);
      // Eski ve yeni sequence farklı ise kullanıcıyı uyar
      if (oldSequence !== '00' && sequence !== oldSequence) {
        console.warn(`Sequence değişiyor: ${oldSequence} -> ${sequence}`);
      }
      
      // Sadece 1 MM GT'yi güncelle
      if (sessionSavedProducts.mmGtIds[0]) {
        await fetchWithAuth(`${API_URLS.galMmGt}/${sessionSavedProducts.mmGtIds[0]}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(generateMmGtDatabaseData(sequence))
        });
      }
      
      // Sadece 1 YM GT'yi güncelle
      if (sessionSavedProducts.ymGtId) {
        await fetchWithAuth(`${API_URLS.galYmGt}/${sessionSavedProducts.ymGtId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(generateYmGtDatabaseData(sequence))
        });
      }
      
      // Tüm YM ST'leri güncelle
      for (let i = 0; i < allYmSts.length && i < sessionSavedProducts.ymStIds.length; i++) {
        // YM ST'yi güncelle (eğer otomatik oluşturulmuşsa)
        if (sessionSavedProducts.ymStIds[i] && 
            (allYmSts[i].source === 'auto-generated' || allYmSts[i].source === 'manual-added')) {
          await fetchWithAuth(`${API_URLS.galYmSt}/${sessionSavedProducts.ymStIds[i]}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(generateYmStDatabaseData(allYmSts[i]))
          });
        }
      }
      
      // MM GT - Ana YM ST ilişkisini güncelle - ilişkileri sil ve yeniden oluştur
      try {
        // Önce ilişkileri sil
        if (sessionSavedProducts.mmGtIds[0]) {
          await fetchWithAuth(`${API_URLS.galMmGtYmSt}/mm_gt/${sessionSavedProducts.mmGtIds[0]}`, {
            method: 'DELETE'
          });
        }
        
        // Yeni ilişkiyi oluştur
        if (sessionSavedProducts.mmGtIds[0] && sessionSavedProducts.ymStIds[mainYmStIndex]) {
          await fetchWithAuth(API_URLS.galMmGtYmSt, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              mm_gt_id: sessionSavedProducts.mmGtIds[0],
              ym_st_id: sessionSavedProducts.ymStIds[mainYmStIndex]
            })
          });
        }
      } catch (error) {
        console.error('İlişki güncelleme hatası:', error);
      }
      
      return {
        mmGtIds: [sessionSavedProducts.mmGtIds[0]], // Artık sadece 1 MM GT var
        ymGtId: sessionSavedProducts.ymGtId,
        ymStIds: sessionSavedProducts.ymStIds
      };
    }
    
    return null;
  };

  // Veritabanına kaydet - Yeni 1:1:n ilişki modeli ile
  const saveToDatabase = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      // Session'da mevcut ürünler varsa güncelle
      const updatedIds = await updateSessionProducts();
      if (updatedIds) {
        // Reçeteleri güncelle
        await saveRecipesToDatabase(updatedIds.mmGtIds, updatedIds.ymGtId, updatedIds.ymStIds);
        
        setDatabaseIds(updatedIds);
        setSavedToDatabase(true);
        setSuccessMessage('Veriler başarıyla güncellendi');
        toast.success('Veriler başarıyla güncellendi');
        
        // Session'daki ürünleri güncelle
        setSessionSavedProducts(updatedIds);
        
        setIsLoading(false);
        return;
      }
      
      // Talep kullanıldıysa uyarı göster
      if (isRequestUsed) {
        const confirmDelete = window.confirm('Bir talep seçtiniz. Veritabanına kaydedildikten sonra bu talebi silmek ister misiniz?');
        if (confirmDelete && selectedRequest) {
          try {
            await deleteRequest(selectedRequest.id);
            setIsRequestUsed(false);
            setSelectedRequest(null);
          } catch (error) {
            console.error('Talep silme hatası:', error);
            // Talep silinemese bile kaydetmeye devam et
          }
        }
      }
      
      const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
      
      if (allYmSts.length === 0) {
        toast.error('En az bir YM ST seçmelisiniz veya oluşturmalısınız');
        setIsLoading(false);
        return;
      }
      
      // Ana YM ST'yi belirle
      const mainYmSt = allYmSts[mainYmStIndex] || allYmSts[0];
      
      // İnkremental numara kontrolü yap - artık sadece 1 MM GT ve 1 YM GT oluşturulacak
      const nextSequence = await checkForExistingProducts(
        mmGtData.cap,
        mmGtData.kod_2,
        mmGtData.kaplama,
        mmGtData.min_mukavemet,
        mmGtData.max_mukavemet,
        mmGtData.kg
      );
      
      const mmGtIds = [];
      const ymStIds = [];
      let ymGtId = null;
      
      // Aynı sequence ile 1 tane YM GT oluştur (MMGT ile aynı sequence)
      const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
      const sequence = nextSequence.toString().padStart(2, '0');
      // MMGT ile aynı sequence'i kullan
      console.log(`YM GT için kullanılan sequence: ${sequence}`);
      const ymGtStokKodu = `YM.GT.${mmGtData.kod_2}.${capFormatted}.${sequence}`;
      const existingYmGt = await checkExistingProduct(API_URLS.galYmGt, ymGtStokKodu);
      
      if (existingYmGt) {
        // YM GT mevcut - güncelle
        const ymGtResponse = await fetchWithAuth(`${API_URLS.galYmGt}/${existingYmGt.id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(generateYmGtDatabaseData(sequence))
        });
        if (ymGtResponse && ymGtResponse.ok) {
          ymGtId = existingYmGt.id;
        }
      } else {
        // YM GT yeni - oluştur
        const ymGtResponse = await fetchWithAuth(API_URLS.galYmGt, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(generateYmGtDatabaseData(sequence))
        });
        
        if (ymGtResponse && ymGtResponse.ok) {
          const ymGtResult = await ymGtResponse.json();
          ymGtId = ymGtResult.id;
        }
      }
      
      // Aynı sequence ile 1 tane MM GT oluştur
      const mmGtStokKodu = `GT.${mmGtData.kod_2}.${capFormatted}.${sequence}`;
      console.log(`MM GT için kullanılan sequence: ${sequence}, stok_kodu: ${mmGtStokKodu}`);
      const existingMmGt = await checkExistingProduct(API_URLS.galMmGt, mmGtStokKodu);
      
      if (existingMmGt) {
        // MM GT mevcut - güncelle
        const mmGtResponse = await fetchWithAuth(`${API_URLS.galMmGt}/${existingMmGt.id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(generateMmGtDatabaseData(sequence))
        });
        if (mmGtResponse && mmGtResponse.ok) {
          mmGtIds.push(existingMmGt.id);
        }
      } else {
        // MM GT yeni - oluştur
        const mmGtResponse = await fetchWithAuth(API_URLS.galMmGt, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(generateMmGtDatabaseData(sequence))
        });
        
        if (mmGtResponse && mmGtResponse.ok) {
          const mmGtResult = await mmGtResponse.json();
          mmGtIds.push(mmGtResult.id);
        }
      }
      
      // Tüm YM ST'leri kaydet
      for (let i = 0; i < allYmSts.length; i++) {
        const ymSt = allYmSts[i];
        
        // YM ST kontrolü ve kaydetme
        if (ymSt.source === 'auto-generated' || ymSt.source === 'manual-added') {
          const existingYmSt = await checkExistingProduct(API_URLS.galYmSt, ymSt.stok_kodu);
          
          if (existingYmSt) {
            ymStIds.push(existingYmSt.id);
          } else {
            const ymStResponse = await fetchWithAuth(API_URLS.galYmSt, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(generateYmStDatabaseData(ymSt))
            });
            
            if (ymStResponse && ymStResponse.ok) {
              const ymStResult = await ymStResponse.json();
              ymStIds.push(ymStResult.id);
            }
          }
        } else {
          // Mevcut YM ST'nin ID'sini al
          ymStIds.push(ymSt.id);
        }
      }
      
      // Sadece ana YM ST ile MM GT arasında ilişki kur
      try {
        await fetchWithAuth(API_URLS.galMmGtYmSt, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            mm_gt_id: mmGtIds[0],
            ym_st_id: ymStIds[mainYmStIndex]
          })
        });
      } catch (relationError) {
        console.log('İlişki zaten mevcut veya hata oluştu:', relationError);
      }
      
      // Reçeteleri kaydet - sadece 1 MM GT, 1 YM GT ve tüm YM ST'ler için
      await saveRecipesToDatabase(mmGtIds, ymGtId, ymStIds);
      
      setDatabaseIds({
        mmGtIds: mmGtIds,
        ymGtId: ymGtId,
        ymStIds: ymStIds
      });
      
      // Session'da kaydedilen ürünleri takip et
      setSessionSavedProducts({
        mmGtIds: mmGtIds,
        ymGtId: ymGtId,
        ymStIds: ymStIds
      });
      
      setSavedToDatabase(true);
      setSuccessMessage('Veriler başarıyla veritabanına kaydedildi');
      toast.success('Veriler başarıyla veritabanına kaydedildi');
      
    } catch (error) {
      console.error('Veritabanına kaydetme hatası:', error);
      setError('Veritabanına kaydetme hatası: ' + error.message);
      toast.error('Veritabanına kaydetme hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Var olan ürün kontrolü
  const checkExistingProduct = async (apiUrl, stokKodu) => {
    try {
      if (!stokKodu) {
        console.error('Geçersiz stok_kodu ile ürün kontrolü yapılamaz:', stokKodu);
        return null;
      }
      
      const response = await fetchWithAuth(`${apiUrl}?stok_kodu=${encodeURIComponent(stokKodu)}`);
      if (response && response.ok) {
        const data = await response.json();
        if (Array.isArray(data) && data.length > 0) {
          console.log(`"${stokKodu}" stok kodu ile ürün bulundu. ID: ${data[0].id}`);
          return data[0];
        } else {
          console.log(`"${stokKodu}" stok kodu ile ürün bulunamadı`);
          return null;
        }
      } else if (response && response.status === 404) {
        console.log(`"${stokKodu}" stok kodu ile ürün bulunamadı (404 hatası)`);
      } else {
        console.error(`"${stokKodu}" stok kodu ile ürün kontrolü sırasında API hatası: ${response?.status || 'Bilinmiyor'}`);
      }
    } catch (error) {
      console.error(`"${stokKodu}" stok kodu ile ürün kontrol hatası:`, error.message);
    }
    return null;
  };

  // Veritabanı için MM GT verisi oluştur - Excel formatıyla tam uyuşum için güncellendi
  /**
   * Verilen bir sequence değerini kontrol eder ve geçerli olduğunu doğrular
   * @param {string} sequence - Kontrol edilecek sequence
   * @returns {string} - Doğrulanmış sequence değeri
   */
  const validateSequence = (sequence) => {
    if (!sequence) return '00';
    
    // Sequence değeri bir sayı ve 0-99 arasında olmalı
    if (!/^\d{1,2}$/.test(sequence)) {
      console.error(`Geçersiz sequence formatı: ${sequence}, varsayılan 00 kullanılıyor`);
      return '00';
    }
    
    // 1-9 arası değerleri 01-09 formatına dönüştür
    return sequence.padStart(2, '0');
  };

  /**
   * Bir sequence değerini bir arttırır ve doğru formatı sağlar
   * @param {string} sequence - Arttırılacak sequence
   * @returns {string} - Arttırılmış sequence değeri
   */
  const incrementSequence = (sequence) => {
    // Sequence null/undefined ise veya geçersiz ise 00 kullan
    if (!sequence || !/^\d{1,2}$/.test(sequence)) {
      console.warn(`Geçersiz sequence: ${sequence}, 01 ile başlanıyor`);
      return '01';
    }
    
    // 00 ise, 01 ile başla
    if (sequence === '00') {
      return '01';
    }
    
    // Mevcut sequence'i arttır
    const nextVal = parseInt(sequence, 10) + 1;
    
    // 99'dan büyükse 00'a geri dön (döngüsel)
    if (nextVal > 99) {
      console.warn('Sequence 99\'u aştı, 00\'a sıfırlanıyor');
      return '00';
    }
    
    // Padded 2-digit format ile dön
    return nextVal.toString().padStart(2, '0');
  };

  const generateMmGtDatabaseData = (sequence = '00') => {
    // Sequence değerini doğrula
    const validSequence = validateSequence(sequence);
    const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
    const capValue = parseFloat(mmGtData.cap);
    
    // Preserve the exact format in existing Excel files
    const capForExcel = capValue.toFixed(2);
    const toleransPlusValue = parseFloat(mmGtData.tolerans_plus) || 0;
    const toleransMinusValue = parseFloat(mmGtData.tolerans_minus) || 0;

    // Hem stok_kodu'nda hem de içeride kullanılan sequence değerini güncel tut
    console.log(`MMGT için doğrulanmış sequence değeri: ${validSequence}`);
    return {
      stok_kodu: `GT.${mmGtData.kod_2}.${capFormatted}.${validSequence}`,
      stok_adi: generateStokAdi(),
      grup_kodu: 'MM',
      kod_1: 'GT',
      kod_2: mmGtData.kod_2,
      muh_detay: '26',
      depo_kodu: '36',
      br_1: 'KG',
      br_2: 'TN',
      pay_1: 1,
      payda_1: 1.000, // Keep exact format as in Excel
      cevrim_degeri_1: 0,
      olcu_br_3: 'AD',
      cevrim_pay_2: 1,
      cevrim_payda_2: 1,
      cevrim_degeri_2: 1,
      cap: capValue, // Store as number for calculations
      kaplama: parseInt(mmGtData.kaplama),
      min_mukavemet: parseInt(mmGtData.min_mukavemet),
      max_mukavemet: parseInt(mmGtData.max_mukavemet),
      kg: parseInt(mmGtData.kg),
      ic_cap: parseInt(mmGtData.ic_cap),
      dis_cap: parseInt(mmGtData.dis_cap),
      cap2: capForExcel, // Use formatted string value
      tolerans_plus: toleransPlusValue, // Store as number for calculations
      tolerans_minus: toleransMinusValue, // Store as number for calculations
      shrink: mmGtData.shrink,
      unwinding: mmGtData.unwinding || '',
      cast_kont: mmGtData.cast_kont || '',
      helix_kont: mmGtData.helix_kont || '',
      elongation: mmGtData.elongation || '',
      amb_shrink: getShrinkCode(mmGtData.ic_cap),
      satis_kdv_orani: '20', // Match Excel format as string
      alis_kdv_orani: '20', // Match Excel format as string
      stok_turu: 'D',
      fiyat_birimi: 1,
      satis_tipi: 1,
      birim_agirlik: parseInt(mmGtData.kg),
      esnek_yapilandir: 'H',
      super_recete_kullanilsin: 'H',
      alis_doviz_tipi: 2,
      gumruk_tarife_kodu: getGumrukTarifeKodu(),
      ingilizce_isim: generateEnglishName(),
      // Technical spec columns - match Excel format exactly
      metarial: 'Low Carbon Steel Wire',
      dia_mm: capForExcel, // Use formatted string value
      dia_tol_mm_plus: toleransPlusValue, 
      dia_tol_mm_minus: toleransMinusValue,
      zing_coating: `${mmGtData.kaplama} gr/m²`,
      tensile_st_min: `${mmGtData.min_mukavemet} MPa`,
      tensile_st_max: `${mmGtData.max_mukavemet} MPa`,
      wax: 'NONE',
      lifting_lugs: mmGtData.shrink === 'evet' ? 'YES' : 'NO',
      coil_dimensions_id: mmGtData.ic_cap.toString(),
      coil_dimensions_od: mmGtData.dis_cap.toString(),
      coil_weight: mmGtData.kg.toString(),
      coil_weight_min: (parseInt(mmGtData.kg) * 0.95).toFixed(0),
      coil_weight_max: (parseInt(mmGtData.kg) * 1.05).toFixed(0)
    };
  };

  // Veritabanı için YM GT verisi oluştur - Excel formatına tam uyumlu
  const generateYmGtDatabaseData = (sequence = '00') => {
    // Sequence değerini doğrula - MMGT ile aynı sequence kullanılmalı
    const validSequence = validateSequence(sequence);
    const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
    const capValue = parseFloat(mmGtData.cap);
    const capForExcel = capValue.toFixed(2);
    const toleransPlusValue = parseFloat(mmGtData.tolerans_plus) || 0;
    const toleransMinusValue = parseFloat(mmGtData.tolerans_minus) || 0;
    
    // Sequence değerlerinin MMGT ile aynı olduğunu logla
    console.log(`YMGT için kullanılan sequence değeri: ${validSequence} (MMGT ile aynı olmalı)`);
    
    return {
      stok_kodu: `YM.GT.${mmGtData.kod_2}.${capFormatted}.${validSequence}`,
      stok_adi: `YM Galvanizli Tel ${capForExcel} mm -${Math.abs(toleransMinusValue).toFixed(2)}/+${toleransPlusValue.toFixed(2)} ${mmGtData.kaplama || '0'} gr/m² ${mmGtData.min_mukavemet || '0'}-${mmGtData.max_mukavemet || '0'} MPa ID:${mmGtData.ic_cap || '45'} cm OD:${mmGtData.dis_cap || '75'} cm ${mmGtData.kg || '0'} kg`,
      grup_kodu: 'YM',
      kod_1: 'GT',
      kod_2: mmGtData.kod_2,
      muh_detay: '83',
      depo_kodu: '35',
      br_1: 'KG',
      br_2: 'TN',
      pay_1: 1,
      payda_1: 1.000, // Keep exact Excel format
      cevrim_degeri_1: 0,
      olcu_br_3: 'AD',
      cevrim_pay_2: 1,
      cevrim_payda_2: 1,
      cevrim_degeri_2: 1,
      cap: capValue, // Store as number for calculations
      kaplama: parseInt(mmGtData.kaplama),
      min_mukavemet: parseInt(mmGtData.min_mukavemet),
      max_mukavemet: parseInt(mmGtData.max_mukavemet),
      kg: parseInt(mmGtData.kg),
      ic_cap: parseInt(mmGtData.ic_cap),
      dis_cap: parseInt(mmGtData.dis_cap),
      cap2: capForExcel, // Use formatted string to match Excel
      tolerans_plus: toleransPlusValue,
      tolerans_minus: toleransMinusValue,
      shrink: mmGtData.shrink,
      unwinding: mmGtData.unwinding || '',
      cast_kont: mmGtData.cast_kont || '',
      helix_kont: mmGtData.helix_kont || '',
      elongation: mmGtData.elongation || '',
      satis_kdv_orani: '20', // Match Excel format as string
      alis_kdv_orani: '20', // Match Excel format as string
      stok_turu: 'D',
      fiyat_birimi: 1,
      satis_tipi: 1,
      birim_agirlik: parseInt(mmGtData.kg),
      esnek_yapilandir: 'H',
      super_recete_kullanilsin: 'H',
      alis_doviz_tipi: 2,
      ingilizce_isim: `YM Galvanized Wire ${capForExcel} mm -${Math.abs(toleransMinusValue).toFixed(2)}/+${toleransPlusValue.toFixed(2)} ${mmGtData.kaplama || '0'} gr/m² ${mmGtData.min_mukavemet || '0'}-${mmGtData.max_mukavemet || '0'} MPa ID:${mmGtData.ic_cap || '45'} cm OD:${mmGtData.dis_cap || '75'} cm ${mmGtData.kg || '0'} kg`
    };
  };

  // Veritabanı için YM ST verisi oluştur - Excel formatına tam uyumlu
  const generateYmStDatabaseData = (ymSt) => {
    const capValue = parseFloat(ymSt.cap);
    const capForExcel = capValue.toFixed(2);
    
    return {
      stok_kodu: ymSt.stok_kodu,
      stok_adi: ymSt.stok_adi,
      grup_kodu: 'YM',
      kod_1: 'ST',
      kod_2: ymSt.filmasin.toString(), // Store filmasin value in kod_2 to match Excel
      kod_3: ymSt.quality, // Store quality value in kod_3 to match Excel
      muh_detay: '28',
      depo_kodu: '35',
      br_1: 'KG',
      br_2: 'TN',
      pay_1: 1,
      payda_1: 1.000, // Keep exact Excel format
      cevrim_degeri_1: 0,
      olcu_br_3: 'AD',
      cevrim_pay_2: 1,
      cevrim_payda_2: 1,
      cevrim_degeri_2: 1,
      satis_kdv_orani: '20', // Match Excel format as string
      cap: capValue, // Store as number for calculations
      filmasin: parseInt(ymSt.filmasin),
      quality: ymSt.quality,
      ozel_saha_1_say: parseInt(ymSt.filmasin), // This stores the filmasin value as in Excel
      birim_agirlik: ymSt.kg || 0,
      fiyat_birimi: 1,
      doviz_tip: 1,
      stok_turu: 'D',
      ingilizce_isim: `YM Black Wire ${capForExcel} mm Quality: ${ymSt.quality}`,
      esnek_yapilandir: 'H',
      super_recete_kullanilsin: 'H'
    };
  };

  // Reçeteleri kaydet - Yeni 1:1:n ilişki modeli ile
  /**
   * Aynı cap, kod_2, vb. özelliklere sahip ürünler için en yüksek sequence değerini bulur
   * @returns {Promise<string>} - Bulunan en yüksek sequence değeri veya '00'
   */
  const findHighestSequence = async () => {
    try {
      // Çap ve kod_2 değerleri için arama kriterleri oluştur
      const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
      const searchPattern = `GT.${mmGtData.kod_2}.${capFormatted}.`;
      
      // Tüm MM GT ürünlerini getir
      const mmGtResponse = await fetchWithAuth(API_URLS.galMmGt);
      if (!mmGtResponse || !mmGtResponse.ok) {
        console.warn('MM GT ürünleri alınamadı, sequence "00" kullanılacak');
        return '00';
      }
      
      const allMmGt = await mmGtResponse.json();
      if (!Array.isArray(allMmGt) || allMmGt.length === 0) {
        console.warn('MM GT ürünü bulunamadı, sequence "00" kullanılacak');
        return '00';
      }
      
      // Benzer ürünleri filtrele
      const similarProducts = allMmGt.filter(product => 
        product.stok_kodu && product.stok_kodu.startsWith(searchPattern)
      );
      
      if (similarProducts.length === 0) {
        console.log('Benzer ürün bulunamadı, sequence "00" kullanılacak');
        return '00';
      }
      
      // En yüksek sequence değerini bul
      let highestSequence = '00';
      
      for (const product of similarProducts) {
        const parts = product.stok_kodu.split('.');
        if (parts.length === 4) {
          const currentSequence = parts[3];
          
          // Mevcut sequence numerik değer kontrolü
          if (/^\d{2}$/.test(currentSequence)) {
            // Sayısal olarak karşılaştır (00 < 01 < 02 < ... < 99)
            if (parseInt(currentSequence, 10) > parseInt(highestSequence, 10)) {
              highestSequence = currentSequence;
            }
          }
        }
      }
      
      // Bir sonraki sequence değerini hesapla
      const nextSequence = incrementSequence(highestSequence);
      console.log(`Bulunan en yüksek sequence değeri: ${highestSequence}, bir sonraki: ${nextSequence}`);
      return nextSequence;
    } catch (error) {
      console.error('Sequence arama hatası:', error);
      return '00';
    }
  };
  
  const saveRecipesToDatabase = async (mmGtIds, ymGtId, ymStIds) => {
    try {
      const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
      const mainYmSt = allYmSts[mainYmStIndex] || allYmSts[0];
      
      // ÖNEMLİ KRİTİK FIX: Artan sequence'i doğru şekilde almak MMGT ve YMGT reçeteleri için hayati
      let mmGtSequence = '00';
      let mmGtStokKodu = '';
      let ymGtSequence = '00';
      let ymGtStokKodu = '';
      
      // 1. MMGT stok_kodu'nu direkt olarak veritabanından al
      if (mmGtIds.length > 0) {
        const mmGtId = mmGtIds[0];
        
        try {
          // MMGT'yi tüm liste içinden bulma yaklaşımı - 404 hatasını önlemek için
          const allMmGtResponse = await fetchWithAuth(API_URLS.galMmGt);
          if (allMmGtResponse && allMmGtResponse.ok) {
            const allMmGt = await allMmGtResponse.json();
            // ID'ye göre ilgili ürünü bul
            const mmGt = Array.isArray(allMmGt) ? allMmGt.find(item => item.id === mmGtId) : null;
            
            if (mmGt && mmGt.stok_kodu) {
              mmGtStokKodu = mmGt.stok_kodu;
              mmGtSequence = mmGt.stok_kodu.split('.').pop();
              
              if (mmGtSequence === '00') {
                console.warn(`UYARI: MMGT ürünü veritabanında "00" sequence ile kaydedilmiş`);
              } else {
                console.log(`KRİTİK FIX! MMGT veritabanında bulunan GERÇEK stok_kodu: ${mmGtStokKodu} (sequence: ${mmGtSequence})`);
              }
            } else {
              console.error(`MMGT veritabanında bulunamadı veya stok_kodu eksik! ID: ${mmGtId}`);
              // Ürün bulunamadı durumunda otomatik kod oluştur
              const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
              mmGtStokKodu = `GT.${mmGtData.kod_2}.${capFormatted}.00`;
              mmGtSequence = '00';
              console.log(`MMGT için otomatik stok_kodu oluşturuldu: ${mmGtStokKodu}`);
            }
          } else {
            console.error(`MMGT veritabanından alınamadı! ID: ${mmGtId}`);
            // API hatası durumunda otomatik kod oluştur
            const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
            mmGtStokKodu = `GT.${mmGtData.kod_2}.${capFormatted}.00`;
            mmGtSequence = '00';
            console.log(`MMGT için otomatik stok_kodu oluşturuldu: ${mmGtStokKodu}`);
          }
        } catch (error) {
          console.error(`MMGT bilgileri alınırken hata: ${error.message}`);
          // Hata durumunda otomatik kod oluştur
          const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
          mmGtStokKodu = `GT.${mmGtData.kod_2}.${capFormatted}.00`;
          mmGtSequence = '00';
          console.log(`MMGT için otomatik stok_kodu oluşturuldu: ${mmGtStokKodu}`);
        }
      }
      
      // 2. YMGT stok_kodu'nu direkt olarak veritabanından al
      if (ymGtId) {
        try {
          // YMGT'yi tüm liste içinden bulma yaklaşımı - 404 hatasını önlemek için
          const allYmGtResponse = await fetchWithAuth(API_URLS.galYmGt);
          if (allYmGtResponse && allYmGtResponse.ok) {
            const allYmGt = await allYmGtResponse.json();
            // ID'ye göre ilgili ürünü bul
            const ymGt = Array.isArray(allYmGt) ? allYmGt.find(item => item.id === ymGtId) : null;
            
            if (ymGt && ymGt.stok_kodu) {
              ymGtStokKodu = ymGt.stok_kodu;
              ymGtSequence = ymGt.stok_kodu.split('.').pop();
              
              if (ymGtSequence === '00') {
                console.warn(`UYARI: YMGT ürünü veritabanında "00" sequence ile kaydedilmiş`);
              } else {
                console.log(`KRİTİK FIX! YMGT veritabanında bulunan GERÇEK stok_kodu: ${ymGtStokKodu} (sequence: ${ymGtSequence})`);
              }
              
              // MMGT ve YMGT aynı sequence'e sahip olmalı!
              if (mmGtSequence !== ymGtSequence) {
                console.error(`SORUN! MMGT ve YMGT farklı sequence'lere sahip! MMGT: ${mmGtSequence}, YMGT: ${ymGtSequence}`);
                // YMGT sequence'i MMGT ile aynı yap - kritik düzeltme
                ymGtSequence = mmGtSequence;
              }
            } else {
              console.error(`YMGT veritabanında bulunamadı veya stok_kodu eksik! ID: ${ymGtId}`);
              // Ürün bulunamadı durumunda otomatik kod oluştur
              const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
              ymGtStokKodu = `YM.GT.${mmGtData.kod_2}.${capFormatted}.${mmGtSequence}`;
              console.log(`YMGT için otomatik stok_kodu oluşturuldu: ${ymGtStokKodu}`);
            }
          } else {
            console.error(`YMGT veritabanından alınamadı! ID: ${ymGtId}`);
            // API hatası durumunda otomatik kod oluştur
            const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
            ymGtStokKodu = `YM.GT.${mmGtData.kod_2}.${capFormatted}.${mmGtSequence}`;
            console.log(`YMGT için otomatik stok_kodu oluşturuldu: ${ymGtStokKodu}`);
          }
        } catch (error) {
          console.error(`YMGT bilgileri alınırken hata: ${error.message}`);
          // Hata durumunda otomatik kod oluştur
          const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
          ymGtStokKodu = `YM.GT.${mmGtData.kod_2}.${capFormatted}.${mmGtSequence}`;
          console.log(`YMGT için otomatik stok_kodu oluşturuldu: ${ymGtStokKodu}`);
        }
      }
      
      console.log(`REÇETELER İÇİN KULLANILACAK SEQUENCE: ${mmGtSequence}`);
      console.log(`MMGT MAMUL_KODU: ${mmGtStokKodu}`);
      console.log(`YMGT MAMUL_KODU: ${ymGtStokKodu}`);
      
      // YMGT kontrolü yap ve eğer gerekiyorsa MMGT ile aynı sequence'e güncelle
      if (ymGtId && mmGtSequence !== '00') {
        const ymGtResponse = await fetchWithAuth(`${API_URLS.galYmGt}/${ymGtId}`);
        if (ymGtResponse && ymGtResponse.ok) {
          const ymGt = await ymGtResponse.json();
          if (ymGt && ymGt.stok_kodu) {
            const ymGtCurrentSequence = ymGt.stok_kodu.split('.').pop();
            
            // MMGT ile aynı sequence olup olmadığını kontrol et
            if (ymGtCurrentSequence !== mmGtSequence) {
              console.warn(`Sequence uyumsuzluğu! MMGT: ${mmGtSequence}, YMGT: ${ymGtCurrentSequence}`);
              console.warn(`YMGT sequence güncelleniyor: ${ymGtCurrentSequence} -> ${mmGtSequence}`);
              
              // YMGT'yi MMGT ile aynı sequence'e güncelle
              const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
              const updatedYmGtStokKodu = `YM.GT.${mmGtData.kod_2}.${capFormatted}.${mmGtSequence}`;
              const updatedYmGtStokAdi = generateYmGtStokAdi(mmGtSequence);
              
              await fetchWithAuth(`${API_URLS.galYmGt}/${ymGtId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  ...generateYmGtDatabaseData(mmGtSequence),
                  stok_kodu: updatedYmGtStokKodu,
                  stok_adi: updatedYmGtStokAdi
                })
              });
              
              console.log(`YMGT güncellendi: ${updatedYmGtStokKodu}`);
            }
          }
        }
      }
      
      // ÖNEMLİ: Reçeteleri kaydetmeden önce, tüm mevcut reçeteleri sil
      // Bu şekilde yeni sequence'li reçeteler eklenecek
      
      // Sadece 1 MM GT reçetesini kaydet
      if (mmGtIds.length > 0) {
        // mmGtStokKodu null ise oluştur
        if (!mmGtStokKodu) {
          const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
          mmGtStokKodu = `GT.${mmGtData.kod_2}.${capFormatted}.00`;
          mmGtSequence = '00';
          console.log(`MMGT için yedek stok_kodu oluşturuldu: ${mmGtStokKodu}`);
        }
        const mmGtId = mmGtIds[0]; // Artık sadece 1 tane MM GT var
        const mmGtRecipe = allRecipes.mmGtRecipes[mainYmStIndex] || {}; // Ana YM ST'ye bağlı MM GT reçetesi
        
        console.log(`MMGT reçeteleri için ID: ${mmGtId}, stok_kodu: ${mmGtStokKodu}, sequence: ${mmGtSequence}`);
        
        // MMGT için mevcut tüm reçeteleri kontrol et ve sil
        try {
          // 1. Tüm mevcut reçeteleri getir
          const allRecipesResponse = await fetchWithAuth(`${API_URLS.galMmGtRecete}?mm_gt_id=${mmGtId}`);
          if (allRecipesResponse && allRecipesResponse.ok) {
            const allRecipesData = await allRecipesResponse.json();
            console.log(`${allRecipesData.length} adet MMGT reçetesi bulundu`);
            
            // 2. Her reçeteyi kontrol et, yanlış mamul_kodu veya bilesen_kodu içerenleri sil
            for (const recipe of allRecipesData) {
              // mamul_kodu mmGtStokKodu ile aynı değilse sil
              if (recipe.mamul_kodu !== mmGtStokKodu) {
                console.log(`YANLIŞ MAMUL_KODU MMGT reçetesi siliniyor: ID=${recipe.id}, mamul_kodu=${recipe.mamul_kodu}, doğrusu=${mmGtStokKodu}`);
                try {
                  await fetchWithAuth(`${API_URLS.galMmGtRecete}/${recipe.id}`, { method: 'DELETE' });
                } catch (deleteError) {
                  console.error(`MMGT reçetesi silinemedi: ${deleteError.message}`);
                }
              }
            }
          } else {
            console.log(`MMGT için reçete bulunamadı - 404 hatası olabilir`);
          }
        } catch (error) {
          console.error('MMGT reçeteleri kontrol edilirken hata:', error);
          // Hata durumunda işleme devam et
        }
        
        // Tüm mevcut reçeteleri sil - güvenlik için
        // Reçeteleri kontrol et ve yanlış mamul_kodu içerenleri temizle
        await checkAndFixStokKodu('mmgt', mmGtId, mmGtStokKodu);
        
        // Tüm mevcut reçeteleri sil
        await deleteExistingRecipes('mmgt', mmGtId);
        
        let siraNo = 1;
        const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
        
        // KRİTİK: mamul_kodu kesinlikle ve kesinlikle MMGT stok kartı tablosundaki stok_kodu ile aynı olmalı
        const mamulKodu = mmGtStokKodu;
        console.log(`MMGT REÇETELERİ İÇİN KULLANILACAK MAMUL_KODU: ${mamulKodu} (sequence: ${mmGtSequence})`);
        
        // Son bir kontrol: mmGtStokKodu boş olmamalı ve doğru formatta olmalı
        if (!mamulKodu || !mamulKodu.includes('.')) {
          console.error(`HATA! Geçersiz MMGT stok_kodu: ${mamulKodu}`);
          throw new Error(`Geçersiz MMGT stok_kodu: ${mamulKodu}`);
        }
        
        console.log(`MMGT reçete için kullanılacak mamul_kodu: ${mamulKodu} (sequence: ${mmGtSequence})`);
        
        // Son bir kontrol: sequence doğru mu?
        const recordSequence = mamulKodu.split('.').pop();
        if (recordSequence !== mmGtSequence) {
          console.error(`UYARI! Sequence tutarsızlığı: Reçete için ${recordSequence}, Stok için ${mmGtSequence}`);
        }
        
        // MMGT reçete sıralaması: Excel ile TAM UYUMLU kesin sıralama
        // DÜZELTME: Sıralama: 1. YM.GT, 2. GTPKT01, 3. KARTON, 4. HALKA, 5. CEMBER, 6. TOKA, 7. DESİ, 8. SHRINK (sadece bir adet), 9. Diğerleri
        const recipeEntries = Object.entries(mmGtRecipe);
        
        // Her bileşeni TAMAMEN Excel ile aynı şekilde bul - KESIN ISIMLERIYLE
        const ymGtEntry = recipeEntries.find(([key]) => key.includes('YM.GT.'));
        const gtpkt01Entry = recipeEntries.find(([key]) => key === 'GTPKT01');
        const kartonEntry = recipeEntries.find(([key]) => key === 'AMB.ÇEM.KARTON.GAL');
        const halkaEntry = recipeEntries.find(([key]) => key === 'SM.7MMHALKA');
        const cemberEntry = recipeEntries.find(([key]) => key === 'AMB.APEX CEMBER 38X080');
        const tokaEntry = recipeEntries.find(([key]) => key === 'AMB.TOKA.SIGNODE.114P. DKP');
        const desiEntry = recipeEntries.find(([key]) => key === 'SM.DESİ.PAK');
        
        // DÜZELTME: Shrink bileşeni işleniyor - eğer birden fazla var ise sadece birini al
        let shrinkEntry = null;
        const shrinkEntries = recipeEntries.filter(([key]) => key.includes('AMB.SHRİNK.'));
        if (shrinkEntries.length > 0) {
          // Sadece ilk shrink girişini al - diğerleri yok sayılacak
          shrinkEntry = shrinkEntries[0];
          
          // Uyarı ver
          if (shrinkEntries.length > 1) {
            console.warn(`⚠️ Birden fazla Shrink bileşeni var! Sadece ${shrinkEntry[0]} kullanılacak, diğerleri atlanacak.`);
            console.warn(`Shrink bileşenleri:`, shrinkEntries.map(([key]) => key).join(', '));
          }
        }
        
        // Diğer tüm bileşenler - Excel ile TAM UYUMLU şekilde tanımla
        const otherEntries = recipeEntries.filter(([key]) => 
          !key.includes('YM.GT.') && 
          key !== 'GTPKT01' &&
          key !== 'AMB.ÇEM.KARTON.GAL' &&
          !key.includes('AMB.SHRİNK.') && // Tüm shrink bileşenlerini hariç tut
          key !== 'SM.7MMHALKA' &&
          key !== 'AMB.APEX CEMBER 38X080' &&
          key !== 'AMB.TOKA.SIGNODE.114P. DKP' &&
          key !== 'SM.DESİ.PAK'
        );
        
        // DÜZELTME: Excel formatına tam uygun sırada ekle - Shrink en sonda
        const orderedEntries = [
          ymGtEntry, 
          gtpkt01Entry, 
          kartonEntry,
          halkaEntry,
          cemberEntry,
          tokaEntry,
          desiEntry,
          // Shrink en sonda yer alacak
          shrinkEntry,
          ...otherEntries
        ].filter(Boolean);
        
        for (const [key, value] of orderedEntries) {
          if (value > 0) {
            // Operasyon/Bileşen sınıflandırması düzeltmesi
            // DÜZELTME: YM.ST kodları Bileşen olarak işaretlenmeli, operasyon değil
            const operasyonBilesen = (key === 'GTPKT01' || key === 'GLV01' || key === 'TLC01') ? 'Operasyon' : 'Bileşen';
            
            // Tam kod kontrolü ve log kaydı
            console.log(`📊 Bileşen sınıflandırması: ${key} -> ${operasyonBilesen}`);
            
            // Format the value exactly as it would appear in Excel, using points as decimal separators
            let formattedValue = value;
            if (typeof value === 'number') {
              formattedValue = value.toLocaleString('en-US', {
                minimumFractionDigits: 0,
                maximumFractionDigits: 5,
                useGrouping: false // No thousand separators
              });
            }
            
            // Son bir kontrol: mamulKodu'nun sequence'ini doğrula
            const recordSequence = mamulKodu.split('.').pop();
            if (recordSequence !== mmGtSequence) {
              console.error(`Sequence uyuşmazlığı! Reçete kaydediliyor: ${recordSequence}, olması gereken: ${mmGtSequence}`);
            }
            
            console.log(`MMGT reçete kaydı: ${mmGtId}, ${mamulKodu}, ${key}, ${formattedValue}`);
            
            // BURADA ÖNEMLİ: MMGT reçeteleri için her zaman doğru sequence'i içeren mamul_kodu kullanmak çok önemli
            console.log(`MMGT REÇETE EKLEME (FIX): mamul_kodu=${mamulKodu}, bilesen_kodu=${key}, mm_gt_id=${mmGtId}`);
            
            // Tüm parametreleri logla
            const receteParams = {
              mm_gt_id: mmGtId,
              mamul_kodu: mamulKodu, // ÖNEMLİ: Her zaman doğru sequence ile güncel mamul_kodu
              bilesen_kodu: key,
              miktar: formattedValue,
              sira_no: siraNo++,
              operasyon_bilesen: operasyonBilesen,
              olcu_br: getOlcuBr(key),
            };
            console.log("REÇETE PARAMETRE KONTROLÜ:", JSON.stringify(receteParams));
            
            // Başka bir reçete ile çakışma olabilir mi kontrol et
            try {
              const checkResponse = await fetchWithAuth(`${API_URLS.galMmGtRecete}?mm_gt_id=${mmGtId}`);
              if (checkResponse && checkResponse.ok) {
                const existingRecipes = await checkResponse.json();
                const conflictRecipe = existingRecipes.find(r => r.bilesen_kodu === key && r.mamul_kodu !== mamulKodu);
                if (conflictRecipe) {
                  console.error(`ÇAKIŞMA! Farklı mamul_kodu ile reçete mevcut: ${conflictRecipe.mamul_kodu} (silinecek)`);
                  try {
                    await fetchWithAuth(`${API_URLS.galMmGtRecete}/${conflictRecipe.id}`, { method: 'DELETE' });
                  } catch (deleteError) {
                    console.error(`Çakışan reçete silinemedi: ${deleteError.message}`);
                    // Silme hatasına rağmen devam et
                  }
                }
              } else if (checkResponse && checkResponse.status === 404) {
                // 404 hatası - reçete hiç yok, sorun değil, devam et
                console.log(`MMGT reçeteleri henüz oluşturulmamış (404) - çakışma kontrolüne gerek yok`);
              } else {
                // Diğer API hataları
                console.warn(`MMGT reçeteleri sorgulanamadı - HTTP ${checkResponse ? checkResponse.status : 'unknown'}`);
              }
            } catch (checkError) {
              console.error(`Reçete çakışması kontrol edilirken hata: ${checkError.message}`);
              // Hata durumunda bile işleme devam et
            }
            
            // Reçeteyi oluşturmaya devam et
            try {
              console.log(`MMGT reçetesi kaydediliyor: ${mmGtId}, ${mamulKodu}, ${key}`);
              const saveResponse = await fetchWithAuth(API_URLS.galMmGtRecete, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  ...receteParams,
                  olcu_br_bilesen: '1',
                  aciklama: getReceteAciklama(key),
                  ua_dahil_edilsin: 'evet',
                  son_operasyon: 'evet',
                  recete_top: 1,
                  fire_orani: 0.0004, // Match Excel format
                  // Additional fields for better Netsis compatibility - match Excel
                  miktar_sabitle: 'H',
                  stok_maliyet: 'S',
                  fire_mik: '0',
                  sabit_fire_mik: '0',
                  istasyon_kodu: '',
                  hazirlik_suresi: key.includes('01') ? 0 : null,
                  uretim_suresi: key.includes('01') ? formattedValue : null, // Use formatted value
                  oncelik: '0',
                  planlama_orani: '100',
                  alt_pol_da_transfer: 'H',
                  alt_pol_ambar_cikis: 'H',
                  alt_pol_uretim_kaydi: 'H',
                  alt_pol_mrp: 'H',
                  ic_dis: 'I'
                })
              });
              
              if (saveResponse && saveResponse.ok) {
                console.log(`MMGT reçetesi başarıyla kaydedildi: ${key}`);
              } else {
                console.error(`MMGT reçetesi kaydedilemedi: ${key}, HTTP ${saveResponse ? saveResponse.status : 'unknown'}`);
              }
            } catch (saveError) {
              console.error(`MMGT reçetesi kaydedilirken hata: ${saveError.message}`);
              // Kaydetme hatası oluşsa bile diğer reçeteleri eklemeye devam et
            }
          }
        }
      }
      
      // Sadece 1 YM GT için reçete kaydet - Excel formatıyla tam uyumlu
      if (ymGtId && Object.keys(allRecipes.ymGtRecipe).length > 0) {
        // ymGtStokKodu null ise oluştur
        if (!ymGtStokKodu) {
          const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
          ymGtStokKodu = `YM.GT.${mmGtData.kod_2}.${capFormatted}.${mmGtSequence}`;
          console.log(`YMGT için yedek stok_kodu oluşturuldu: ${ymGtStokKodu}`);
        }
        
        console.log(`YMGT için kullanılan sequence değeri: ${mmGtSequence} (MMGT ile aynı olmalı)`);
        
        // *** KRİTİK DÜZELTME *** - ID ile değil, stok_kodu ile kayıt bul
        // Bu yaklaşım, hem 404 Not Found hem de 409 Conflict hatalarını önler
        
        try {
          // Önce stok_kodu ile doğrudan ara
          console.log(`YMGT için stok_kodu ile arama yapılıyor: ${ymGtStokKodu}`);
          const searchResponse = await fetchWithAuth(`${API_URLS.galYmGt}?stok_kodu=${encodeURIComponent(ymGtStokKodu)}`);
          
          let actualYmGtId = null;
          
          if (searchResponse && searchResponse.ok) {
            const searchResults = await searchResponse.json();
            
            if (Array.isArray(searchResults) && searchResults.length > 0) {
              // Mevcut kaydın ID'sini kullan
              actualYmGtId = searchResults[0].id;
              console.log(`✅ YMGT stok_kodu ile bulundu: ${ymGtStokKodu}, ID: ${actualYmGtId}`);
            } else {
              // Tam eşleşme yoksa, benzer aramayla dene
              console.log(`YMGT tam eşleşme ile bulunamadı, kısmi eşleşme deneniyor...`);
              
              // Önce kod_2 ve cap ile ara
              try {
                const baseCode = ymGtStokKodu.split('.').slice(0, 3).join('.');
                const likeResponse = await fetchWithAuth(`${API_URLS.galYmGt}?stok_kodu_like=${encodeURIComponent(baseCode)}`);
                
                if (likeResponse && likeResponse.ok) {
                  const likeResults = await likeResponse.json();
                  
                  if (Array.isArray(likeResults) && likeResults.length > 0) {
                    // Tam eşleşme aranıyor
                    const exactMatch = likeResults.find(item => item.stok_kodu === ymGtStokKodu);
                    
                    if (exactMatch) {
                      actualYmGtId = exactMatch.id;
                      console.log(`✅ YMGT stok_kodu_like ile tam eşleşme: ${ymGtStokKodu}, ID: ${actualYmGtId}`);
                    } else {
                      // En yakın eşleşme (aynı çap ve kod) kullanılıyor
                      actualYmGtId = likeResults[0].id;
                      console.log(`⚠️ YMGT için benzer kaydın ID'si kullanılıyor: ${likeResults[0].stok_kodu}, ID: ${actualYmGtId}`);
                    }
                  } else {
                    // Hiç benzer kayıt bulunamadı - yeni oluşturulacak
                    console.log(`YMGT benzer kayıt bulunamadı, yeni oluşturuluyor: ${ymGtStokKodu}`);
                  }
                } else {
                  console.log(`YMGT benzer arama başarısız, yeni oluşturuluyor: ${ymGtStokKodu}`);
                }
              } catch (likeError) {
                console.error(`YMGT benzer arama hatası: ${likeError.message}`);
                // Hata olursa yeni kayıt oluşturmaya devam et
              }
              
              // ID bulunamadıysa, yeni kayıt oluştur
              if (!actualYmGtId) {
                try {
                  console.log(`YMGT yeni kayıt oluşturuluyor: ${ymGtStokKodu}`);
                  
                  const createResponse = await fetchWithAuth(API_URLS.galYmGt, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(generateYmGtDatabaseData(mmGtSequence))
                  });
                  
                  if (createResponse && createResponse.ok) {
                    const result = await createResponse.json();
                    actualYmGtId = result.id;
                    console.log(`✅ YMGT başarıyla oluşturuldu: ${ymGtStokKodu}, ID: ${actualYmGtId}`);
                  } else if (createResponse && createResponse.status === 409) {
                    // 409 Conflict - başka bir tam arama yöntemi dene
                    console.log(`⚠️ YMGT oluşturulamadı (409 Conflict), son bir arama deneniyor...`);
                    
                    // Tüm YMGT'leri getirip tam uyan var mı kontrol et
                    try {
                      const allYmGtResponse = await fetchWithAuth(API_URLS.galYmGt);
                      
                      if (allYmGtResponse && allYmGtResponse.ok) {
                        const allYmGts = await allYmGtResponse.json();
                        
                        if (Array.isArray(allYmGts) && allYmGts.length > 0) {
                          const exactMatch = allYmGts.find(item => item.stok_kodu === ymGtStokKodu);
                          
                          if (exactMatch) {
                            actualYmGtId = exactMatch.id;
                            console.log(`✅ YMGT tüm liste içinden bulundu: ${ymGtStokKodu}, ID: ${actualYmGtId}`);
                          } else {
                            // Son çare - mmGtId ile ilişkili YMGT'leri ara
                            const relatedYmGt = allYmGts.find(item => item.mm_gt_id === mmGtIds[0] || 
                              item.stok_kodu.includes(mmGtData.kod_2) && 
                              item.stok_kodu.includes(Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0')));
                              
                            if (relatedYmGt) {
                              actualYmGtId = relatedYmGt.id;
                              console.log(`⚠️ MMGT ile ilişkili YMGT bulundu: ${relatedYmGt.stok_kodu}, ID: ${actualYmGtId}`);
                            } else {
                              console.error(`❌ YMGT için hiçbir uygun kayıt bulunamadı! İşlem yapılamıyor.`);
                              return; // Çık
                            }
                          }
                        } else {
                          console.error(`❌ YMGT listesi boş veya geçersiz! İşlem yapılamıyor.`);
                          return; // Çık
                        }
                      } else {
                        console.error(`❌ YMGT listesi alınamadı! İşlem yapılamıyor.`);
                        return; // Çık
                      }
                    } catch (allError) {
                      console.error(`❌ YMGT listesi alınırken hata: ${allError.message}`);
                      return; // Çık
                    }
                  } else {
                    console.error(`❌ YMGT oluşturulamadı: HTTP ${createResponse ? createResponse.status : 'unknown'}`);
                    return; // Çık
                  }
                } catch (createError) {
                  console.error(`❌ YMGT oluşturma hatası: ${createError.message}`);
                  return; // Çık
                }
              }
            }
          } else {
            console.error(`❌ YMGT arama hatası: HTTP ${searchResponse ? searchResponse.status : 'unknown'}`);
            return; // Çık
          }
          
          // Bu noktada mutlaka geçerli bir ID'ye sahip olmalıyız
          if (!actualYmGtId) {
            console.error(`❌ YMGT için geçerli ID bulunamadı! İşlem yapılamıyor.`);
            return; // Çık
          }
          
          // ID'yi güncelle
          ymGtId = actualYmGtId;
          console.log(`YMGT reçeteleri için güncel ID: ${ymGtId}, stok_kodu: ${ymGtStokKodu}`);
        } catch (mainError) {
          console.error(`❌ YMGT arama/oluşturma işlemi sırasında kritik hata: ${mainError.message}`);
          return; // Kritik hata durumunda çık
        }
        
        // MMGT ve YMGT sequence değerlerini karşılaştır ve gerekirse YMGT'yi güncelle
        if (mmGtSequence !== ymGtSequence && mmGtSequence !== '00') {
          console.error(`UYARI! YMGT sequence (${ymGtSequence}) ile MMGT sequence (${mmGtSequence}) eşleşmiyor!`);
          
          // YMGT'yi MMGT ile aynı sequence'e güncelle
          const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
          const updatedYmGtStokKodu = `YM.GT.${mmGtData.kod_2}.${capFormatted}.${mmGtSequence}`;
          
          try {
            console.warn(`YMGT stok_kodu düzeltiliyor: ${ymGtStokKodu} → ${updatedYmGtStokKodu}`);
            
            await fetchWithAuth(`${API_URLS.galYmGt}/${ymGtId}`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                ...generateYmGtDatabaseData(mmGtSequence),
                stok_kodu: updatedYmGtStokKodu
              })
            });
            
            // Güncellenmiş kodu kullan
            ymGtStokKodu = updatedYmGtStokKodu;
            ymGtSequence = mmGtSequence;
            
            console.log(`YMGT stok_kodu güncellendi: ${ymGtStokKodu}`);
          } catch (updateError) {
            console.error(`YMGT güncellenirken hata: ${updateError.message}`);
          }
        }
        
        // Son kontrol: ymGtStokKodu geçerli olmalı
        if (!ymGtStokKodu || !ymGtStokKodu.includes('.')) {
          console.error(`HATA! Geçersiz YMGT stok_kodu: ${ymGtStokKodu}`);
          throw new Error(`Geçersiz YMGT stok_kodu: ${ymGtStokKodu}`);
        }
        
        // YMGT için mevcut tüm reçeteleri kontrol et ve sil
        try {
          // 1. Tüm mevcut reçeteleri getir
          const allRecipesResponse = await fetchWithAuth(`${API_URLS.galYmGtRecete}?ym_gt_id=${ymGtId}`);
          if (allRecipesResponse && allRecipesResponse.ok) {
            const allRecipesData = await allRecipesResponse.json();
            console.log(`${allRecipesData.length} adet YMGT reçetesi bulundu`);
            
            // 2. Her reçeteyi kontrol et, yanlış mamul_kodu içerenleri sil
            for (const recipe of allRecipesData) {
              // mamul_kodu ymGtStokKodu ile aynı değilse sil
              if (recipe.mamul_kodu !== ymGtStokKodu) {
                console.log(`YANLIŞ MAMUL_KODU YMGT reçetesi siliniyor: ID=${recipe.id}, mamul_kodu=${recipe.mamul_kodu}, doğrusu=${ymGtStokKodu}`);
                try {
                  await fetchWithAuth(`${API_URLS.galYmGtRecete}/${recipe.id}`, { method: 'DELETE' });
                } catch (deleteError) {
                  console.error(`YMGT reçetesi silinemedi: ${deleteError.message}`);
                }
              }
            }
          } else {
            console.log(`YMGT için reçete bulunamadı - 404 hatası olabilir`);
          }
        } catch (error) {
          console.error('YMGT reçeteleri kontrol edilirken hata:', error);
          // Hata durumunda işleme devam et
        }
        
        // Güvenlik için tüm reçeteleri temizle
        // Reçeteleri kontrol et ve yanlış mamul_kodu içerenleri temizle
        await checkAndFixStokKodu('ymgt', ymGtId, ymGtStokKodu);
        
        // Tüm mevcut reçeteleri sil
        await deleteExistingRecipes('ymgt', ymGtId);
        
        console.log(`YMGT REÇETELERİ İÇİN KULLANILACAK MAMUL_KODU: ${ymGtStokKodu} (sequence: ${ymGtSequence})`);
        
        // YM GT'yi bul - oluşturulmuş stok kodu ile
        const existingYmGt = await checkExistingProduct(API_URLS.galYmGt, ymGtStokKodu);
        if (existingYmGt) {
          // ÖNEMLİ: Önce reçeteleri sil, her durumda mevcut reçeteleri silip yeniden oluştur
          console.log(`YMGT reçeteleri siliniyor: YMGT ID=${existingYmGt.id}`);
          // Reçeteleri kontrol et ve yanlış mamul_kodu içerenleri temizle
          await checkAndFixStokKodu('ymgt', existingYmGt.id, ymGtStokKodu);
          
          // Tüm mevcut reçeteleri sil
          await deleteExistingRecipes('ymgt', existingYmGt.id);
          
          let siraNo = 1;
          
          // YMGT reçete sıralaması - Excel formatına uygun kesin sıralama 
          // Sıralama: 1. YM.ST (ana), 2. GLV01, 3. Çinko, 4. Asit, 5. Diğerleri
          const recipeEntries = Object.entries(allRecipes.ymGtRecipe);
          
          // Her bileşen türünü ayrı ayrı bul - tam eşleşme kontrolü ile
          let ymStEntry = null;
          
          // Ana YM.ST için güvenlik kontrolleri
          if (!mainYmSt || !mainYmSt.stok_kodu) {
            console.error(`❌ HATA: Ana YM.ST bilgileri eksik veya geçersiz! YMGT reçetesi oluşturulamayabilir.`);
          } else {
            console.log(`🔍 Ana YM.ST aranıyor: ${mainYmSt.stok_kodu}`);
            // Önce tam eşleşme ara
            ymStEntry = recipeEntries.find(([key]) => key === mainYmSt.stok_kodu);
            
            // Tam eşleşme yoksa, kısmi eşleşme dene
            if (!ymStEntry) {
              const anyYmStEntry = recipeEntries.find(([key]) => key.includes('YM.ST.'));
              if (anyYmStEntry) {
                console.warn(`⚠️ Ana YM.ST (${mainYmSt.stok_kodu}) reçetede bulunamadı, alternatif kullanılıyor: ${anyYmStEntry[0]}`);
                ymStEntry = anyYmStEntry;
              } else {
                console.error(`❌ HATA: YMGT reçetesinde YM.ST bileşeni bulunamadı!`);
              }
            }
          }
          
          // Kritik operasyon ve bileşenleri tam kod eşleşmesi ile bul
          const glv01Entry = recipeEntries.find(([key]) => key === 'GLV01');
          const cinkoEntry = recipeEntries.find(([key]) => key === '150 03');
          const asitEntry = recipeEntries.find(([key]) => key === 'SM.HİDROLİK.ASİT');
          
          // Eksik kritik bileşenleri kontrol et ve uyar
          if (!glv01Entry) {
            console.error(`❌ HATA: YMGT reçetesinde GLV01 operasyonu bulunamadı!`);
          }
          
          if (!cinkoEntry) {
            console.warn(`⚠️ UYARI: YMGT reçetesinde çinko bileşeni (150 03) bulunamadı!`);
          }
          
          if (!asitEntry) {
            console.warn(`⚠️ UYARI: YMGT reçetesinde asit bileşeni (SM.HİDROLİK.ASİT) bulunamadı!`);
          }
          
          // Diğer bileşenler - kesin kod eşleşmesi ile filtrele
          const otherEntries = recipeEntries.filter(([key]) => 
            key !== (mainYmSt?.stok_kodu || '') && 
            !key.includes('YM.ST.') && 
            key !== 'GLV01' && 
            key !== '150 03' && 
            key !== 'SM.HİDROLİK.ASİT'
          );
          
          // Excel formatına tam uygun sırada ekle - HER ZAMAN SADECE 1 GLV01 OPERASYONu olmalı
          const orderedEntries = [
            ymStEntry ? [mainYmSt.stok_kodu, ymStEntry[1]] : null, // Ana YM ST'yi kullan
            glv01Entry,  // Sadece 1 galvanizleme operasyonu
            cinkoEntry,  // Çinko bileşeni  
            asitEntry,   // Asit bileşeni
            ...otherEntries
          ].filter(Boolean);
          
          for (const [key, value] of orderedEntries) {
            if (value > 0) {
              // Format the value exactly as it would appear in Excel, using points as decimal separators
              let formattedValue = value;
              if (typeof value === 'number') {
                formattedValue = value.toLocaleString('en-US', {
                  minimumFractionDigits: 0,
                  maximumFractionDigits: 5,
                  useGrouping: false // No thousand separators
                });
              }
              
              // Son bir kontrol: ymGtStokKodu'nun sequence'ini doğrula
              const recordSequence = ymGtStokKodu.split('.').pop();
              if (recordSequence !== mmGtSequence) {
                console.error(`YMGT Sequence uyuşmazlığı! Reçete kaydediliyor: ${recordSequence}, olması gereken: ${mmGtSequence}`);
                
                // Sequence farklıysa doğru sequence ile düzelt - ÇOK ÖNEMLİ
                const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
                const updatedYmGtStokKodu = `YM.GT.${mmGtData.kod_2}.${capFormatted}.${mmGtSequence}`;
                
                // YMGT veritabanındaki kaydı güncelle
                try {
                  console.warn(`YMGT stok_kodu son kez düzeltiliyor: ${ymGtStokKodu} → ${updatedYmGtStokKodu}`);
                  
                  await fetchWithAuth(`${API_URLS.galYmGt}/${ymGtId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                      ...generateYmGtDatabaseData(mmGtSequence),
                      stok_kodu: updatedYmGtStokKodu
                    })
                  });
                  
                  // Güncellenmiş kodu kullan
                  ymGtStokKodu = updatedYmGtStokKodu;
                  console.log(`YMGT stok_kodu güncellendi: ${ymGtStokKodu}`);
                } catch (updateError) {
                  console.error(`YMGT kaydı güncellenirken hata: ${updateError.message}`);
                }
              }
              
              console.log(`YMGT reçete kaydı: ${existingYmGt.id}, ${ymGtStokKodu}, ${key}, ${formattedValue}`);
              
              // BURADA ÖNEMLİ: YMGT reçeteleri için her zaman doğru sequence'i içeren mamul_kodu kullanmak çok önemli
              console.log(`YMGT REÇETE EKLEME (FIX): mamul_kodu=${ymGtStokKodu}, bilesen_kodu=${key}, ym_gt_id=${existingYmGt.id}`);
              
              // Son bir kez daha kontrol et - YMGT'nin stok_kodu ile tamamıyla aynı olmasını garantile
              // Liste yaklaşımını kullan - 404 hatasını önlemek için
              const allYmGtResponse = await fetchWithAuth(API_URLS.galYmGt);
              if (allYmGtResponse && allYmGtResponse.ok) {
                const allYmGt = await allYmGtResponse.json();
                const doubleCheckYmGt = Array.isArray(allYmGt) ? allYmGt.find(item => item.id === existingYmGt.id) : null;
                if (doubleCheckYmGt && doubleCheckYmGt.stok_kodu) {
                  if (doubleCheckYmGt.stok_kodu !== ymGtStokKodu) {
                    console.warn(`UYARI! YMGT stok_kodu (${doubleCheckYmGt.stok_kodu}) ile reçete mamul_kodu (${ymGtStokKodu}) eşleşmiyor!`);
                    
                    // Tutarsızlığı çöz - stok tablosundaki kodu kullanmak yerine, stok tablosunu düzeltmeyi dene
                    const dbSequence = doubleCheckYmGt.stok_kodu.split('.').pop();
                    if (dbSequence !== mmGtSequence) {
                      // MMGT'den gelen sequence'i kullanmalıyız - veritabanını düzelt!
                      try {
                        console.warn(`YMGT stok tablosundaki kaydı düzeltme girişimi: ${doubleCheckYmGt.stok_kodu} → ${ymGtStokKodu}`);
                        
                        await fetchWithAuth(`${API_URLS.galYmGt}/${existingYmGt.id}`, {
                          method: 'PUT',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({
                            ...generateYmGtDatabaseData(mmGtSequence),
                            stok_kodu: ymGtStokKodu
                          })
                        });
                        
                        console.log(`YMGT stok tablosu doğru sequence (${mmGtSequence}) ile güncellendi: ${ymGtStokKodu}`);
                      } catch (error) {
                        console.error(`YMGT stok tablosu güncellenirken hata: ${error.message}`);
                        
                        // Güncellenemezse mevcut veritabanı kodunu kullan
                        ymGtStokKodu = doubleCheckYmGt.stok_kodu;
                        console.log(`YMGT reçetesi için veritabanındaki stok_kodu kullanılacak: ${ymGtStokKodu}`);
                      }
                    } else {
                      // Eşit sequence değerleri, ama farklı stok_kodu - veritabanındaki kodu kullan
                      ymGtStokKodu = doubleCheckYmGt.stok_kodu;
                      console.log(`YMGT reçetesi için veritabanındaki stok_kodu kullanılacak: ${ymGtStokKodu}`);
                    }
                  } else {
                    console.log(`ONAY: YMGT stok_kodu ve reçete mamul_kodu eşleşiyor: ${ymGtStokKodu}`);
                  }
                } else {
                  console.warn(`UYARI: YMGT stok kaydında stok_kodu bulunamadı!`);
                }
              } else {
                console.warn(`UYARI: YMGT stok kaydına erişilemedi!`);
              }
              
              // Tüm parametreleri logla
              const receteParams = {
                ym_gt_id: existingYmGt.id,
                mamul_kodu: ymGtStokKodu, // ÖNEMLİ: Her zaman doğru sequence ile güncel mamul_kodu
                bilesen_kodu: key,
                miktar: formattedValue,
                sira_no: siraNo++,
                operasyon_bilesen: key.includes('01') ? 'Operasyon' : 'Bileşen',
                olcu_br: getOlcuBr(key),
              };
              console.log("YMGT REÇETE PARAMETRE KONTROLÜ:", JSON.stringify(receteParams));
              
              // Başka bir reçete ile çakışma olabilir mi kontrol et
              try {
                const checkResponse = await fetchWithAuth(`${API_URLS.galYmGtRecete}?ym_gt_id=${existingYmGt.id}`);
                if (checkResponse && checkResponse.ok) {
                  const existingRecipes = await checkResponse.json();
                  const conflictRecipe = existingRecipes.find(r => r.bilesen_kodu === key && r.mamul_kodu !== ymGtStokKodu);
                  if (conflictRecipe) {
                    console.error(`ÇAKIŞMA! Farklı mamul_kodu ile YMGT reçete mevcut: ${conflictRecipe.mamul_kodu} (silinecek)`);
                    try {
                      await fetchWithAuth(`${API_URLS.galYmGtRecete}/${conflictRecipe.id}`, { method: 'DELETE' });
                    } catch (deleteError) {
                      console.error(`Çakışan YMGT reçetesi silinemedi: ${deleteError.message}`);
                      // Silme hatasına rağmen devam et
                    }
                  }
                } else if (checkResponse && checkResponse.status === 404) {
                  // 404 hatası - reçete hiç yok, sorun değil, devam et
                  console.log(`YMGT reçeteleri henüz oluşturulmamış (404) - çakışma kontrolüne gerek yok`);
                } else {
                  // Diğer API hataları
                  console.warn(`YMGT reçeteleri sorgulanamadı - HTTP ${checkResponse ? checkResponse.status : 'unknown'}`);
                }
              } catch (checkError) {
                console.error(`YMGT reçete çakışması kontrol edilirken hata: ${checkError.message}`);
                // Hata durumunda bile işleme devam et
              }
              
              // Reçeteyi oluşturmaya devam et
              try {
                console.log(`YMGT reçetesi kaydediliyor: ${existingYmGt.id}, ${ymGtStokKodu}, ${key}`);
                const saveResponse = await fetchWithAuth(API_URLS.galYmGtRecete, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    ...receteParams,
                    olcu_br_bilesen: '1',
                    aciklama: getReceteAciklama(key),
                    recete_top: 1,
                    fire_orani: 0.0004, // Match Excel format
                    ua_dahil_edilsin: 'evet',
                    son_operasyon: 'evet',
                    // Additional fields for better Netsis compatibility - match Excel format
                    miktar_sabitle: 'H',
                    stok_maliyet: 'S',
                    fire_mik: '0',
                    sabit_fire_mik: '0',
                    istasyon_kodu: '',
                    hazirlik_suresi: key.includes('01') ? 0 : null,
                    uretim_suresi: key.includes('01') ? formattedValue : null, // Use formatted value
                    oncelik: '0',
                    planlama_orani: '100',
                    alt_pol_da_transfer: 'H',
                    alt_pol_ambar_cikis: 'H',
                    alt_pol_uretim_kaydi: 'H',
                    alt_pol_mrp: 'H',
                    ic_dis: 'I'
                  })
                });
                
                if (saveResponse && saveResponse.ok) {
                  console.log(`YMGT reçetesi başarıyla kaydedildi: ${key}`);
                } else {
                  console.error(`YMGT reçetesi kaydedilemedi: ${key}, HTTP ${saveResponse ? saveResponse.status : 'unknown'}`);
                }
              } catch (saveError) {
                console.error(`YMGT reçetesi kaydedilirken hata: ${saveError.message}`);
                // Kaydetme hatası oluşsa bile diğer reçeteleri eklemeye devam et
              }
            }
          }
        }
      }
      
      // Tüm YM ST reçetelerini kaydet - Excel formatıyla tam uyumlu
      for (let i = 0; i < ymStIds.length; i++) {
        const ymStId = ymStIds[i];
        const ymSt = [...selectedYmSts, ...autoGeneratedYmSts][i];
        const ymStRecipe = allRecipes.ymStRecipes[i] || {};
        
        // YM ST verisini kontrol et
        if (!ymSt || !ymSt.stok_kodu) {
          console.error(`YMST ${ymStId} için geçerli stok_kodu bulunamadı!`);
          continue; // Bir sonraki YMST'ye geç
        }

        // Kritik düzeltme - stok_kodu kullanarak direkt arama yap, ID kullanma
        // Bu yaklaşım hem 404 hem de 409 hatalarını ortadan kaldırır
        try {
          // Önce stok_kodu ile doğrudan ara - bu en güvenilir yaklaşım
          console.log(`YMST için stok_kodu ile arama yapılıyor: ${ymSt.stok_kodu}`);
          const searchResponse = await fetchWithAuth(`${API_URLS.galYmSt}?stok_kodu=${encodeURIComponent(ymSt.stok_kodu)}`);
          
          let actualYmStId = null;
          
          if (searchResponse && searchResponse.ok) {
            const searchResults = await searchResponse.json();
            
            if (Array.isArray(searchResults) && searchResults.length > 0) {
              // Mevcut kaydın ID'sini kullan
              actualYmStId = searchResults[0].id;
              console.log(`✅ YMST stok_kodu ile bulundu: ${ymSt.stok_kodu}, ID: ${actualYmStId}`);
              
              // YmStIds dizisini güncelle
              ymStIds[i] = actualYmStId;
            } else {
              // Kayıt bulunamadı - yeni oluştur
              console.log(`YMST bulunamadı, yeni oluşturuluyor: ${ymSt.stok_kodu}`);
              
              try {
                const createResponse = await fetchWithAuth(API_URLS.galYmSt, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(generateYmStDatabaseData(ymSt))
                });
                
                if (createResponse && createResponse.ok) {
                  const result = await createResponse.json();
                  actualYmStId = result.id;
                  console.log(`✅ YMST başarıyla oluşturuldu: ${ymSt.stok_kodu}, ID: ${actualYmStId}`);
                  
                  // YmStIds dizisini güncelle
                  ymStIds[i] = actualYmStId;
                } 
                // 409 Conflict - kaydın zaten var olması durumu
                else if (createResponse && createResponse.status === 409) {
                  console.log(`⚠️ YMST zaten mevcut (409 Conflict), tam tüm YMST'leri getirmeyi dene`);
                  
                  // Alternatif yaklaşım: stok_kodu_like ile ara
                  try {
                    const baseCode = ymSt.stok_kodu.split('.').slice(0, 3).join('.');
                    const likeResponse = await fetchWithAuth(`${API_URLS.galYmSt}?stok_kodu_like=${encodeURIComponent(baseCode)}`);
                    
                    if (likeResponse && likeResponse.ok) {
                      const likeResults = await likeResponse.json();
                      
                      // Tam eşleşme ara
                      const exactMatch = likeResults.find(item => item.stok_kodu === ymSt.stok_kodu);
                      
                      if (exactMatch) {
                        actualYmStId = exactMatch.id;
                        console.log(`✅ YMST stok_kodu_like ile tam eşleşme: ${ymSt.stok_kodu}, ID: ${actualYmStId}`);
                      } else if (likeResults.length > 0) {
                        // En yakın eşleşmeyi kullan
                        actualYmStId = likeResults[0].id;
                        console.log(`⚠️ YMST için yakın eşleşme kullanılıyor: ${likeResults[0].stok_kodu}, ID: ${actualYmStId}`);
                      } else {
                        console.error(`❌ YMST için uygun kayıt bulunamadı! İşlem atlanıyor: ${ymSt.stok_kodu}`);
                        continue; // Bu YMST için işlemi atla
                      }
                      
                      // YmStIds dizisini güncelle
                      ymStIds[i] = actualYmStId;
                    } else {
                      console.error(`❌ YMST aramada hata: HTTP ${likeResponse ? likeResponse.status : 'unknown'}`);
                      continue; // Bu YMST için işlemi atla
                    }
                  } catch (likeError) {
                    console.error(`❌ YMST stok_kodu_like araması sırasında hata: ${likeError.message}`);
                    continue; // Bu YMST için işlemi atla  
                  }
                } else {
                  console.error(`❌ YMST oluşturulamadı: HTTP ${createResponse ? createResponse.status : 'unknown'}`);
                  continue; // Bu YMST için işlemi atla
                }
              } catch (createError) {
                console.error(`❌ YMST oluşturma hatası: ${createError.message}`);
                continue; // Bu YMST için işlemi atla
              }
            }
          } else {
            console.error(`❌ YMST arama hatası: HTTP ${searchResponse ? searchResponse.status : 'unknown'}`);
            continue; // Bu YMST için işlemi atla
          }
          
          // Bu noktada artık doğru ID'ye sahip olmalıyız
          if (!actualYmStId) {
            console.error(`❌ YMST için geçerli ID bulunamadı: ${ymSt.stok_kodu}`);
            continue; // Bu YMST için işlemi atla
          }
          
          // ID'yi güncelle - çok önemli
          ymStIds[i] = actualYmStId;
          
          // Doğru ID ile reçeteleri sil
          console.log(`🧹 YMST reçeteleri siliniyor: ID=${actualYmStId}`);
          await deleteExistingRecipes('ymst', actualYmStId);
          
          let siraNo = 1;
          
          // YMST reçete sıralaması - Excel formatına uygun kesin sıralama 
          // Sıralama: 1. FLM, 2. TLC01 (tam bu sıra)
          const recipeEntries = Object.entries(ymStRecipe);
          
          // Filmaşin kodu doğru formatta olmalı
          const flmEntry = recipeEntries.find(([key]) => key.includes('FLM.'));
          if (flmEntry) {
            // Filmaşin formatını kontrol et: FLM.XXXX.XXXX (örn. FLM.0550.1006)
            const flmKey = flmEntry[0];
            // Doğru format: FLM.XXXX.XXXX şeklinde olmalı, nokta ile ayrılmalı
            if (!flmKey.match(/^FLM\.\d{4}\.\d{4}$/)) {
              console.warn(`⚠️ FLM kodu hatalı formatta: ${flmKey}, düzeltilmeli`);
            }
          }
          
          const tlc01Entry = recipeEntries.find(([key]) => key === 'TLC01');
          
          // Diğer bileşenler - normalde yoktur ama güvenlik için
          const otherEntries = recipeEntries.filter(([key]) => 
            !key.includes('FLM.') && key !== 'TLC01'
          );
          
          // Kesinlikle Excel sıralamasına uygun olacak şekilde ekle
          // FLM her zaman önce, TLC01 her zaman ikinci sırada
          const orderedEntries = [flmEntry, tlc01Entry, ...otherEntries].filter(Boolean);
          
          // Eğer orderedEntries içinde sadece bir tane FLM ve bir tane TLC01 yoksa uyarı ver
          if (!flmEntry) {
            console.error(`❌ HATA: YMST reçetesinde FLM bileşeni bulunamadı!`);
          }
          
          if (!tlc01Entry) {
            console.error(`❌ HATA: YMST reçetesinde TLC01 operasyonu bulunamadı!`);
          }
          
          // Reçete girdisi yoksa uyarı ver ve devam et
          if (orderedEntries.length === 0) {
            console.warn(`YMST ${ymStId} için eklenecek reçete bulunmadı!`);
            continue; // Bir sonraki YMST'ye geç
          }
          
          for (const [key, value] of orderedEntries) {
            if (value > 0) {
              // Format the value exactly as it would appear in Excel, using points as decimal separators
              let formattedValue = value;
              if (typeof value === 'number') {
                formattedValue = value.toLocaleString('en-US', {
                  minimumFractionDigits: 0,
                  maximumFractionDigits: 5,
                  useGrouping: false // No thousand separators
                });
              }
              
              // Reçete parametrelerini hazırla
              // DÜZELTME: YM.ST.xxxx formatındaki kodlar yanlışlıkla Operasyon olarak işaretlenmesin
              const isOperation = key === 'TLC01' || key === 'GLV01' || (key.includes('01') && !key.includes('YM.ST.'));
              
              console.log(`📊 YMST Bileşen sınıflandırması: ${key} -> ${isOperation ? 'Operasyon' : 'Bileşen'}`);
              
              const receteParams = {
                ym_st_id: ymStId,
                mamul_kodu: ymSt.stok_kodu,
                bilesen_kodu: key,
                miktar: formattedValue, // Use formatted value to match Excel
                sira_no: siraNo++,
                operasyon_bilesen: isOperation ? 'Operasyon' : 'Bileşen',
                olcu_br: getOlcuBr(key),
                olcu_br_bilesen: '1',
                aciklama: getReceteAciklama(key),
                recete_top: 1,
                fire_orani: 0.0004, // Match Excel format
                ua_dahil_edilsin: 'evet',
                son_operasyon: 'evet',
                // Additional fields for better Netsis compatibility - match Excel
                miktar_sabitle: 'H',
                stok_maliyet: 'S',
                fire_mik: '0',
                sabit_fire_mik: '0',
                istasyon_kodu: '',
                hazirlik_suresi: key.includes('01') ? 0 : null,
                uretim_suresi: key.includes('01') ? formattedValue : null, // Use formatted value
                oncelik: '0',
                planlama_orani: '100',
                alt_pol_da_transfer: 'H',
                alt_pol_ambar_cikis: 'H',
                alt_pol_uretim_kaydi: 'H',
                alt_pol_mrp: 'H',
                ic_dis: 'I'
              };
              
              // Parametre kontrolü
              console.log("YMST REÇETE PARAMETRE KONTROLÜ:", JSON.stringify(receteParams));
              
              // Çakışabilecek mevcut reçeteleri kontrol et
              try {
                const checkResponse = await fetchWithAuth(`${API_URLS.galYmStRecete}?ym_st_id=${ymStId}`);
                if (checkResponse && checkResponse.ok) {
                  const existingRecipes = await checkResponse.json();
                  const conflictRecipe = existingRecipes.find(r => r.bilesen_kodu === key && r.mamul_kodu !== ymSt.stok_kodu);
                  if (conflictRecipe) {
                    console.error(`ÇAKIŞMA! Farklı mamul_kodu ile YMST reçete mevcut: ${conflictRecipe.mamul_kodu} (silinecek)`);
                    try {
                      await fetchWithAuth(`${API_URLS.galYmStRecete}/${conflictRecipe.id}`, { method: 'DELETE' });
                    } catch (deleteError) {
                      console.error(`Çakışan YMST reçetesi silinemedi: ${deleteError.message}`);
                    }
                  }
                }
              } catch (checkError) {
                console.error(`YMST reçeteleri kontrol edilirken hata: ${checkError.message}`);
                // Hataya rağmen devam et
              }
              
              try {
                console.log(`YMST reçetesi kaydediliyor: ${ymStId}, ${ymSt.stok_kodu}, ${key}`);
                const receteResponse = await fetchWithAuth(API_URLS.galYmStRecete, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(receteParams)
                });
                
                if (receteResponse && receteResponse.ok) {
                  console.log(`YMST reçetesi başarıyla kaydedildi: ${key}`);
                } else {
                  const statusCode = receteResponse ? receteResponse.status : 'unknown';
                  console.error(`YMST reçetesi kaydedilemedi: ${key}, hata kodu: ${statusCode}`);
                  
                  if (statusCode === 409) {
                    console.warn(`Muhtemelen reçete zaten mevcut. Devam ediliyor.`);
                  }
                }
              } catch (saveError) {
                console.error(`YMST reçetesi kaydedilirken hata: ${saveError.message}`);
                // Hataya rağmen devam et
              }
            }
          }
        } catch (mainError) {
          console.error(`YMST ${ymStId} reçete işlemleri sırasında genel hata:`, mainError.message);
          // Hata ile karşılaşılsa bile diğer YMST'ler için devam et
          continue;
        }
      }
    } catch (error) {
      console.error('Reçete kaydetme hatası:', error);
      throw error;
    }
  };

  /**
   * MMGT ve YMGT reçeteleri için stok kodu kontrolü ve düzeltme
   * Bu fonksiyon, mamul_kodu ile eşleşmeyen reçeteleri siler
   */
  const checkAndFixStokKodu = async (productType, productId, expectedStokKodu) => {
    if (!productId || !expectedStokKodu) {
      console.error(`${productType} ID veya stok_kodu eksik!`);
      return;
    }
    
    let apiUrl = '';
    let paramName = '';
    
    if (productType === 'mmgt') {
      apiUrl = API_URLS.galMmGtRecete;
      paramName = 'mm_gt_id';
    } else if (productType === 'ymgt') {
      apiUrl = API_URLS.galYmGtRecete;
      paramName = 'ym_gt_id';
    } else {
      console.error(`Geçersiz ürün tipi: ${productType}`);
      return;
    }
    
    try {
      // URL'yi doğru oluştur - sorgu parametre adını ve ürün ID'sini kontrol et
      const queryUrl = `${apiUrl}?${paramName}=${encodeURIComponent(productId)}`;
      console.log(`🔍 ${productType.toUpperCase()} reçeteleri kontrol ediliyor. Sorgu URL: ${queryUrl}`);
      
      // Tüm mevcut reçeteleri getir
      const allRecipesResponse = await fetchWithAuth(queryUrl);
      
      if (allRecipesResponse && allRecipesResponse.ok) {
        const allRecipesData = await allRecipesResponse.json();
        console.log(`${allRecipesData.length} adet ${productType.toUpperCase()} reçetesi bulundu`);
        
        // Her reçeteyi kontrol et, yanlış mamul_kodu içerenleri sil
        for (const recipe of allRecipesData) {
          if (recipe.mamul_kodu !== expectedStokKodu) {
            console.log(`YANLIŞ MAMUL_KODU ${productType.toUpperCase()} reçetesi siliniyor: ID=${recipe.id}, mamul_kodu=${recipe.mamul_kodu}, doğrusu=${expectedStokKodu}`);
            try {
              await fetchWithAuth(`${apiUrl}/${recipe.id}`, { method: 'DELETE' });
            } catch (deleteError) {
              console.error(`${productType.toUpperCase()} reçetesi silinemedi: ${deleteError.message}`);
            }
          }
        }
      } else {
        if (allRecipesResponse && allRecipesResponse.status === 404) {
          console.log(`${productType.toUpperCase()} için reçete bulunamadı (404) - silinecek reçete yok`);
        } else {
          console.warn(`${productType.toUpperCase()} reçeteleri alınamadı: HTTP ${allRecipesResponse ? allRecipesResponse.status : 'unknown'}`);
          
          // Alternatif yaklaşım: tüm reçeteleri getir ve filtrele
          try {
            console.log(`🔄 Alternatif yöntem: Tüm ${productType.toUpperCase()} reçetelerini getirip filtreleme deneniyor...`);
            const alternativeResponse = await fetchWithAuth(apiUrl);
            
            if (alternativeResponse && alternativeResponse.ok) {
              const allRecipes = await alternativeResponse.json();
              const filteredRecipes = allRecipes.filter(recipe => recipe[paramName] === productId);
              
              console.log(`✅ Alternatif yöntemle ${filteredRecipes.length} reçete bulundu`);
              
              // Yanlış mamul_kodu içeren reçeteleri sil
              for (const recipe of filteredRecipes) {
                if (recipe.mamul_kodu !== expectedStokKodu) {
                  console.log(`YANLIŞ MAMUL_KODU ${productType.toUpperCase()} reçetesi siliniyor: ID=${recipe.id}, mamul_kodu=${recipe.mamul_kodu}, doğrusu=${expectedStokKodu}`);
                  try {
                    await fetchWithAuth(`${apiUrl}/${recipe.id}`, { method: 'DELETE' });
                  } catch (deleteError) {
                    console.error(`${productType.toUpperCase()} reçetesi silinemedi: ${deleteError.message}`);
                  }
                }
              }
            } else {
              console.warn(`Alternatif yöntemle de ${productType.toUpperCase()} reçeteleri alınamadı`);
            }
          } catch (alternativeError) {
            console.error(`Alternatif yöntem hatası:`, alternativeError.message);
          }
        }
      }
    } catch (error) {
      console.error(`${productType.toUpperCase()} reçeteleri kontrol edilirken hata:`, error);
      // Hata durumunda işleme devam et
    }
  };

  // Mevcut reçeteleri sil - 404 hata yönetimi ile geliştirilmiş versiyon
  const deleteExistingRecipes = async (type, productId) => {
    try {
      if (!productId) {
        console.log(`Ürün ID'si geçersiz, reçete silme işlemi atlanıyor`);
        return;
      }
      
      let apiUrl = '';
      let paramName = '';
      let typeLabel = '';
      
      if (type === 'mmgt') {
        apiUrl = API_URLS.galMmGtRecete;
        paramName = 'mm_gt_id';
        typeLabel = 'MMGT';
      } else if (type === 'ymgt') {
        apiUrl = API_URLS.galYmGtRecete;
        paramName = 'ym_gt_id';
        typeLabel = 'YMGT';
      } else if (type === 'ymst') {
        apiUrl = API_URLS.galYmStRecete;
        paramName = 'ym_st_id';
        typeLabel = 'YMST';
      }
      
      console.log(`${typeLabel} reçeteleri aranıyor: ${paramName}=${productId}`);
      
      // URL'yi doğru oluştur - sorgu parametre adını ve ürün ID'sini kontrol et
      const queryUrl = `${apiUrl}?${paramName}=${encodeURIComponent(productId)}`;
      console.log(`🔍 Sorgu URL: ${queryUrl}`);
      
      // 404 hata durumunda alternatif yöntem kullan
      let recipes = [];
      try {
        const response = await fetchWithAuth(queryUrl);
        
        // Yanıt varsa ve başarılıysa
        if (response && response.ok) {
          recipes = await response.json();
          console.log(`${typeLabel} için ${recipes.length} reçete bulundu`);
        } 
        // 404 hatası veya başka bir hata durumunda
        else {
          const status = response ? response.status : 'unknown';
          console.log(`${typeLabel} için reçete bulunamadı - ${status} yanıtı alındı`);
          
          // 404 hatası durumunda boş dizi döndür ve işleme devam et
          if (status === 404) {
            console.log(`${typeLabel} için reçete bulunamadı (404) - yeni reçeteler oluşturulacak`);
            return; // Hiç reçete yoksa silmeye gerek yok
          }
        }
      } catch (fetchError) {
        console.error(`${typeLabel} reçeteleri aranırken hata:`, fetchError.message);
        
        // HATA DURUMUNDA ALTERNATIF YÖNTEM: Tüm reçete listesini getir ve filtrele
        try {
          console.log(`🔄 Alternatif yöntem: Tüm ${typeLabel} reçetelerini getirip filtreleme deneniyor...`);
          const allRecipesResponse = await fetchWithAuth(`${apiUrl}`);
          
          if (allRecipesResponse && allRecipesResponse.ok) {
            const allRecipes = await allRecipesResponse.json();
            if (Array.isArray(allRecipes) && allRecipes.length > 0) {
              // İlgili ürüne ait reçeteleri filtrele
              recipes = allRecipes.filter(recipe => recipe[paramName] === productId);
              console.log(`✅ Alternatif yöntemle ${recipes.length} reçete bulundu`);
            } else {
              console.log(`${typeLabel} tablosunda hiç reçete bulunmadı - silmeye gerek yok`);
              return;
            }
          } else {
            console.log(`Tüm ${typeLabel} reçeteleri getirilemedi - silme işlemi atlanıyor`);
            return;
          }
        } catch (alternativeError) {
          console.error(`Alternatif yöntem hatası:`, alternativeError.message);
          // Hata durumunda işleme devam et - reçeteler boş dizi olarak kalsın
          console.log(`Hata nedeniyle ${typeLabel} reçeteleri silinemeyecek - işleme devam ediliyor`);
          return;
        }
      }
      
      // Eğer hiç reçete bulunmazsa mesaj göster ve çık
      if (!recipes || recipes.length === 0) {
        console.log(`${typeLabel} için silinecek reçete bulunamadı`);
        return;
      }
      
      // Reçeteleri tek tek silmeyi dene
      let successCount = 0;
      let errorCount = 0;
      
      for (const recipe of recipes) {
        console.log(`${typeLabel} reçete siliniyor: ID=${recipe.id}, mamul_kodu=${recipe.mamul_kodu}, bilesen_kodu=${recipe.bilesen_kodu}`);
        try {
          const deleteResponse = await fetchWithAuth(`${apiUrl}/${recipe.id}`, { method: 'DELETE' });
          
          if (deleteResponse && deleteResponse.ok) {
            successCount++;
          } else {
            console.error(`${typeLabel} reçetesi silinemedi: ID=${recipe.id}, HTTP ${deleteResponse ? deleteResponse.status : 'unknown'}`);
            errorCount++;
          }
        } catch (deleteError) {
          console.error(`${typeLabel} reçetesi silinirken hata: ${deleteError.message}`);
          errorCount++;
          // Silme hatası oluşsa bile diğer reçeteleri silmeye devam et
        }
      }
      
      // Özet bilgisi göster
      if (successCount > 0) {
        console.log(`${typeLabel} reçeteleri silindi: ${successCount} başarılı, ${errorCount} hatalı`);
      } else if (errorCount > 0) {
        console.warn(`${typeLabel} reçetelerinden hiçbiri silinemedi! (${errorCount} hata)`);
      } else {
        console.log(`${typeLabel} için işlem yapılacak reçete bulunmadı`);
      }
    } catch (error) {
      console.error(`${type.toUpperCase()} reçeteleri silinirken genel hata:`, error);
      // Genel hata durumunda bile işleme devam etmesine izin ver
    }
  };

  // Ölçü birimi alma fonksiyonu
  const getOlcuBr = (bilesen) => {
    // For YM GT readonly component always show KG
    if (bilesen === 'readonly') return 'KG';
    
    // For process codes with 01 suffix, typically times
    if (bilesen === 'GTPKT01' || bilesen === 'TLC01') return 'DK';
    
    // All other cases return KG for material weight
    if (bilesen.includes('03') || bilesen.includes('ASİT') || bilesen.includes('GLV')) return 'KG';
    if (bilesen.includes('KARTON') || bilesen.includes('HALKA') || bilesen.includes('TOKA') || bilesen.includes('DESİ')) return 'AD';
    if (bilesen.includes('CEMBER') || bilesen.includes('SHRİNK')) return 'KG';
    if (bilesen.includes('YM.GT.')) return 'KG';
    if (bilesen.includes('FLM.')) return 'KG';
    return 'KG';
  };

  // Reçete açıklama alma
  const getReceteAciklama = (bilesen) => {
    if (bilesen === 'GTPKT01') return 'Paketleme Operasyonu';
    if (bilesen === 'GLV01') return 'Galvanizleme Operasyonu';
    if (bilesen === 'TLC01') return 'Tel Çekme Operasyonu';
    if (bilesen === '150 03') return 'Çinko Tüketim Miktarı';
    if (bilesen === 'SM.HİDROLİK.ASİT') return 'Asit Tüketim Miktarı';
    if (bilesen.includes('FLM.')) return 'Filmaşin Tüketimi';
    if (bilesen.includes('YM.GT.')) return 'Galvanizli Tel Tüketim Miktarı';
    if (bilesen.includes('KARTON')) return 'Karton Tüketim Miktarı';
    if (bilesen.includes('SHRİNK')) return 'Naylon Tüketim Miktarı';
    if (bilesen.includes('HALKA')) return 'Kaldırma Kancası Tüketim Miktarı';
    if (bilesen.includes('CEMBER')) return 'Çelik çember Tüketim Miktarı';
    if (bilesen.includes('TOKA')) return 'Çember Tokası Tüketim Miktarı';
    if (bilesen.includes('DESİ')) return 'Slikajel Tüketim Miktarı';
    return 'Tüketim Miktarı';
  };

  // Filmaşin kodu oluştur - Excel formatına tam uyumlu
  const getFilmasinKodu = (ymSt) => {
    if (!ymSt) return 'FLM.0600.1006';
    
    // Get cap and determine appropriate filmasin type
    const cap = parseFloat(ymSt.cap) || parseFloat(mmGtData.cap) || 0;
    let filmasin = ymSt.filmasin ? ymSt.filmasin.toString() : getFilmasinForCap(cap);
    
    // Ensure 4 digits with leading zeros - Excel formatı için önemli!
    // Format: XXXX (0550, 0600, 0700, etc.)
    const filmasinNumber = parseInt(filmasin, 10);
    filmasin = filmasinNumber.toString().padStart(4, '0');
    
    // Get quality based on cap or use default
    let quality = ymSt.quality || getQualityForCap(cap) || '1006';
    
    // DÜZELTME: Format kontrolü - Excel formatıyla tam uyumlu olmalı
    const filmasinCode = `FLM.${filmasin}.${quality}`;
    
    // Doğru format kontrolü: FLM.XXXX.XXXX (örn. FLM.0550.1006)
    const validFormat = /^FLM\.\d{4}\.\d{4}$/.test(filmasinCode);
    
    if (!validFormat) {
      console.warn(`⚠️ UYARI: Oluşturulan FLM kodu hatalı formatta: ${filmasinCode}, format düzeltilmeli`);
    }
    
    // Return formatted code in the correct format: FLM.0800.1010
    return filmasinCode;
  };

  // TLC_Hizlar cache - we'll fetch the data from the database
  const [tlcHizlarCache, setTlcHizlarCache] = useState({});
  const [tlcHizlarLoading, setTlcHizlarLoading] = useState(false);

  // Load TLC_Hizlar data from the database when component mounts
  useEffect(() => {
    fetchTlcHizlarData();
  }, []);
  
  // Function to fetch TLC_Hizlar data from the database
  const fetchTlcHizlarData = async () => {
    try {
      setTlcHizlarLoading(true);
      // Check if API endpoint exists
      if (!API_URLS.galTlcHizlar) {
        console.warn('galTlcHizlar API endpoint is not defined, using fallback data');
        setTlcHizlarLoading(false);
        return;
      }
      
      // Try first with CORS proxy (works better with vercel deployments)
      try {
        console.log('Trying to fetch TLC_Hizlar data using CORS proxy...');
        const proxyResponse = await fetchWithCorsProxy(API_URLS.galTlcHizlar, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        
        if (proxyResponse && proxyResponse.ok) {
          const data = await proxyResponse.json();
          
          // Create a lookup table for DÜŞEYARA function
          const lookupMap = {};
          if (Array.isArray(data)) {
            data.forEach(item => {
              const kod = `${item.giris_capi}x${item.cikis_capi}`;
              lookupMap[kod] = item.calisma_hizi;
            });
            
            console.log(`TLC_Hizlar data loaded successfully with ${Object.keys(lookupMap).length} entries (via CORS proxy)`);
            setTlcHizlarCache(lookupMap);
            setTlcHizlarLoading(false);
            return;
          }
        }
      } catch (proxyError) {
        console.warn('CORS proxy fetch failed, trying direct methods:', proxyError);
      }
      
      // Try with standard fetch as second option
      try {
        console.log('Trying to fetch TLC_Hizlar data using standard fetch...');
        const directResponse = await fetch(API_URLS.galTlcHizlar, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' },
          mode: 'cors'
        });
        
        if (directResponse && directResponse.ok) {
          const data = await directResponse.json();
          
          // Create a lookup table for DÜŞEYARA function
          const lookupMap = {};
          if (Array.isArray(data)) {
            data.forEach(item => {
              const kod = `${item.giris_capi}x${item.cikis_capi}`;
              lookupMap[kod] = item.calisma_hizi;
            });
            
            console.log(`TLC_Hizlar data loaded successfully with ${Object.keys(lookupMap).length} entries (via direct fetch)`);
            setTlcHizlarCache(lookupMap);
            setTlcHizlarLoading(false);
            return;
          }
        }
      } catch (directFetchError) {
        console.warn('Direct fetch failed, trying fetchWithAuth:', directFetchError);
      }
      
      // If all previous attempts failed, try with fetchWithAuth
      try {
        console.log('Trying to fetch TLC_Hizlar data using fetchWithAuth...');
        const response = await fetchWithAuth(API_URLS.galTlcHizlar);
        if (response && response.ok) {
          const data = await response.json();
          
          // Create a lookup table for DÜŞEYARA function
          const lookupMap = {};
          if (Array.isArray(data)) {
            data.forEach(item => {
              const kod = `${item.giris_capi}x${item.cikis_capi}`;
              lookupMap[kod] = item.calisma_hizi;
            });
          }
          
          setTlcHizlarCache(lookupMap);
          console.log(`TLC_Hizlar data loaded successfully with ${Object.keys(lookupMap).length} entries (via fetchWithAuth)`);
        } else {
          console.warn('Failed to fetch TLC_Hizlar data, using default fallback values');
          initializeFallbackData();
        }
      } catch (authFetchError) {
        console.warn('Auth fetch failed, using fallback data:', authFetchError);
        initializeFallbackData();
      }
    } catch (error) {
      console.error('Error fetching TLC_Hizlar data:', error);
      initializeFallbackData();
    } finally {
      setTlcHizlarLoading(false);
    }
  };
  
  // Initialize fallback data in case API fails
  const initializeFallbackData = () => {
    // Static fallback data for most common sizes
    const fallbackData = {
      "7x5": 10.5,
      "7x5.5": 11,
      "7x6": 11,
      "8x6": 11,
      "8x6.5": 11,
      "8x7": 11.5,
      "9x7": 10.5,
      "9x7.5": 10.5,
      "9x8": 10,
      "10x7.92": 10,
      "10x8": 10
    };
    
    console.log("Using static fallback data for TLC_Hizlar");
    setTlcHizlarCache(fallbackData);
  };
  
  // No fallback data - using only database table

  // DÜŞEYARA (VLOOKUP) function implementation using only database data
  const duseyaraLookup = (lookupValue, rangeArray, columnIndex, exactMatch = true) => {
    // Fallback values for specific lookups - Handle known missing data
    const fallbackValues = {
      "10x8": 10,        // Common wire size with fallback value 10
      "10x7.92": 10,     // Common wire size with fallback value 10
      "7x5": 10.5,       // Common wire size with fallback value 10.5
      "7x6": 11,         // Common wire size with fallback value 11
      "8x6": 11,         // Common wire size with fallback value 11
      "8x7": 11.5,       // Common wire size with fallback value 11.5
      "9x7": 10.5,       // Common wire size with fallback value 10.5
      "9x8": 10          // Common wire size with fallback value 10
    };
    
    // Check if we have a fallback value for this exact combination
    if (fallbackValues[lookupValue]) {
      console.log(`Using fallback value for ${lookupValue}: ${fallbackValues[lookupValue]}`);
      return fallbackValues[lookupValue];
    }
    
    // Check if we have database data in the cache
    if (Object.keys(tlcHizlarCache).length > 0) {
      // Database approach: direct lookup by code (format "7x1.25")
      if (tlcHizlarCache[lookupValue]) {
        // We have an exact match in the database
        return tlcHizlarCache[lookupValue];
      }
      
      // No exact match in DB, try to find closest match
      if (!exactMatch) {
        try {
          // Parse lookupValue format "7x1.25" -> [7, 1.25]
          const [hmCap, cap] = lookupValue.split("x").map(Number);
          
          // Find all keys that match the input HM cap 
          const matchingHmCapKeys = Object.keys(tlcHizlarCache).filter(key => {
            try {
              const [keyHmCap] = key.split("x").map(Number);
              return keyHmCap === hmCap;
            } catch (e) {
              console.warn(`Invalid key format: ${key}`);
              return false;
            }
          });
          
          if (matchingHmCapKeys.length > 0) {
            // Sort by closest cap value
            matchingHmCapKeys.sort((a, b) => {
              const [, aCapValue] = a.split("x").map(Number);
              const [, bCapValue] = b.split("x").map(Number);
              return Math.abs(aCapValue - cap) - Math.abs(bCapValue - cap);
            });
            
            // Return the closest match
            return tlcHizlarCache[matchingHmCapKeys[0]];
          }
          
          // If we still don't have a match, try to find closest HM cap
          const allKeys = Object.keys(tlcHizlarCache);
          if (allKeys.length > 0) {
            // Sort by closest HM cap, then by closest cap
            allKeys.sort((a, b) => {
              try {
                const [aHmCap, aCap] = a.split("x").map(Number);
                const [bHmCap, bCap] = b.split("x").map(Number);
                
                const aHmCapDiff = Math.abs(aHmCap - hmCap);
                const bHmCapDiff = Math.abs(bHmCap - hmCap);
                
                if (aHmCapDiff !== bHmCapDiff) {
                  return aHmCapDiff - bHmCapDiff;
                }
                
                return Math.abs(aCap - cap) - Math.abs(bCap - cap);
              } catch (e) {
                console.warn(`Error sorting keys: ${a}, ${b}`);
                return 0;
              }
            });
            
            return tlcHizlarCache[allKeys[0]];
          }
        } catch (error) {
          console.warn(`Error in duseyaraLookup for ${lookupValue}:`, error);
        }
      }
    }
    
    // If we couldn't find a match or have no data, return default or a backup estimate
    console.warn(`No TLC_Hiz match found for ${lookupValue}. Using default value.`);
    
    // For any lookup value with format "Wx1.25", estimate a reasonable value
    try {
      const [hmCap, cap] = lookupValue.split("x").map(Number);
      
      // Basic estimation based on empirical data patterns
      if (hmCap >= 9) {
        return 10;  // Larger HM caps generally have speeds around a default of 10
      } else if (hmCap >= 8) {
        return 11;  // HM cap 8 generally has speeds around 11
      } else if (hmCap >= 7) {
        return 12;  // HM cap 7 generally has speeds around 12
      } else {
        return 12.5; // Smaller HM caps generally have higher speeds
      }
    } catch (e) {
      // If all else fails, return the default
      return 10;
    }
  };
  
  // Calculate YuzeyAlani based on the formula
  const calculateYuzeyAlani = (cap) => {
    // YuzeyAlani: =1000*4000/PI()/'DIA (MM)'/'DIA (MM)'/7.85*'DIA (MM)'*PI()/1000
    return (1000 * 4000 / Math.PI / cap / cap / 7.85 * cap * Math.PI / 1000);
  };
  
  // Calculate total surface area
  const calculateTotalYuzeyAlani = () => {
    // toplam_yuzey_alani= uretim_kapasitesi_aylik *1000*4000/ ortalama_uretim_capi / ortalama_uretim_capi /3.14/7.85* ortalama_uretim_capi *3.14/1000
    const { uretim_kapasitesi_aylik, ortalama_uretim_capi } = userInputValues;
    return uretim_kapasitesi_aylik * 1000 * 4000 / ortalama_uretim_capi / ortalama_uretim_capi / Math.PI / 7.85 * ortalama_uretim_capi * Math.PI / 1000;
  };
  
  // Calculate Durdurma Vinç (DV) based on Min Mukavemet
  const calculateDV = (minMukavemet) => {
    // DV = EĞER('Min Mukavemet'=400;140;EĞER('Min Mukavemet'=500;160;EĞER('Min Mukavemet'=600;180;EĞER'Min Mukavemet'=700;200;"yok"))))
    if (minMukavemet === 400) return 140;
    else if (minMukavemet === 500) return 160;
    else if (minMukavemet === 600) return 180;
    else if (minMukavemet === 700) return 200;
    else return 140; // Use default value instead of null to avoid formula errors
  };

  // Calculate tuketilenAsit
  const calculateTuketilenAsit = () => {
    // tuketilenAsit: = toplam_tuketilen_asit / toplam_yuzey_alani
    const { toplam_tuketilen_asit } = userInputValues;
    const totalYuzeyAlani = calculateTotalYuzeyAlani();
    return totalYuzeyAlani > 0 ? 
      toplam_tuketilen_asit / totalYuzeyAlani : 
      0.0647625; // Default value if totalYuzeyAlani is zero
  };
  
  // Calculate TLC_Hiz based on HM_Cap and Cap values
  // TLC_Hiz= =DÜŞEYARA(BİRLEŞTİR(HM_Cap;"x"; Çap);'TLC_Hızlar'!C:F;4;YANLIŞ)*0.7
  const calculateTlcHiz = (hmCap, cap) => {
    // Format inputs to ensure consistency
    const formattedHmCap = parseFloat(hmCap);
    const formattedCap = parseFloat(cap);
    
    // Create lookup code in format: "7x1.25"
    const lookupCode = `${formattedHmCap}x${formattedCap}`;
    
    // Use DÜŞEYARA (VLOOKUP) to find the closest match from database
    const calismaHizMs = duseyaraLookup(lookupCode, null, null, false);
    
    // Apply the formula: TLC_Hiz = DÜŞEYARA(...) * 0.7
    // Exactly as specified in GalvanizliFormulas.txt
    return calismaHizMs ? calismaHizMs * 0.7 : 7; // Default to 7 (10*0.7) if not found
  };

  // Excel dosyalarını oluştur
  const generateExcelFiles = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      // Talep kullanıldıysa uyarı göster
      if (isRequestUsed) {
        const confirmDelete = window.confirm('Bir talep seçtiniz. Excel dosyalarını oluşturduktan sonra bu talebi silmek ister misiniz?');
        if (confirmDelete && selectedRequest) {
          try {
            await deleteRequest(selectedRequest.id);
            setIsRequestUsed(false);
            setSelectedRequest(null);
          } catch (error) {
            console.error('Talep silme hatası:', error);
            // Talep silinemese bile Excel oluşturmaya devam et
          }
        }
      }
      
      if (![...selectedYmSts, ...autoGeneratedYmSts].length) {
        toast.error('En az bir YM ST seçmelisiniz veya oluşturmalısınız');
        setIsLoading(false);
        return;
      }
      
      // ÖNEMLİ: Önce MMGT ve YMGT için veritabanında aynı key değerlere sahip ürünleri kontrol et
      // Bu şekilde key değişimi olan ürünlerin doğru sequence ile Excel'e eklenmesini sağla
      let sequence = '00';
      let mmGtStokKodu = '';
      
      console.log(`Excel oluşturulurken, key değerlere sahip ürünlerin sequence'i kontrol ediliyor...`);
      
      // 1. Önce tamamen aynı key değerlere sahip ürün için veritabanını sorgula
      const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
      const baseCode = `GT.${mmGtData.kod_2}.${capFormatted}`;
      console.log(`MMGT için baseCode: ${baseCode}`);
      
      try {
        // Aynı key değerlere sahip ürünleri veritabanında ara
        const response = await fetchWithAuth(`${API_URLS.galMmGt}?stok_kodu_like=${encodeURIComponent(baseCode)}`);
        if (response && response.ok) {
          const existingProducts = await response.json();
          console.log(`${existingProducts.length} adet benzer ürün bulundu`);
          
          if (existingProducts.length > 0) {
            // Tamamen aynı ürün var mı kontrol et (stok_kodu ve stok_adi etkileyen tüm değerler)
            const stokAdi = `Galvanizli Tel ${parseFloat(mmGtData.cap).toFixed(2)} mm -${Math.abs(parseFloat(mmGtData.tolerans_minus)).toFixed(2)}/+${parseFloat(mmGtData.tolerans_plus).toFixed(2)} ${mmGtData.kaplama} gr/m² ${mmGtData.min_mukavemet}-${mmGtData.max_mukavemet} MPa ID:${mmGtData.ic_cap} cm OD:${mmGtData.dis_cap} cm ${mmGtData.kg} kg`;
            const normalizedStokAdi = stokAdi.replace(/\s+/g, ' ').trim().toLowerCase();
            
            // Tüm ürünleri kontrol et ve tam eşleşen bir ürün bulmaya çalış
            for (const product of existingProducts) {
              const normalizedProductAdi = product.stok_adi.replace(/\s+/g, ' ').trim().toLowerCase();
              
              // Stok adı ile karşılaştırma
              if (normalizedProductAdi === normalizedStokAdi) {
                // Tam eşleşme bulundu - bu ürünün sequence'ini kullan
                sequence = product.stok_kodu.split('.').pop();
                mmGtStokKodu = product.stok_kodu;
                console.log(`Excel için tam eşleşen ürün bulundu: ${mmGtStokKodu}, Sequence: ${sequence}`);
                break;
              }
            }
            
            // Eğer eşleşen ürün bulunamadıysa, en yüksek sequence'i kullan
            if (sequence === '00' && existingProducts.length > 0) {
              // En yüksek sequence'i bul
              let maxSequence = -1;
              existingProducts.forEach(product => {
                const sequencePart = product.stok_kodu.split('.').pop();
                const sequenceNum = parseInt(sequencePart);
                if (!isNaN(sequenceNum) && sequenceNum > maxSequence) {
                  maxSequence = sequenceNum;
                }
              });
              
              // Yeni ürün için sequence'i artır
              sequence = (maxSequence + 1).toString().padStart(2, '0');
              console.log(`Excel için en yüksek sequence+1 kullanılıyor: ${sequence}`);
            }
          }
        }
      } catch (error) {
        console.error('Veritabanından ürün sorgulanırken hata:', error);
      }
      
      // 2. Eğer veritabanında ürün bulunamadıysa veya sequence hala 00 ise kayıtlı ürünleri kontrol et
      if (sequence === '00' && savedToDatabase && databaseIds && databaseIds.mmGtIds && databaseIds.mmGtIds[0]) {
        // Kayıtlı ürünün stok kodundan sequence'i al
        const savedMmGtResponse = await fetchWithAuth(`${API_URLS.galMmGt}/${databaseIds.mmGtIds[0]}`);
        if (savedMmGtResponse && savedMmGtResponse.ok) {
          const savedMmGt = await savedMmGtResponse.json();
          if (savedMmGt && savedMmGt.stok_kodu) {
            sequence = savedMmGt.stok_kodu.split('.').pop();
            mmGtStokKodu = savedMmGt.stok_kodu;
            console.log(`Excel için kaydedilmiş MMGT'den sequence alındı: ${sequence}`);
          }
        }
      }
      
      // 3. Hala sequence belirlenemediyse yeni hesapla
      if (sequence === '00') {
        try {
          // checkForExistingProducts fonksiyonu zaten mevcut ürünleri kontrol eder
          const nextSequence = await checkForExistingProducts(
            mmGtData.cap,
            mmGtData.kod_2,
            mmGtData.kaplama,
            mmGtData.min_mukavemet,
            mmGtData.max_mukavemet,
            mmGtData.kg
          );
          sequence = nextSequence.toString().padStart(2, '0');
          console.log(`Excel için yeni sequence hesaplandı: ${sequence}`);
        } catch (error) {
          console.error('Sequence hesaplama hatası:', error);
          sequence = '00'; // En son çare olarak 00 kullan
        }
      }
      
      console.log(`Excel oluşturma için KULLANILACAK SEQUENCE: ${sequence}`);
      if (sequence === '00') {
        console.warn(`UYARI: Excel oluşturma için '00' sequence'i kullanılıyor. Bu istenmeyen bir durum olabilir.`);
      }
      
      // Her iki Excel'de de aynı sequence'i kullan
      // Stok Kartı Excel
      await generateStokKartiExcel(sequence);
      
      // Reçete Excel
      await generateReceteExcel(sequence);
      
      setSuccessMessage('Excel dosyaları başarıyla oluşturuldu');
      toast.success('Excel dosyaları başarıyla oluşturuldu');
    } catch (error) {
      console.error('Excel oluşturma hatası:', error);
      setError('Excel oluşturma hatası: ' + error.message);
      toast.error('Excel oluşturma hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Stok Kartı Excel oluştur - yeni 1:1:n ilişki modeli ile
  const generateStokKartiExcel = async (sequence = '00') => {
    const workbook = new ExcelJS.Workbook();
    const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
    
    // Ana YM ST'yi belirle (ya seçilmiş ya da otomatik oluşturulmuş)
    const mainYmSt = allYmSts[mainYmStIndex] || allYmSts[0];
    
    console.log(`Stok Kartı Excel oluşturuluyor, sequence: ${sequence}`);
    
    // MM GT Sheet - Artık sadece 1 tane MM GT
    const mmGtSheet = workbook.addWorksheet('MM GT');
    const mmGtHeaders = getStokKartiHeaders();
    mmGtSheet.addRow(mmGtHeaders);
    
    // Sadece 1 MM GT ekle (doğru sequence ile)
    mmGtSheet.addRow(generateMmGtStokKartiData(sequence));
    
    // YM GT Sheet - Artık sadece 1 tane YM GT
    const ymGtSheet = workbook.addWorksheet('YM GT');
    const ymGtHeaders = getYmGtHeaders();
    ymGtSheet.addRow(ymGtHeaders);
    
    // Sadece 1 YM GT ekle (doğru sequence ile)
    ymGtSheet.addRow(generateYmGtStokKartiData(sequence));
    
    // YM ST Sheet - Tüm YM ST'ler
    const ymStSheet = workbook.addWorksheet('YM ST');
    const ymStHeaders = getYmStHeaders();
    ymStSheet.addRow(ymStHeaders);
    
    // İlk olarak ana YM ST'yi ekle
    ymStSheet.addRow(generateYmStStokKartiData(mainYmSt));
    
    // Sonra diğer YM ST'leri ekle
    allYmSts.forEach((ymSt, index) => {
      // Ana YM ST'yi atla (zaten ekledik)
      if (index !== mainYmStIndex) {
        ymStSheet.addRow(generateYmStStokKartiData(ymSt));
      }
    });
    
    const buffer = await workbook.xlsx.writeBuffer();
    saveAs(new Blob([buffer]), 'Galvaniz_Stok_Karti.xlsx');
  };

  // Reçete Excel oluştur - Yeni 1:1:n ilişki modeli ile
  const generateReceteExcel = async (sequence = '00') => {
    const workbook = new ExcelJS.Workbook();
    const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
    
    // Ana YM ST'yi belirle (ya seçilmiş ya da otomatik oluşturulmuş)
    const mainYmSt = allYmSts[mainYmStIndex] || allYmSts[0];
    const mainYmStIndex_ = mainYmStIndex; // Closure için yerel değişken
    
    // Önemli: Son kontrol - stok kartı Excel'i ile aynı sequence'i kullandığımızdan emin olalım
    if (sequence === '00') {
      console.warn('UYARI! Reçete Excel için "00" sequence kullanılıyor. Veritabanını kontrol et.');
    }
    
    console.log(`Reçete Excel oluşturuluyor, sequence: ${sequence} -- Veritabanındaki ürünle eşleştiğinden emin olun!`);
    
    // MM GT REÇETE Sheet
    const mmGtReceteSheet = workbook.addWorksheet('MM GT REÇETE');
    const receteHeaders = getReceteHeaders();
    mmGtReceteSheet.addRow(receteHeaders);
    
    // Sadece ana YMST için MM GT reçete satırları ekle
    const mmGtRecipe = allRecipes.mmGtRecipes[mainYmStIndex_] || {};
    let siraNo = 1;
    
    // MMGT reçete sıralaması: fixed exact order as specified
    const recipeEntries = Object.entries(mmGtRecipe);
    
    // Maintain fixed order: YM.GT.*.*, GTPKT01, AMB.ÇEM.KARTON.GAL, AMB.SHRİNK.*, SM.7MMHALKA, AMB.APEX CEMBER, AMB.TOKA.SIGNODE, SM.DESİ.PAK
    const ymGtEntry = recipeEntries.find(([key]) => key.includes('YM.GT.'));
    const gtpkt01Entry = recipeEntries.find(([key]) => key === 'GTPKT01');
    const kartonEntry = recipeEntries.find(([key]) => key === 'AMB.ÇEM.KARTON.GAL');
    const shrinkEntry = recipeEntries.find(([key]) => key.includes('AMB.SHRİNK.'));
    const halkaEntry = recipeEntries.find(([key]) => key === 'SM.7MMHALKA');
    const cemberEntry = recipeEntries.find(([key]) => key === 'AMB.APEX CEMBER 38X080');
    const tokaEntry = recipeEntries.find(([key]) => key === 'AMB.TOKA.SIGNODE.114P. DKP');
    const desiEntry = recipeEntries.find(([key]) => key === 'SM.DESİ.PAK');
    
    // Other entries that might exist but aren't in the fixed order
    const otherEntries = recipeEntries.filter(([key]) => 
      !key.includes('YM.GT.') && 
      key !== 'GTPKT01' &&
      key !== 'AMB.ÇEM.KARTON.GAL' &&
      !key.includes('AMB.SHRİNK.') &&
      key !== 'SM.7MMHALKA' &&
      key !== 'AMB.APEX CEMBER 38X080' &&
      key !== 'AMB.TOKA.SIGNODE.114P. DKP' &&
      key !== 'SM.DESİ.PAK'
    );
    
    // Sırayla ekle - exact order
    const orderedEntries = [
      ymGtEntry, 
      gtpkt01Entry, 
      kartonEntry,
      shrinkEntry,
      halkaEntry,
      cemberEntry,
      tokaEntry,
      desiEntry,
      ...otherEntries
    ].filter(Boolean);
    
    // MM GT reçete satırlarını eklerken doğru sequence'i kullan
    orderedEntries.forEach(([key, value]) => {
      if (value > 0) {
        mmGtReceteSheet.addRow(generateMmGtReceteRow(key, value, siraNo, sequence));
        siraNo++;
      }
    });
    
    // YM GT REÇETE Sheet - Artık sadece 1 tane YM GT reçetesi
    const ymGtReceteSheet = workbook.addWorksheet('YM GT REÇETE');
    ymGtReceteSheet.addRow(receteHeaders);
    
    // Sadece 1 YM GT reçetesi ekle - aynı sequence'i kullan
    let siraNo2 = 1;
    
    // YM GT reçetesinden sequence'e uygun değerleri al - fixed exact order
    const ymGtRecipeEntries = Object.entries(allRecipes.ymGtRecipe);
    
    // Fixed order: YM.ST.*.*.*, GLV01, 150 03, SM.HİDROLİK.ASİT
    // Ana YMST'nin stok kodunu kullan
    const ymStEntry = ymGtRecipeEntries.find(([key]) => key.includes('YM.ST.') || key === mainYmSt.stok_kodu);
    const glv01Entry = ymGtRecipeEntries.find(([key]) => key === 'GLV01');
    const zincEntry = ymGtRecipeEntries.find(([key]) => key === '150 03');
    const asitEntry = ymGtRecipeEntries.find(([key]) => key === 'SM.HİDROLİK.ASİT');
    
    // Other entries that might exist but aren't in the fixed order
    const otherYmGtEntries = ymGtRecipeEntries.filter(([key]) => 
      !key.includes('YM.ST.') && 
      key !== 'GLV01' && 
      key !== '150 03' && 
      key !== 'SM.HİDROLİK.ASİT' && 
      key !== mainYmSt.stok_kodu
    );
    
    // Sırayla ekle - exact order
    const orderedYmGtEntries = [
      ymStEntry ? [mainYmSt.stok_kodu, ymStEntry[1]] : null,
      glv01Entry,
      zincEntry,
      asitEntry,
      ...otherYmGtEntries
    ].filter(Boolean);
    
    orderedYmGtEntries.forEach(([key, value]) => {
      if (value > 0) {
        ymGtReceteSheet.addRow(generateYmGtReceteRow(key, value, siraNo2, sequence));
        siraNo2++;
      }
    });
    
    // YM ST REÇETE Sheet - Tüm YM ST'ler için reçeteleri oluştur
    const ymStReceteSheet = workbook.addWorksheet('YM ST REÇETE');
    ymStReceteSheet.addRow(receteHeaders);
    
    // İlk olarak ana YM ST'nin reçetesini ekle
    const mainYmStRecipe = allRecipes.ymStRecipes[mainYmStIndex_] || {};
    let siraNoMain = 1;
    
    // Ana YMST reçete sıralaması: fixed exact order - 1) FLM bileşeni, 2) TLC01 operasyonu
    const mainRecipeEntries = Object.entries(mainYmStRecipe);
    
    // Fixed order: FLM.*.*, TLC01
    const mainFlmEntry = mainRecipeEntries.find(([key]) => key.includes('FLM.'));
    const mainTlc01Entry = mainRecipeEntries.find(([key]) => key === 'TLC01');
    
    // Any other entries that might exist but aren't in the fixed order
    const mainOtherEntries = mainRecipeEntries.filter(([key]) => 
      !key.includes('FLM.') && 
      key !== 'TLC01'
    );
    
    // Sırayla ekle - exact order
    const mainOrderedEntries = [
      mainFlmEntry,
      mainTlc01Entry,
      ...mainOtherEntries
    ].filter(Boolean);
    
    mainOrderedEntries.forEach(([key, value]) => {
      if (value > 0) {
        ymStReceteSheet.addRow(generateYmStReceteRow(key, value, siraNoMain, mainYmSt));
        siraNoMain++;
      }
    });
    
    // Diğer YM ST'lerin reçetelerini ekle
    allYmSts.forEach((ymSt, index) => {
      // Ana YM ST'yi atla (zaten ekledik)
      if (index !== mainYmStIndex_) {
        const ymStRecipe = allRecipes.ymStRecipes[index] || {};
        let siraNo = 1;
        
        // YMST reçete sıralaması: fixed exact order - 1) FLM bileşeni, 2) TLC01 operasyonu
        const recipeEntries = Object.entries(ymStRecipe);
        
        // Fixed order: FLM.*.*, TLC01
        const flmEntry = recipeEntries.find(([key]) => key.includes('FLM.'));
        const tlc01Entry = recipeEntries.find(([key]) => key === 'TLC01');
        
        // Any other entries that might exist but aren't in the fixed order
        const otherEntries = recipeEntries.filter(([key]) => 
          !key.includes('FLM.') && 
          key !== 'TLC01'
        );
        
        // Sırayla ekle - exact order
        const orderedEntries = [
          flmEntry,
          tlc01Entry,
          ...otherEntries
        ].filter(Boolean);
        
        orderedEntries.forEach(([key, value]) => {
          if (value > 0) {
            ymStReceteSheet.addRow(generateYmStReceteRow(key, value, siraNo, ymSt));
            siraNo++;
          }
        });
      }
    });
    
    const buffer = await workbook.xlsx.writeBuffer();
    saveAs(new Blob([buffer]), 'Galvanizli_Tel_Recete.xlsx');
  };

  // Excel header fonksiyonları
  const getStokKartiHeaders = () => [
    'Stok Kodu', 'Stok Adı', 'Grup Kodu', 'Kod-1', 'Kod-2', 'Cari/Satıcı Kodu',
    'İngilizce İsim', 'Satıcı İsmi', 'Muh. Detay', 'Depo Kodu', 'Br-1', 'Br-2',
    'Pay-1', 'Payda-1', 'Çevrim Değeri-1', 'Ölçü Br-3', 'Çevrim Pay-2', 'Çevrim Payda-2',
    'Çevrim Değeri-2', 'Çap', 'Kaplama', 'Min Mukavemet', 'Max Mukavemet', 'KG',
    'İç Çap/Boy Çubuk AD', 'Dış Çap/En Çubuk AD', 'Çap2', 'Shrink', 'Tolerans(+)',
    'Tolerans(-)', 'Ebat(En)', 'Göz Aralığı', 'Ebat(Boy)', 'Hasır Tipi',
    'Özel Saha 8 (Alf.)', 'Alış Fiyatı', 'Fiyat Birimi', 'Satış Fiyatı-1',
    'Satış Fiyatı-2', 'Satış Fiyatı-3', 'Satış Fiyatı-4', 'Satış Tipi',
    'Döviz Alış', 'Döviz Maliyeti', 'Döviz Satış Fiyatı', 'Azami Stok',
    'Asgari Stok', 'Döv.Tutar', 'Döv.Tipi', 'Bekleme Süresi', 'Temin Süresi',
    'Birim Ağırlık', 'Nakliye Tutar', 'Satış KDV Oranı', 'Alış KDV Oranı',
    'Stok Türü', 'Mali Grup Kodu', 'Barkod 1', 'Barkod 2', 'Barkod 3',
    'Kod-3', 'Kod-4', 'Kod-5', 'Esnek Yapılandır', 'Süper Reçete Kullanılsın',
    'Bağlı Stok Kodu', 'Yapılandırma Kodu', 'Yap. Açıklama', 'Alış Döviz Tipi',
    'Gümrük Tarife Kodu', 'Dağıtıcı Kodu', 'Menşei', 'METARIAL', 'DIA (MM)',
    'DIA TOL (MM) +', 'DIA TOL (MM) -', 'ZING COATING (GR/M2)', 'TENSILE ST. (MPA) MIN',
    'TENSILE ST. (MPA) MAX', 'WAX', 'LIFTING LUGS', 'UNWINDING', 'CAST KONT. (CM)',
    'HELIX KONT. (CM)', 'ELONGATION (%) MIN', 'COIL DIMENSIONS (CM) ID',
    'COIL DIMENSIONS (CM) OD', 'COIL WEIGHT (KG)', 'COIL WEIGHT (KG) MIN',
    'COIL WEIGHT (KG) MAX'
  ];

  const getYmGtHeaders = () => [
    'Stok Kodu', 'Stok Adı', 'Grup Kodu', 'Kod-1', 'Kod-2', 'Cari/Satıcı Kodu',
    'İngilizce İsim', 'Satıcı İsmi', 'Muh. Detay', 'Depo Kodu', 'Br-1', 'Br-2',
    'Pay-1', 'Payda-1', 'Çevrim Değeri-1', 'Ölçü Br-3', 'Çevrim Pay-2', 'Çevrim Payda-2',
    'Çevrim Değeri-2', 'Çap', 'Kaplama', 'Min Mukavemet', 'Max Mukavemet', 'KG',
    'İç Çap/Boy Çubuk AD', 'Dış Çap/En Çubuk AD', 'Çap2', 'Shrink', 'Tolerans(+)',
    'Tolerans(-)', 'Ebat(En)', 'Göz Aralığı', 'Ebat(Boy)', 'Hasır Tipi',
    'Özel Saha 8 (Alf.)', 'Alış Fiyatı', 'Fiyat Birimi', 'Satış Fiyatı-1',
    'Satış Fiyatı-2', 'Satış Fiyatı-3', 'Satış Fiyatı-4', 'Satış Tipi',
    'Döviz Alış', 'Döviz Maliyeti', 'Döviz Satış Fiyatı', 'Azami Stok',
    'Asgari Stok', 'Döv.Tutar', 'Döv.Tipi', 'Bekleme Süresi', 'Temin Süresi',
    'Birim Ağırlık', 'Nakliye Tutar', 'Satış KDV Oranı', 'Alış KDV Oranı',
    'Stok Türü', 'Mali Grup Kodu', 'Barkod 1', 'Barkod 2', 'Barkod 3',
    'Kod-3', 'Kod-4', 'Kod-5', 'Esnek Yapılandır', 'Süper Reçete Kullanılsın',
    'Bağlı Stok Kodu', 'Yapılandırma Kodu', 'Yap. Açıklama', 'Alış Döviz Tipi',
    'Gümrük Tarife Kodu', 'Dağıtıcı Kodu', 'Menşei'
  ];

  const getYmStHeaders = () => [
    'Stok Kodu', 'Stok Adı', 'Grup Kodu', 'Kod-1', 'Kod-2', 'Kod-3',
    'Satış KDV Oranı', 'Muh.Detay', 'Depo Kodu', 'Br-1', 'Br-2', 'Pay-1',
    'Payda-1', 'Çevrim Değeri-1', 'Ölçü Br-3', 'Çevrim Pay-2', 'Çevrim Payda-2',
    'Çevrim Değeri-2', 'Alış Fiyatı', 'Fiyat Birimi', 'Satış Fiyatı-1',
    'Satış Fiyatı-2', 'Satış Fiyatı-3', 'Satış Fiyatı-4', 'Döviz Tip',
    'Döviz Alış', 'Döviz Maliyeti', 'Döviz Satış Fiyatı', 'Azami Stok',
    'Asgari Stok', 'Döv.Tutar', 'Döv.Tipi', 'Alış Döviz Tipi', 'Bekleme Süresi',
    'Temin Süresi', 'Birim Ağırlık', 'Nakliye Tutar', 'Stok Türü', 'Mali Grup Kodu',
    'İngilizce İsim', 'Özel Saha 1 (Say.)', 'Özel Saha 2 (Say.)', 'Özel Saha 3 (Say.)',
    'Özel Saha 4 (Say.)', 'Özel Saha 5 (Say.)', 'Özel Saha 6 (Say.)', 'Özel Saha 7 (Say.)',
    'Özel Saha 8 (Say.)', 'Özel Saha 1 (Alf.)', 'Özel Saha 2 (Alf.)', 'Özel Saha 3 (Alf.)',
    'Özel Saha 4 (Alf.)', 'Özel Saha 5 (Alf.)', 'Özel Saha 6 (Alf.)', 'Özel Saha 7 (Alf.)',
    'Özel Saha 8 (Alf.)', 'Kod-4', 'Kod-5', 'Esnek Yapılandır', 'Süper Reçete Kullanılsın',
    'Bağlı Stok Kodu', 'Yapılandırma Kodu', 'Yap. Açıklama'
  ];

  const getReceteHeaders = () => [
    'Mamul Kodu(*)', 'Reçete Top.', 'Fire Oranı (%)', 'Oto.Reç.', 'Ölçü Br.',
    'Sıra No(*)', 'Operasyon Bileşen', 'Bileşen Kodu(*)', 'Ölçü Br. - Bileşen',
    'Miktar(*)', 'Açıklama', 'Miktar Sabitle', 'Stok/Maliyet', 'Fire Mik.',
    'Sabit Fire Mik.', 'İstasyon Kodu', 'Hazırlık Süresi', 'Üretim Süresi',
    'Ü.A.Dahil Edilsin', 'Son Operasyon', 'Öncelik', 'Planlama Oranı',
    'Alternatif Politika - D.A.Transfer Fişi', 'Alternatif Politika - Ambar Ç. Fişi',
    'Alternatif Politika - Üretim S.Kaydı', 'Alternatif Politika - MRP', 'İÇ/DIŞ'
  ];

  // Excel veri oluşturma fonksiyonları - doğru formatlar ve COMMA usage
  const generateMmGtStokKartiData = (sequence = '00') => {
    const cap = parseFloat(mmGtData.cap);
    const capFormatted = Math.round(cap * 100).toString().padStart(4, '0');
    
    return [
      `GT.${mmGtData.kod_2}.${capFormatted}.${sequence}`, // Stok Kodu
      generateStokAdi(), // Stok Adı
      'MM', // Grup Kodu
      'GT', // Kod-1
      mmGtData.kod_2, // Kod-2
      '', // Cari/Satıcı Kodu
      generateEnglishName(), // İngilizce İsim
      '', // Satıcı İsmi
      '26', // Muh. Detay
      '36', // Depo Kodu
      'KG', // Br-1
      'TN', // Br-2
      '1', // Pay-1
      '1,000', // Payda-1 (Excel formatı - COMMA here)
      '0', // Çevrim Değeri-1
      '', // Ölçü Br-3
      '1', // Çevrim Pay-2
      '1', // Çevrim Payda-2
      '1', // Çevrim Değeri-2
      cap.toFixed(2), // Çap (NOKTA)
      mmGtData.kaplama, // Kaplama
      mmGtData.min_mukavemet, // Min Mukavemet
      mmGtData.max_mukavemet, // Max Mukavemet
      mmGtData.kg, // KG
      mmGtData.ic_cap, // İç Çap
      mmGtData.dis_cap, // Dış Çap
      '', // Çap2
      mmGtData.shrink, // Shrink
      '0', // Tolerans(+) (NOKTA format - will be shown as 0,00 in Excel)
      '0,06', // Tolerans(-) (COMMA for Excel)
      '', // Ebat(En)
      '', // Göz Aralığı
      '', // Ebat(Boy)
      '', // Hasır Tipi
      '', // Özel Saha 8 (Alf.)
      '0', // Alış Fiyatı
      '1', // Fiyat Birimi
      '0', // Satış Fiyatı-1
      '0', // Satış Fiyatı-2
      '0', // Satış Fiyatı-3
      '0', // Satış Fiyatı-4
      '1', // Satış Tipi
      '0', // Döviz Alış
      '0', // Döviz Maliyeti
      '0', // Döviz Satış Fiyatı
      '0', // Azami Stok
      '0', // Asgari Stok
      '', // Döv.Tutar
      '0', // Döv.Tipi
      '0', // Bekleme Süresi
      '0', // Temin Süresi
      '0', // Birim Ağırlık
      '0', // Nakliye Tutar
      '20', // Satış KDV Oranı
      '20', // Alış KDV Oranı
      'D', // Stok Türü
      '', // Mali Grup Kodu
      '', // Barkod 1
      '', // Barkod 2
      '', // Barkod 3
      '', // Kod-3
      '', // Kod-4
      '', // Kod-5
      'H', // Esnek Yapılandır
      'H', // Süper Reçete Kullanılsın
      '', // Bağlı Stok Kodu
      '', // Yapılandırma Kodu
      '', // Yap. Açıklama
      '2', // Alış Döviz Tipi
      getGumrukTarifeKodu(), // Gümrük Tarife Kodu
      '', // Dağıtıcı Kodu
      '052', // Menşei
      'Galvanizli Tel', // METARIAL
      cap.toFixed(2).replace('.', ','), // DIA (MM) - COMMA for Excel
      parseFloat(mmGtData.tolerans_plus || 0).toFixed(2).replace('.', ','), // DIA TOL (MM) + - COMMA
      parseFloat(mmGtData.tolerans_minus || 0).toFixed(2).replace('.', ','), // DIA TOL (MM) - - COMMA
      mmGtData.kaplama, // ZING COATING (GR/M2)
      mmGtData.min_mukavemet, // TENSILE ST. (MPA) MIN
      mmGtData.max_mukavemet, // TENSILE ST. (MPA) MAX
      '+', // WAX
      '+', // LIFTING LUGS
      mmGtData.unwinding === 'Clockwise' ? 'Clockwise' : '', // UNWINDING
      mmGtData.cast_kont || '', // CAST KONT. (CM)
      mmGtData.helix_kont || '', // HELIX KONT. (CM)
      mmGtData.elongation || '', // ELONGATION (%) MIN
      mmGtData.ic_cap, // COIL DIMENSIONS (CM) ID
      mmGtData.dis_cap, // COIL DIMENSIONS (CM) OD
      mmGtData.kg, // COIL WEIGHT (KG)
      '', // COIL WEIGHT (KG) MIN
      '' // COIL WEIGHT (KG) MAX
    ];
  };

  const generateYmGtStokKartiData = (sequence = '00') => {
    const cap = parseFloat(mmGtData.cap);
    const capFormatted = Math.round(cap * 100).toString().padStart(4, '0');
    
    return [
      `YM.GT.${mmGtData.kod_2}.${capFormatted}.${sequence}`, // Stok Kodu - sequence eşleştirme!
      generateYmGtStokAdi(sequence), // Stok Adı - güncel sequence ile!
      'YM', // Grup Kodu
      'GT', // Kod-1
      mmGtData.kod_2, // Kod-2
      generateYmGtCariadiKodu(), // Cari/Satıcı Kodu
      generateYmGtInglizceIsim(), // İngilizce İsim
      '', // Satıcı İsmi
      '83', // Muh. Detay
      '35', // Depo Kodu
      'KG', // Br-1
      'TN', // Br-2
      '1', // Pay-1
      '1,000', // Payda-1 (Excel formatı - COMMA)
      '0', // Çevrim Değeri-1
      '', // Ölçü Br-3
      '1', // Çevrim Pay-2
      '1', // Çevrim Payda-2
      '1', // Çevrim Değeri-2
      cap.toFixed(2), // Çap (NOKTA)
      mmGtData.kaplama, // Kaplama
      mmGtData.min_mukavemet, // Min Mukavemet
      mmGtData.max_mukavemet, // Max Mukavemet
      mmGtData.kg, // KG
      mmGtData.ic_cap, // İç Çap
      mmGtData.dis_cap, // Dış Çap
      '', // Çap2
      mmGtData.shrink, // Shrink
      parseFloat(mmGtData.tolerans_plus || 0).toFixed(2).replace('.', ','), // Tolerans(+) - COMMA for Excel
      parseFloat(mmGtData.tolerans_minus || 0).toFixed(2).replace('.', ','), // Tolerans(-) - COMMA for Excel
      '', // Ebat(En)
      '', // Göz Aralığı
      '', // Ebat(Boy)
      '', // Hasır Tipi
      '', // Özel Saha 8 (Alf.)
      '0', // Alış Fiyatı
      '1', // Fiyat Birimi
      '0', // Satış Fiyatı-1
      '0', // Satış Fiyatı-2
      '0', // Satış Fiyatı-3
      '0', // Satış Fiyatı-4
      '1', // Satış Tipi
      '0', // Döviz Alış
      '0', // Döviz Maliyeti
      '0', // Döviz Satış Fiyatı
      '0', // Azami Stok
      '0', // Asgari Stok
      '', // Döv.Tutar
      '0', // Döv.Tipi
      '0', // Bekleme Süresi
      '0', // Temin Süresi
      '0', // Birim Ağırlık
      '0', // Nakliye Tutar
      '20', // Satış KDV Oranı
      '20', // Alış KDV Oranı
      'D', // Stok Türü
      '', // Mali Grup Kodu
      '', // Barkod 1
      '', // Barkod 2
      '', // Barkod 3
      '', // Kod-3
      '', // Kod-4
      '', // Kod-5
      'H', // Esnek Yapılandır
      'H', // Süper Reçete Kullanılsın
      '', // Bağlı Stok Kodu
      '', // Yapılandırma Kodu
      '', // Yap. Açıklama
      '', // Alış Döviz Tipi
      '', // Gümrük Tarife Kodu
      '', // Dağıtıcı Kodu
      '' // Menşei
    ];
  };

  const generateYmStStokKartiData = (ymSt) => {
    return [
      ymSt.stok_kodu, // Stok Kodu
      ymSt.stok_adi, // Stok Adı
      'YM', // Grup Kodu
      'ST', // Kod-1
      '', // Kod-2
      '', // Kod-3
      '20', // Satış KDV Oranı
      '28', // Muh.Detay
      '35', // Depo Kodu
      'KG', // Br-1
      'TN', // Br-2
      '1', // Pay-1
      '1,000', // Payda-1 (Excel formatı - COMMA)
      '0', // Çevrim Değeri-1
      '', // Ölçü Br-3
      '1', // Çevrim Pay-2
      '1', // Çevrim Payda-2
      '1', // Çevrim Değeri-2
      '0', // Alış Fiyatı
      '1', // Fiyat Birimi
      '0', // Satış Fiyatı-1
      '0', // Satış Fiyatı-2
      '0', // Satış Fiyatı-3
      '0', // Satış Fiyatı-4
      '1', // Döviz Tip
      '0', // Döviz Alış
      '0', // Döviz Maliyeti
      '0', // Döviz Satış Fiyatı
      '0', // Azami Stok
      '0', // Asgari Stok
      '', // Döv.Tutar
      '0', // Döv.Tipi
      '0', // Alış Döviz Tipi
      '0', // Bekleme Süresi
      '0', // Temin Süresi
      '0', // Birim Ağırlık
      '0', // Nakliye Tutar
      'D', // Stok Türü
      '', // Mali Grup Kodu
      '', // İngilizce İsim
      '1', // Özel Saha 1 (Say.)
      '0', // Özel Saha 2 (Say.)
      '0', // Özel Saha 3 (Say.)
      '0', // Özel Saha 4 (Say.)
      '0', // Özel Saha 5 (Say.)
      '0', // Özel Saha 6 (Say.)
      '0', // Özel Saha 7 (Say.)
      '0', // Özel Saha 8 (Say.)
      '', // Özel Saha 1 (Alf.)
      '', // Özel Saha 2 (Alf.)
      '', // Özel Saha 3 (Alf.)
      '', // Özel Saha 4 (Alf.)
      '', // Özel Saha 5 (Alf.)
      '', // Özel Saha 6 (Alf.)
      '', // Özel Saha 7 (Alf.)
      '', // Özel Saha 8 (Alf.)
      '', // Kod-4
      '', // Kod-5
      'H', // Esnek Yapılandır
      'H', // Süper Reçete Kullanılsın
      '', // Bağlı Stok Kodu
      '', // Yapılandırma Kodu
      '' // Yap. Açıklama
    ];
  };

  // Reçete satır oluşturma fonksiyonları
  const generateMmGtReceteRow = (bilesenKodu, miktar, siraNo, sequence = '00') => {
    const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
    
    return [
      `GT.${mmGtData.kod_2}.${capFormatted}.${sequence}`, // Mamul Kodu - güncel sequence ile!
      '1', // Reçete Top.
      '0.0004', // Fire Oranı (%) - NOKTA for decimals as requested
      '', // Oto.Reç.
      getOlcuBr(bilesenKodu), // Ölçü Br.
      siraNo, // Sıra No - incremental as requested
      bilesenKodu.includes('YM.GT.') ? 'Bileşen' : (bilesenKodu.includes('01') ? 'Operasyon' : 'Bileşen'), // YM.GT always as Bileşen
      bilesenKodu, // Bileşen Kodu
      '1', // Ölçü Br. - Bileşen
      miktar, // Miktar (nokta formatında internal)
      getReceteAciklama(bilesenKodu), // Açıklama
      '', // Miktar Sabitle
      '', // Stok/Maliyet
      '', // Fire Mik.
      '', // Sabit Fire Mik.
      '', // İstasyon Kodu
      '', // Hazırlık Süresi
      bilesenKodu.includes('01') ? miktar : '', // Üretim Süresi
      'evet', // Ü.A.Dahil Edilsin
      'evet', // Son Operasyon
      '', // Öncelik
      '', // Planlama Oranı
      '', // Alternatif Politika - D.A.Transfer Fişi
      '', // Alternatif Politika - Ambar Ç. Fişi
      '', // Alternatif Politika - Üretim S.Kaydı
      '', // Alternatif Politika - MRP
      '' // İÇ/DIŞ
    ];
  };

  const generateYmGtReceteRow = (bilesenKodu, miktar, siraNo, sequence = '00') => {
    const capFormatted = Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0');
    
    return [
      `YM.GT.${mmGtData.kod_2}.${capFormatted}.${sequence}`, // Mamul Kodu - güncel sequence ile!
      '1', // Reçete Top.
      '0', // Fire Oranı (%)
      '', // Oto.Reç.
      getOlcuBr(bilesenKodu), // Ölçü Br.
      siraNo, // Sıra No - incremental as requested
      bilesenKodu.includes('YM.ST.') ? 'Bileşen' : (bilesenKodu.includes('01') ? 'Operasyon' : 'Bileşen'), // YM.ST always as Bileşen
      bilesenKodu, // Bileşen Kodu
      '1', // Ölçü Br. - Bileşen
      miktar, // Miktar (nokta formatında internal)
      getReceteAciklama(bilesenKodu), // Açıklama
      '', // Miktar Sabitle
      '', // Stok/Maliyet
      '', // Fire Mik.
      '', // Sabit Fire Mik.
      '', // İstasyon Kodu
      '', // Hazırlık Süresi
      bilesenKodu.includes('01') ? miktar : '', // Üretim Süresi
      '', // Ü.A.Dahil Edilsin
      '', // Son Operasyon
      '', // Öncelik
      '', // Planlama Oranı
      '', // Alternatif Politika - D.A.Transfer Fişi
      '', // Alternatif Politika - Ambar Ç. Fişi
      '', // Alternatif Politika - Üretim S.Kaydı
      '', // Alternatif Politika - MRP
      '' // İÇ/DIŞ
    ];
  };

  const generateYmStReceteRow = (bilesenKodu, miktar, siraNo, ymSt) => {
    return [
      ymSt.stok_kodu || '', // Mamul Kodu
      '1', // Reçete Top.
      '', // Fire Oranı (%)
      '', // Oto.Reç.
      getOlcuBr(bilesenKodu), // Ölçü Br.
      siraNo, // Sıra No - incremental as requested
      bilesenKodu.includes('YM.GT.') ? 'Bileşen' : (bilesenKodu.includes('01') ? 'Operasyon' : 'Bileşen'), // YM.GT always as Bileşen
      bilesenKodu, // Bileşen Kodu
      '1', // Ölçü Br. - Bileşen
      miktar, // Miktar (nokta formatında internal)
      getReceteAciklama(bilesenKodu), // Açıklama
      '', // Miktar Sabitle
      '', // Stok/Maliyet
      '', // Fire Mik.
      '', // Sabit Fire Mik.
      '', // İstasyon Kodu
      '', // Hazırlık Süresi
      bilesenKodu.includes('01') ? miktar : '', // Üretim Süresi
      '', // Ü.A.Dahil Edilsin
      '', // Son Operasyon
      '', // Öncelik
      '', // Planlama Oranı
      '', // Alternatif Politika - D.A.Transfer Fişi
      '', // Alternatif Politika - Ambar Ç. Fişi
      '', // Alternatif Politika - Üretim S.Kaydı
      '', // Alternatif Politika - MRP
      '' // İÇ/DIŞ
    ];
  };

  // String oluşturma fonksiyonları - COMMA Excel formatında
  const generateStokAdi = () => {
    const cap = parseFloat(mmGtData.cap) || 0;
    const toleransPlus = parseFloat(mmGtData.tolerans_plus) || 0;
    const toleransMinus = parseFloat(mmGtData.tolerans_minus) || 0;
    
    // Use point for database storage but display with proper spacing
    return `Galvanizli Tel ${cap.toFixed(2)} mm -${Math.abs(toleransMinus).toFixed(2)}/+${toleransPlus.toFixed(2)} ${mmGtData.kaplama || '0'} gr/m² ${mmGtData.min_mukavemet || '0'}-${mmGtData.max_mukavemet || '0'} MPa ID:${mmGtData.ic_cap || '45'} cm OD:${mmGtData.dis_cap || '75'} cm ${mmGtData.kg || '0'} kg`;
  };

  const generateYmGtStokAdi = (sequence = '00') => {
    const cap = parseFloat(mmGtData.cap) || 0;
    const toleransPlus = parseFloat(mmGtData.tolerans_plus) || 0;
    const toleransMinus = parseFloat(mmGtData.tolerans_minus) || 0;
    
    return `YM Galvanizli Tel ${cap.toFixed(2)} mm -${Math.abs(toleransMinus).toFixed(2)}/+${toleransPlus.toFixed(2)} ${mmGtData.kaplama || '0'} gr/m² ${mmGtData.min_mukavemet || '0'}-${mmGtData.max_mukavemet || '0'} MPa ID:${mmGtData.ic_cap || '45'} cm OD:${mmGtData.dis_cap || '75'} cm ${mmGtData.kg || '0'} kg`;
  };

  const generateYmGtCariadiKodu = () => {
    const cap = parseFloat(mmGtData.cap) || 0;
    const toleransPlus = parseFloat(mmGtData.tolerans_plus) || 0;
    const toleransMinus = parseFloat(mmGtData.tolerans_minus) || 0;
    
    return `Tel ${cap.toFixed(2)} mm -${Math.abs(toleransMinus).toFixed(2)}/+${toleransPlus.toFixed(2)} ${mmGtData.kaplama || '0'} gr/m² ${mmGtData.min_mukavemet || '0'}-${mmGtData.max_mukavemet || '0'} MPa ID:${mmGtData.ic_cap || '45'} cm OD:${mmGtData.dis_cap || '75'} cm ${mmGtData.kg || '0'} kg`;
  };

  const generateYmGtInglizceIsim = () => {
    const cap = parseFloat(mmGtData.cap) || 0;
    const toleransPlus = parseFloat(mmGtData.tolerans_plus) || 0;
    const toleransMinus = parseFloat(mmGtData.tolerans_minus) || 0;
    
    return `Galvanized Steel Wire ${cap.toFixed(2)} mm -${Math.abs(toleransMinus).toFixed(2)}/+${toleransPlus.toFixed(2)} ${mmGtData.kaplama || '0'} gr/m² ${mmGtData.min_mukavemet || '0'}-${mmGtData.max_mukavemet || '0'} MPa ID:${mmGtData.ic_cap || '45'} cm OD:${mmGtData.dis_cap || '75'} cm ${mmGtData.kg || '0'} kg`;
  };

  const generateEnglishName = () => {
    const cap = parseFloat(mmGtData.cap) || 0;
    const toleransPlus = parseFloat(mmGtData.tolerans_plus) || 0;
    const toleransMinus = parseFloat(mmGtData.tolerans_minus) || 0;
    
    // Use points for database storage but proper spacing between values
    return `Galvanized Steel Wire ${cap.toFixed(2)} mm -${Math.abs(toleransMinus).toFixed(2)}/+${toleransPlus.toFixed(2)} ${mmGtData.kaplama || '0'} gr/m² ${mmGtData.min_mukavemet || '0'}-${mmGtData.max_mukavemet || '0'} MPa ID:${mmGtData.ic_cap || '45'} cm OD:${mmGtData.dis_cap || '75'} cm ${mmGtData.kg || '0'} kg`;
  };

  // Talep onaylama
  const handleApproveRequest = async () => {
    if (!selectedRequest || !databaseIds.mmGtIds.length) {
      toast.error('Onaylamak için önce veritabanına kaydedin');
      return;
    }
    
    try {
      setIsLoading(true);
      
      const response = await fetchWithAuth(`${API_URLS.galSalRequests}/${selectedRequest.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          status: 'approved',
          processed_by: user.username,
          processed_at: new Date().toISOString(),
          mm_gt_id: databaseIds.mmGtIds[0] // İlk MM GT ID'yi kullan
        })
      });
      
      if (response && response.ok) {
        toast.success('Talep başarıyla onaylandı');
        fetchRequests();
        setSelectedRequest(null);
      } else {
        throw new Error('Talep onaylanamadı');
      }
    } catch (error) {
      console.error('Talep onaylama hatası:', error);
      toast.error('Talep onaylama hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Talep reddetme
  const handleRejectRequest = async () => {
    if (!selectedRequest) return;
    
    const reason = prompt('Red nedeni:');
    if (!reason) return;
    
    try {
      setIsLoading(true);
      
      const response = await fetchWithAuth(`${API_URLS.galSalRequests}/${selectedRequest.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          status: 'rejected',
          processed_by: user.username,
          processed_at: new Date().toISOString(),
          rejection_reason: reason
        })
      });
      
      if (response && response.ok) {
        toast.success('Talep başarıyla reddedildi');
        fetchRequests();
        setSelectedRequest(null);
      } else {
        throw new Error('Talep reddedilemedi');
      }
    } catch (error) {
      console.error('Talep reddetme hatası:', error);
      toast.error('Talep reddetme hatası: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Shrink miktarı ve tipi ile ilgili yardımcı fonksiyonlar
  const handleShrinkChange = (recipeIndex, newShrinkCode) => {
    const currentShrinkAmount = calculateShrinkAmount(parseFloat(mmGtData.kg) || 0);
    const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
    
    // Mevcut reçeteleri güncelle
    updateRecipeValue('mmgt', recipeIndex, newShrinkCode, currentShrinkAmount);
    
    // Eski shrink kodlarını temizle (eğer farklıysa)
    const shrinkTypes = ['AMB.SHRİNK.200*140CM', 'AMB.SHRİNK.200*160CM', 'AMB.SHRİNK.200*190CM'];
    shrinkTypes.forEach(shrinkType => {
      if (shrinkType !== newShrinkCode) {
        updateRecipeValue('mmgt', recipeIndex, shrinkType, 0);
      }
    });
  };

  return (
    <div className="p-6 max-w-7xl mx-auto bg-gray-50 min-h-screen">
      {/* Ana Başlık ve Butonlar */}
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold text-gray-800 flex items-center gap-3">
          <div className="w-8 h-8 bg-red-600 rounded-lg flex items-center justify-center">
            <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
          Galvanizli Tel Netsis Entegrasyonu
        </h1>
        
        <div className="flex gap-3">
          <button
            onClick={() => setShowSettingsModal(true)}
            className="px-3 py-2 bg-gray-800 text-white rounded-md text-sm flex items-center"
          >
            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            Hesaplama Değerleri
          </button>
          <button
            onClick={() => setShowExistingMmGtModal(true)}
            className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors shadow-lg flex items-center gap-2"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
            Veritabanından Seç
          </button>
          
          <button
            onClick={() => setShowRequestsModal(true)}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors shadow-lg relative flex items-center gap-2"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
            </svg>
            Talepler
            {requests.length > 0 && (
              <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                {requests.length}
              </span>
            )}
          </button>
        </div>
      </div>

      {/* Ana İçerik */}
      {currentStep === 'input' && (
        <div className="bg-white rounded-xl shadow-lg p-8">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-semibold text-gray-800">MM GT Ürün Bilgileri</h2>
            <div className="flex items-center gap-2 text-sm text-gray-500">
              <span className="w-2 h-2 bg-red-500 rounded-full"></span>
              <span>Zorunlu Alanlar</span>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Çap (mm) <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                inputMode="decimal"
                value={normalizeDecimalDisplay(mmGtData.cap)}
                onChange={(e) => handleInputChange('cap', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="0.00000"
                lang="en-US" // Force EN-US locale with point decimal separator
                onKeyDown={(e) => handleCommaToPoint(e, 'cap')}
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Kaplama Türü <span className="text-red-500">*</span>
              </label>
              <select
                value={mmGtData.kod_2}
                onChange={(e) => handleInputChange('kod_2', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
              >
                <option value="NIT">NIT</option>
                <option value="PAD">PAD</option>
              </select>
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Kaplama (gr/m²) <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                inputMode="decimal"
                value={normalizeDecimalDisplay(mmGtData.kaplama)}
                onChange={(e) => handleInputChange('kaplama', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                disabled={mmGtData.kod_2 === 'PAD'}
                placeholder="50-400"
                onKeyDown={(e) => handleCommaToPoint(e, 'kaplama')}
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Min Mukavemet (MPa) <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                inputMode="decimal"
                value={normalizeDecimalDisplay(mmGtData.min_mukavemet)}
                onChange={(e) => handleInputChange('min_mukavemet', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="350-1000"
                onKeyDown={(e) => handleCommaToPoint(e, 'min_mukavemet')}
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Max Mukavemet (MPa) <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                inputMode="decimal"
                value={normalizeDecimalDisplay(mmGtData.max_mukavemet)}
                onChange={(e) => handleInputChange('max_mukavemet', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="350-1000"
                onKeyDown={(e) => handleCommaToPoint(e, 'max_mukavemet')}
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Ağırlık (kg) <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                inputMode="decimal"
                value={normalizeDecimalDisplay(mmGtData.kg)}
                onChange={(e) => handleInputChange('kg', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="250-1250"
                onKeyDown={(e) => handleCommaToPoint(e, 'kg')}
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                İç Çap (cm)
              </label>
              <select
                value={mmGtData.ic_cap}
                onChange={(e) => handleInputChange('ic_cap', parseInt(e.target.value))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
              >
                <option value={45}>45</option>
                <option value={50}>50</option>
                <option value={55}>55</option>
              </select>
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Dış Çap (cm)
              </label>
              <input
                type="text"
                inputMode="decimal"
                value={normalizeDecimalDisplay(mmGtData.dis_cap || '')}
                onChange={(e) => handleInputChange('dis_cap', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all bg-gray-50"
                readOnly
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Tolerans (+)
              </label>
              <input
                type="text"
                inputMode="decimal"
                value={normalizeDecimalDisplay(mmGtData.tolerans_plus || '')}
                onChange={(e) => handleInputChange('tolerans_plus', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="0.00000"
                onKeyDown={(e) => handleCommaToPoint(e, 'tolerans_plus')}
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Tolerans (-)
              </label>
              <input
                type="text"
                inputMode="decimal"
                value={normalizeDecimalDisplay(mmGtData.tolerans_minus || '')}
                onChange={(e) => handleInputChange('tolerans_minus', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="0.00000"
                onKeyDown={(e) => handleCommaToPoint(e, 'tolerans_minus')}
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Shrink
              </label>
              <select
                value={mmGtData.shrink}
                onChange={(e) => handleInputChange('shrink', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
              >
                <option value="evet">Evet</option>
                <option value="hayır">Hayır</option>
              </select>
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Unwinding
              </label>
              <select
                value={mmGtData.unwinding}
                onChange={(e) => handleInputChange('unwinding', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
              >
                <option value="">Anti-Clockwise (Varsayılan)</option>
                <option value="Clockwise">Clockwise</option>
              </select>
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Cast Kont
              </label>
              <input
                type="text"
                value={mmGtData.cast_kont}
                onChange={(e) => handleInputChange('cast_kont', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="Opsiyonel"
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Helix Kont
              </label>
              <input
                type="text"
                value={mmGtData.helix_kont}
                onChange={(e) => handleInputChange('helix_kont', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="Opsiyonel"
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Elongation
              </label>
              <input
                type="text"
                value={mmGtData.elongation}
                onChange={(e) => handleInputChange('elongation', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-all"
                placeholder="Opsiyonel"
              />
            </div>
          </div>

          <div className="mt-8 flex justify-end">
            <button
              onClick={handleNext}
              disabled={isLoading}
              className="bg-red-600 text-white px-8 py-3 rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50 shadow-lg flex items-center gap-2"
            >
              {isLoading ? (
                <>
                  <svg className="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  İşleniyor...
                </>
              ) : (
                <>
                  Devam
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </>
              )}
            </button>
          </div>
        </div>
      )}

      {currentStep === 'summary' && (
        <div className="space-y-6">
          {/* Durum Çubuğu */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                {selectedRequest && (
                  <div className="bg-blue-50 px-4 py-2 rounded-lg">
                    <span className="text-blue-700 font-medium">📋 Talep Seçildi</span>
                  </div>
                )}
                {selectedExistingMmGt && (
                  <div className="bg-purple-50 px-4 py-2 rounded-lg">
                    <span className="text-purple-700 font-medium">🔍 Mevcut MM GT Seçildi</span>
                  </div>
                )}
                {isRequestUsed && (
                  <div className="bg-yellow-50 px-4 py-2 rounded-lg border border-yellow-200">
                    <span className="text-yellow-700 font-medium">⚠️ Kullanılan talep var - Kaydet/Export sonrası silinebilir</span>
                  </div>
                )}
              </div>
              
              <button
                onClick={handleBackToManual}
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors flex items-center gap-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Manuel Girişe Dön
              </button>
            </div>
          </div>

          {/* MM GT Özet */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <div className="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center">
                <span className="text-red-600 font-bold">MM</span>
              </div>
              MM GT Ürün Özeti
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[
                { label: 'Stok Kodu', value: `GT.${mmGtData.kod_2}.${Math.round(parseFloat(mmGtData.cap || 0) * 100).toString().padStart(4, '0')}.00` },
                { label: 'Çap', value: `${mmGtData.cap || '0'} mm` },
                { label: 'Kaplama Türü', value: mmGtData.kod_2 },
                { label: 'Kaplama', value: `${mmGtData.kaplama || '0'} gr/m²` },
                { label: 'Mukavemet', value: `${mmGtData.min_mukavemet || '0'}-${mmGtData.max_mukavemet || '0'} MPa` },
                { label: 'Ağırlık', value: `${mmGtData.kg || '0'} kg` }
              ].map((item, index) => (
                <div key={index} className="bg-gray-50 p-4 rounded-lg">
                  <span className="text-sm text-gray-500 block">{item.label}:</span>
                  <p className="font-semibold text-gray-800">{item.value}</p>
                </div>
              ))}
            </div>
          </div>

          {/* YM GT Özet */}
          {ymGtData && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <div className="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center">
                  <span className="text-yellow-600 font-bold">YM</span>
                </div>
                YM GT Ürün Özeti
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-gray-50 p-4 rounded-lg">
                  <span className="text-sm text-gray-500 block">Stok Kodu:</span>
                  <p className="font-semibold text-gray-800">{ymGtData.stok_kodu}</p>
                </div>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <span className="text-sm text-gray-500 block">Stok Adı:</span>
                  <p className="font-semibold text-gray-800">{ymGtData.stok_adi}</p>
                </div>
              </div>
            </div>
          )}

          {/* YM ST Yönetimi - Geliştirilmiş UI */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-semibold flex items-center gap-2">
                <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                  <span className="text-green-600 font-bold">ST</span>
                </div>
                YM ST Seçimi ve Yönetimi
              </h2>
              <div className="flex gap-3">
                <button
                  onClick={() => setShowAddYmStModal(true)}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors shadow-lg flex items-center gap-2"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  YM ST Ekle
                </button>
                <button
                  onClick={findSuitableYmSts}
                  disabled={isLoading}
                  className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors shadow-lg flex items-center gap-2 disabled:opacity-50"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                  YM ST Listesini Güncelle
                </button>
                <button
                  onClick={generateAutoYmSts}
                  className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors shadow-lg flex items-center gap-2"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                  Otomatik Oluştur
                </button>
              </div>
            </div>

            {/* Uygun YM ST'ler - İyileştirilmiş tasarım */}
            {suitableYmSts.length > 0 && (
              <div className="mb-8">
                <h3 className="text-lg font-medium mb-4 text-gray-700">Veritabanından Uygun YM ST'ler</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {suitableYmSts.map(ymSt => {
                    const isSelected = selectedYmSts.find(item => item.stok_kodu === ymSt.stok_kodu);
                    return (
                      <div
                        key={ymSt.id}
                        className={`p-4 border-2 rounded-lg cursor-pointer transition-all transform hover:scale-105 ${
                          isSelected
                            ? 'bg-blue-100 border-blue-500 shadow-lg ring-2 ring-blue-200'
                            : 'bg-gray-50 border-gray-200 hover:bg-blue-50 hover:border-blue-300'
                        }`}
                        onClick={() => handleYmStSelection(ymSt)}
                      >
                        <div className="flex justify-between items-start mb-3">
                          <div className="flex-1">
                            <p className="font-semibold text-gray-800 text-sm">{ymSt.stok_kodu || ''}</p>
                            <p className="text-xs text-gray-600 mt-1 line-clamp-2">{ymSt.stok_adi || ''}</p>
                          </div>
                          <div className={`ml-3 text-center ${isSelected ? 'text-blue-600' : 'text-gray-400'}`}>
                            {isSelected ? (
                              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                              </svg>
                            ) : (
                              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                              </svg>
                            )}
                          </div>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="inline-block px-3 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                            Veritabanı
                          </span>
                          <span className="text-sm font-medium text-gray-700">
                            {parseFloat(ymSt.cap || 0)} mm
                          </span>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}

            {/* Seçilen YM ST'ler - İyileştirilmiş tasarım */}
            {(selectedYmSts.length > 0 || autoGeneratedYmSts.length > 0) && (
              <div className="border-t pt-6">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-medium text-gray-700">Seçilen / Oluşturulan YM ST'ler</h3>
                  <div className="flex items-center">
                    <span className="text-sm text-blue-700 font-semibold mr-2">
                      <svg className="w-5 h-5 inline-block mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M5 2a1 1 0 011 1v1h1a1 1 0 010 2H6v1a1 1 0 01-2 0V6H3a1 1 0 010-2h1V3a1 1 0 011-1zm0 10a1 1 0 011 1v1h1a1 1 0 110 2H6v1a1 1 0 11-2 0v-1H3a1 1 0 110-2h1v-1a1 1 0 011-1zM12 2a1 1 0 01.967.744L14.146 7.2 17.5 9.134a1 1 0 010 1.732l-3.354 1.935-1.18 4.455a1 1 0 01-1.933 0L9.854 12.8 6.5 10.866a1 1 0 010-1.732l3.354-1.935 1.18-4.455A1 1 0 0112 2z" clipRule="evenodd" />
                      </svg>
                      Ana YM ST'yi seçin - Ürün ilişkisi buna göre kurulacak
                    </span>
                  </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {/* Seçilen YM ST'ler */}
                  {selectedYmSts.map((ymSt, index) => {
                    const selectedIndex = index;
                    const isMain = mainYmStIndex === selectedIndex;
                    
                    return (
                      <div
                        key={`selected-${index}`}
                        className={`p-4 border-2 rounded-lg ${
                          isMain ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-300' : 'border-green-200 bg-green-50'
                        }`}
                      >
                        <div className="flex justify-between items-start mb-3">
                          <div className="flex-1">
                            <div className="flex items-center">
                              <input
                                type="radio"
                                name="mainYmSt"
                                id={`main-ymst-${index}`}
                                checked={isMain}
                                onChange={() => setMainYmStIndex(selectedIndex)}
                                className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500"
                              />
                              <label htmlFor={`main-ymst-${index}`} className="font-semibold text-gray-800 text-sm">
                                {isMain && (
                                  <span className="text-blue-700 font-bold mr-1">Ana YM ST - </span>
                                )}
                                {ymSt.stok_kodu || ''}
                              </label>
                            </div>
                            <p className="text-xs text-gray-600 mt-1 line-clamp-2 ml-6">{ymSt.stok_adi || ''}</p>
                          </div>
                          <button
                            onClick={() => {
                              // If removing the main YMST, set a new main YMST
                              if (isMain) {
                                // Find new main index - prefer to keep among selected YMSTs
                                const newMainIndex = selectedYmSts.length > 1 
                                  ? (index === selectedYmSts.length - 1 ? index - 1 : index + 1) 
                                  : (autoGeneratedYmSts.length > 0 ? selectedYmSts.length : 0);
                                setMainYmStIndex(newMainIndex);
                              } else if (index < mainYmStIndex) {
                                // If removing an YMST with index less than main, adjust main index
                                setMainYmStIndex(mainYmStIndex - 1);
                              }
                              removeSelectedYmSt(index);
                            }}
                            className="ml-3 text-red-500 hover:text-red-700 transition-colors"
                          >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className={`inline-block px-3 py-1 text-xs rounded-full ${
                            isMain ? 'bg-blue-200 text-blue-800' : 'bg-green-100 text-green-800'
                          }`}>
                            {ymSt.source === 'manual-added' ? 'Elle Eklendi' : 'Veritabanı'}
                            {isMain && ' (Ana)'}
                          </span>
                          <span className="text-sm font-medium text-gray-700">
                            {parseFloat(ymSt.cap || 0)} mm
                          </span>
                        </div>
                      </div>
                    );
                  })}

                  {/* Otomatik oluşturulan YM ST'ler */}
                  {autoGeneratedYmSts.map((ymSt, index) => {
                    const autoIndex = selectedYmSts.length + index;
                    const isMain = mainYmStIndex === autoIndex;
                    
                    return (
                      <div
                        key={`auto-${index}`}
                        className={`p-4 border-2 rounded-lg ${
                          isMain ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-300' : 'border-purple-200 bg-purple-50'
                        }`}
                      >
                        <div className="flex justify-between items-start mb-3">
                          <div className="flex-1">
                            <div className="flex items-center">
                              <input
                                type="radio"
                                name="mainYmSt"
                                id={`main-ymst-auto-${index}`}
                                checked={isMain}
                                onChange={() => setMainYmStIndex(autoIndex)}
                                className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500"
                              />
                              <label htmlFor={`main-ymst-auto-${index}`} className="font-semibold text-gray-800 text-sm">
                                {isMain && (
                                  <span className="text-blue-700 font-bold mr-1">Ana YM ST - </span>
                                )}
                                {ymSt.stok_kodu || ''}
                              </label>
                            </div>
                            <p className="text-xs text-gray-600 mt-1 line-clamp-2 ml-6">{ymSt.stok_adi || ''}</p>
                          </div>
                          <button
                            onClick={() => {
                              // If removing the main YMST, set a new main YMST
                              if (isMain) {
                                // Find new main index - prefer to keep among auto YMSTs or selected YMSTs
                                const newMainIndex = autoGeneratedYmSts.length > 1 
                                  ? (index === autoGeneratedYmSts.length - 1 
                                    ? selectedYmSts.length + index - 1 
                                    : selectedYmSts.length + index + 1) 
                                  : (selectedYmSts.length > 0 ? 0 : 0);
                                setMainYmStIndex(newMainIndex);
                              } else if (autoIndex < mainYmStIndex) {
                                // If removing an YMST with index less than main, adjust main index
                                setMainYmStIndex(mainYmStIndex - 1);
                              }
                              removeAutoGeneratedYmSt(index);
                            }}
                            className="ml-3 text-red-500 hover:text-red-700 transition-colors"
                          >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className={`inline-block px-3 py-1 text-xs rounded-full ${
                            isMain ? 'bg-blue-200 text-blue-800' : 'bg-purple-100 text-purple-800'
                          }`}>
                            Otomatik Oluşturuldu
                            {isMain && ' (Ana)'}
                          </span>
                          <span className="text-sm font-medium text-gray-700">
                            {parseFloat(ymSt.cap || 0)} mm
                          </span>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}
          </div>

          {/* Reçete Bölümü - Kategorize Görüntüleme */}
          {(selectedYmSts.length > 0 || autoGeneratedYmSts.length > 0) && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-semibold flex items-center gap-2">
                  <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                    <span className="text-purple-600 font-bold">R</span>
                  </div>
                  Reçete Değerleri
                </h2>
                <div className="flex gap-3">
                  <button
                    onClick={() => fetchRecipesFromDatabase()}
                    disabled={isLoading}
                    className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors shadow-lg flex items-center gap-2 disabled:opacity-50"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                    </svg>
                    Veritabanından Getir
                  </button>
                  <button
                    onClick={() => {
                      // First calculate auto recipe values
                      calculateAutoRecipeValues();
                      
                      // Then ensure the Filmaşin Tipi field is updated in the UI
                      setTimeout(() => {
                        // Force UI refresh by setting state
                        setAllRecipes(prevRecipes => ({ ...prevRecipes }));
                      }, 100);
                    }}
                    className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors shadow-lg flex items-center gap-2"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7l4-4 4 4m0 6l-4 4-4-4" />
                    </svg>
                    Otomatik Doldur
                  </button>
                </div>
              </div>

              {/* YM ST Sekmeleri */}
              <div className="flex flex-wrap gap-2 mb-6 border-b">
                {[...selectedYmSts, ...autoGeneratedYmSts].map((ymSt, index) => (
                  <button
                    key={index}
                    onClick={() => setActiveRecipeTab(index)}
                    className={`px-4 py-2 rounded-t-lg font-medium transition-colors ${
                      activeRecipeTab === index
                        ? 'bg-purple-100 text-purple-700 border-b-2 border-purple-600'
                        : 'text-gray-600 hover:text-purple-600 hover:bg-purple-50'
                    }`}
                  >
                    YM ST #{index + 1}
                    <span className="text-xs block">
                      {parseFloat(ymSt.cap || 0)} mm
                    </span>
                  </button>
                ))}
              </div>

              {/* Reçete İçeriklerini Kategorize Göster */}
              {activeRecipeTab !== null && (
                <div className="space-y-6">
                  {/* MM GT Reçete */}
                  <div className="p-6 bg-red-50 rounded-lg">
                    <h3 className="text-lg font-medium mb-4 text-red-700">
                      MM GT #{activeRecipeTab + 1} Reçetesi
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {/* 8 alan için özel düzenleme - Shrink alanı dropdown ile */}
                      {[
                        { key: `YM.GT.${mmGtData.kod_2}.${Math.round(parseFloat(mmGtData.cap) * 100).toString().padStart(4, '0')}.${activeRecipeTab.toString().padStart(2, '0')}`, type: 'readonly' }, // YM GT bileşeni - sequence eşleştirme
                        { key: 'GTPKT01', type: 'input' },
                        { key: 'AMB.ÇEM.KARTON.GAL', type: 'input' },
                        { key: 'SM.7MMHALKA', type: 'input' },
                        { key: 'AMB.TOKA.SIGNODE.114P. DKP', type: 'input' },
                        { key: 'shrink', type: 'dropdown' }, // Özel shrink dropdown
                        { key: 'AMB.APEX CEMBER 38X080', type: 'input' },
                        { key: 'SM.DESİ.PAK', type: 'input' }
                      ].map(({ key, type }, idx) => {
                        const allYmSts = [...selectedYmSts, ...autoGeneratedYmSts];
                        let currentValue = '';
                        
                        if (type === 'readonly') {
                          currentValue = key;
                        } else if (key === 'shrink') {
                          // Mevcut shrink tipini bul
                          const shrinkKeys = ['AMB.SHRİNK.200*140CM', 'AMB.SHRİNK.200*160CM', 'AMB.SHRİNK.200*190CM'];
                          const currentShrinkKey = shrinkKeys.find(sk => allRecipes.mmGtRecipes[activeRecipeTab]?.[sk] > 0);
                          currentValue = currentShrinkKey || '';
                        } else {
                          currentValue = allRecipes.mmGtRecipes[activeRecipeTab]?.[key] || '';
                        }
                        
                        const friendlyName = type === 'readonly' ? 'YM GT Bileşeni' : friendlyNames[key] || key;
                        const statusText = type === 'readonly' ? 'Otomatik oluşturuldu' : getRecipeStatusText('mmgt', activeRecipeTab, key);
                        // Force 'readonly' type to use KG as the unit
                        
                        return (
                          <div key={key} className="space-y-2">
                            <label className="block text-sm font-medium text-gray-700">
                              {friendlyName}
                              <span className="text-xs text-gray-500 ml-2">
                                ({getOlcuBr(key)})
                              </span>
                            </label>
                            {type === 'readonly' ? (
                              <input
                                type="text"
                                value={currentValue}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 text-gray-600 focus:outline-none cursor-not-allowed"
                                readOnly
                              />
                            ) : type === 'dropdown' ? (
                              <div className="space-y-4">
                                <div className="space-y-2">
                                  <label className="block text-sm font-medium text-gray-700">
                                    Shrink Tipi
                                  </label>
                                  <select
                                    value={currentValue}
                                    onChange={(e) => handleShrinkChange(activeRecipeTab, e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                                  >
                                    <option value="">Shrink Tipi Seçin</option>
                                    <option value="AMB.SHRİNK.200*140CM">AMB.SHRİNK.200*140CM</option>
                                    <option value="AMB.SHRİNK.200*160CM">AMB.SHRİNK.200*160CM</option>
                                    <option value="AMB.SHRİNK.200*190CM">AMB.SHRİNK.200*190CM</option>
                                  </select>
                                </div>
                                <div className="space-y-2">
                                  <label className="block text-sm font-medium text-gray-700">
                                    Shrink Tüketimi
                                  </label>
                                  <input
                                    type="text"
                                    inputMode="decimal"
                                    value={currentValue ? normalizeDecimalDisplay(allRecipes.mmGtRecipes[activeRecipeTab]?.[currentValue] || 0) : ''}
                                    onChange={(e) => currentValue && updateRecipeValue('mmgt', activeRecipeTab, currentValue, e.target.value)}
                                    placeholder="Shrink Miktarı"
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                                    disabled={!currentValue}
                                    onKeyDown={(e) => currentValue && handleRecipeCommaToPoint(e, 'mmgt', activeRecipeTab, currentValue)}
                                  />
                                </div>
                              </div>
                            ) : (
                              <input
                                type="text"
                                inputMode="decimal"
                                value={normalizeDecimalDisplay(currentValue || '')}
                                onChange={(e) => updateRecipeValue('mmgt', activeRecipeTab, key, e.target.value)}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                                onKeyDown={(e) => handleRecipeCommaToPoint(e, 'mmgt', activeRecipeTab, key)}
                              />
                            )}
                            {statusText && (
                              <p className="text-xs text-gray-500 italic">{statusText}</p>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>

                  {/* YM GT Reçete */}
                  <div className="p-6 bg-yellow-50 rounded-lg">
                    <h3 className="text-lg font-medium mb-4 text-yellow-700">
                      YM GT Reçetesi
                    </h3>
                    <p className="text-sm text-gray-600 mb-3">
                      YM ST bağlantısı otomatik olarak yapılır. Sadece aşağıdaki 3 değeri düzenleyebilirsiniz:
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      {/* 3 alan için özel düzenleme - YM ST bileşeni readonly */}
                      {[
                        { key: [...selectedYmSts, ...autoGeneratedYmSts][activeRecipeTab]?.stok_kodu || 'YM.ST.PLACEHOLDER', type: 'readonly' }, // YM ST bileşeni otomatik
                        { key: 'GLV01', type: 'input' },
                        { key: '150 03', type: 'input' },
                        { key: 'SM.HİDROLİK.ASİT', type: 'input' }
                      ].map(({ key, type }, idx) => {
                        if (idx === 0) {
                          // İlk alan YM ST bileşeni - sadece gösterim için
                          return (
                            <div key={key} className="space-y-2">
                              <label className="block text-sm font-medium text-gray-700">
                                YM ST Bileşeni (Otomatik)
                                <span className="text-xs text-gray-500 ml-2">
                                  (KG)
                                </span>
                              </label>
                              <input
                                type="text"
                                value={key || ''}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 text-gray-600 focus:outline-none cursor-not-allowed"
                                readOnly
                              />
                              <p className="text-xs text-gray-500 italic">
                                Otomatik belirlendi
                              </p>
                            </div>
                          );
                        }
                        
                        const friendlyName = friendlyNames[key] || key;
                        const currentValue = allRecipes.ymGtRecipe?.[key] || '';
                        const statusText = getRecipeStatusText('ymgt', null, key);
                        
                        return (
                          <div key={key} className="space-y-2">
                            <label className="block text-sm font-medium text-gray-700">
                              {friendlyName}
                              <span className="text-xs text-gray-500 ml-2">
                                ({getOlcuBr(key)})
                              </span>
                            </label>
                            <input
                              type="text"
                              inputMode="decimal"
                              value={normalizeDecimalDisplay(currentValue || '')}
                              onChange={(e) => updateRecipeValue('ymgt', null, key, e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500"
                              onKeyDown={(e) => handleRecipeCommaToPoint(e, 'ymgt', null, key)}
                            />
                            {statusText && (
                              <p className="text-xs text-gray-500 italic">{statusText}</p>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>

                  {/* YM ST Reçete */}
                  <div className="p-6 bg-green-50 rounded-lg">
                    <h3 className="text-lg font-medium mb-4 text-green-700">
                      YM ST #{activeRecipeTab + 1} Reçetesi
                    </h3>
                    <p className="text-sm text-gray-600 mb-3">
                      FLM bağlantısı otomatik olarak oluşturulan versiyonu düzenleyebilirsiniz:
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {/* FLM ve TLC01 alanları */}
                      {[
                        { key: 'filmasin_kodu', type: 'input' }, // Filmaşin tipi düzenlenebilir
                        { key: 'TLC01', type: 'input' }
                      ].map(({ key, type }, idx) => {
                        if (idx === 0) {
                          // İlk alan Filmaşin tipi - düzenlenebilir
                          const filmasinCode = getFilmasinKodu([...selectedYmSts, ...autoGeneratedYmSts][activeRecipeTab]);
                          const statusText = getRecipeStatusText('ymst', activeRecipeTab, 'filmasin_kodu');
                          
                          return (
                            <div key={key} className="space-y-2">
                              <label className="block text-sm font-medium text-gray-700">
                                Filmaşin Tipi
                                <span className="text-xs text-gray-500 ml-2">
                                  (Kod)
                                </span>
                              </label>
                              <div className="flex gap-2">
                                <select
                                  className="w-1/3 p-2 border border-gray-300 rounded-md"
                                  value={filmasinCode.substring(4, 8)}
                                  onChange={(e) => {
                                    // Get the diameter part
                                    const newDiameter = e.target.value;
                                    // Get the quality part from existing code
                                    const quality = filmasinCode.substring(9);
                                    
                                    // Construct new filmasin code
                                    const newFilmasinCode = `FLM.${newDiameter}.${quality}`;
                                    
                                    // Get the active YM ST and its current filmasin code
                                    const activeYmSt = [...selectedYmSts, ...autoGeneratedYmSts][activeRecipeTab];
                                    const oldKey = getFilmasinKodu(activeYmSt);
                                    const oldValue = allRecipes.ymStRecipes[activeRecipeTab]?.[oldKey] || 1;
                                    
                                    // Update recipes with new key
                                    const updatedRecipes = { ...allRecipes };
                                    delete updatedRecipes.ymStRecipes[activeRecipeTab][oldKey];
                                    updatedRecipes.ymStRecipes[activeRecipeTab][newFilmasinCode] = oldValue;
                                    setAllRecipes(updatedRecipes);
                                    
                                    // Update recipe status
                                    const updatedStatus = { ...recipeStatus };
                                    updatedStatus.ymStRecipes[activeRecipeTab][newFilmasinCode] = 'manual';
                                    setRecipeStatus(updatedStatus);
                                  }}
                                >
                                  <option value="0550">5.50 mm</option>
                                  <option value="0600">6.00 mm</option>
                                  <option value="0700">7.00 mm</option>
                                  <option value="0800">8.00 mm</option>
                                  <option value="0900">9.00 mm</option>
                                </select>
                                
                                <select
                                  className="w-1/3 p-2 border border-gray-300 rounded-md"
                                  value={filmasinCode.substring(9)}
                                  onChange={(e) => {
                                    // Get the quality part
                                    const newQuality = e.target.value;
                                    // Get the diameter part from existing code
                                    const diameter = filmasinCode.substring(4, 8);
                                    
                                    // Construct new filmasin code
                                    const newFilmasinCode = `FLM.${diameter}.${newQuality}`;
                                    
                                    // Get the active YM ST and its current filmasin code
                                    const activeYmSt = [...selectedYmSts, ...autoGeneratedYmSts][activeRecipeTab];
                                    const oldKey = getFilmasinKodu(activeYmSt);
                                    const oldValue = allRecipes.ymStRecipes[activeRecipeTab]?.[oldKey] || 1;
                                    
                                    // Update recipes with new key
                                    const updatedRecipes = { ...allRecipes };
                                    delete updatedRecipes.ymStRecipes[activeRecipeTab][oldKey];
                                    updatedRecipes.ymStRecipes[activeRecipeTab][newFilmasinCode] = oldValue;
                                    setAllRecipes(updatedRecipes);
                                    
                                    // Update recipe status
                                    const updatedStatus = { ...recipeStatus };
                                    updatedStatus.ymStRecipes[activeRecipeTab][newFilmasinCode] = 'manual';
                                    setRecipeStatus(updatedStatus);
                                  }}
                                >
                                  <option value="1005">1005</option>
                                  <option value="1006">1006</option>
                                  <option value="1008">1008</option>
                                  <option value="1010">1010</option>
                                </select>
                              </div>
                              {statusText && (
                                <p className="text-xs text-gray-500 italic">{statusText}</p>
                              )}
                            </div>
                          );
                        }
                        
                        const friendlyName = friendlyNames[key] || key;
                        const currentValue = allRecipes.ymStRecipes[activeRecipeTab]?.[key] || '';
                        const statusText = getRecipeStatusText('ymst', activeRecipeTab, key);
                        
                        return (
                          <div key={key} className="space-y-2">
                            <label className="block text-sm font-medium text-gray-700">
                              {friendlyName}
                              <span className="text-xs text-gray-500 ml-2">
                                ({getOlcuBr(key)})
                              </span>
                            </label>
                            <input
                              type="text"
                              inputMode="decimal"
                              value={normalizeDecimalDisplay(currentValue || '')}
                              onChange={(e) => updateRecipeValue('ymst', activeRecipeTab, key, e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                              onKeyDown={(e) => handleRecipeCommaToPoint(e, 'ymst', activeRecipeTab, key)}
                            />
                            {statusText && (
                              <p className="text-xs text-gray-500 italic">{statusText}</p>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* İşlem Butonları */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex flex-wrap gap-4 justify-center">
              <button
                onClick={() => setCurrentStep('input')}
                className="bg-gray-500 text-white px-6 py-3 rounded-lg hover:bg-gray-600 transition-colors shadow-lg flex items-center gap-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                Geri
              </button>
              
              <button
                onClick={async () => {
                  try {
                    // First save to database if not already saved
                    if (!savedToDatabase) {
                      await saveToDatabase();
                    }
                    // Then generate Excel files
                    await generateExcelFiles();
                  } catch (error) {
                    console.error("İşlem sırasında hata oluştu:", error);
                    setError(`İşlem hatası: ${error.message}`);
                    toast.error(`İşlem hatası: ${error.message}`);
                  }
                }}
                disabled={isLoading}
                className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 shadow-lg flex items-center gap-2"
              >
                {isLoading ? (
                  <>
                    <svg className="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    İşlem Yapılıyor...
                  </>
                ) : (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
                    </svg>
                    Veritabanına Kaydet ve Excel Oluştur
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Settings Modal for User Input Values */}
      {showSettingsModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl w-full max-w-2xl">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-800 flex items-center gap-2">
                  <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  Hesaplama Değerleri
                </h2>
                <button
                  onClick={() => setShowSettingsModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              <div className="space-y-6">
                <p className="text-sm text-gray-600 mb-4">
                  Bu değerler hesaplamalarda kullanılacak olan sabit değerlerdir. Değişiklik yaptıktan sonra "Kaydet" düğmesine basarak kaydedin.
                </p>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                  <div className="space-y-2">
                    <label className="block text-sm font-medium text-gray-700">
                      Ash (Kül) (Kg/tonne)
                    </label>
                    <input
                      type="text"
                      value={userInputValues.ash}
                      onChange={(e) => setUserInputValues(prev => ({ 
                        ...prev, 
                        ash: e.target.value.replace(/,/g, '.') // Replace commas with points
                      }))}
                      onBlur={(e) => setUserInputValues(prev => ({
                        ...prev,
                        ash: parseFloat(e.target.value.replace(/,/g, '.')) || prev.ash // Convert to number on blur
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <label className="block text-sm font-medium text-gray-700">
                      Lapa (Kg/tonne)
                    </label>
                    <input
                      type="text"
                      value={userInputValues.lapa}
                      onChange={(e) => setUserInputValues(prev => ({ 
                        ...prev, 
                        lapa: e.target.value.replace(/,/g, '.') 
                      }))}
                      onBlur={(e) => setUserInputValues(prev => ({
                        ...prev,
                        lapa: parseFloat(e.target.value.replace(/,/g, '.')) || prev.lapa
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <label className="block text-sm font-medium text-gray-700">
                      Üretim Kapasitesi (Aylık)
                    </label>
                    <input
                      type="text"
                      value={userInputValues.uretim_kapasitesi_aylik}
                      onChange={(e) => setUserInputValues(prev => ({ 
                        ...prev, 
                        uretim_kapasitesi_aylik: e.target.value.replace(/,/g, '.') 
                      }))}
                      onBlur={(e) => setUserInputValues(prev => ({
                        ...prev,
                        uretim_kapasitesi_aylik: parseFloat(e.target.value.replace(/,/g, '.')) || prev.uretim_kapasitesi_aylik
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <label className="block text-sm font-medium text-gray-700">
                      Toplam Tüketilen Asit
                    </label>
                    <input
                      type="text"
                      value={userInputValues.toplam_tuketilen_asit}
                      onChange={(e) => setUserInputValues(prev => ({ 
                        ...prev, 
                        toplam_tuketilen_asit: e.target.value.replace(/,/g, '.') 
                      }))}
                      onBlur={(e) => setUserInputValues(prev => ({
                        ...prev,
                        toplam_tuketilen_asit: parseFloat(e.target.value.replace(/,/g, '.')) || prev.toplam_tuketilen_asit
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <label className="block text-sm font-medium text-gray-700">
                      Ortalama Üretim Çapı
                    </label>
                    <input
                      type="text"
                      value={userInputValues.ortalama_uretim_capi}
                      onChange={(e) => setUserInputValues(prev => ({ 
                        ...prev, 
                        ortalama_uretim_capi: e.target.value.replace(/,/g, '.') 
                      }))}
                      onBlur={(e) => setUserInputValues(prev => ({
                        ...prev,
                        ortalama_uretim_capi: parseFloat(e.target.value.replace(/,/g, '.')) || prev.ortalama_uretim_capi
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <label className="block text-sm font-medium text-gray-700">
                      Paketleme Dk. Adet
                    </label>
                    <input
                      type="text"
                      value={userInputValues.paketlemeDkAdet}
                      onChange={(e) => setUserInputValues(prev => ({ 
                        ...prev, 
                        paketlemeDkAdet: e.target.value.replace(/,/g, '.') 
                      }))}
                      onBlur={(e) => setUserInputValues(prev => ({
                        ...prev,
                        paketlemeDkAdet: parseFloat(e.target.value.replace(/,/g, '.')) || prev.paketlemeDkAdet
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>
                </div>
                
                <div className="flex justify-end space-x-3">
                  <button
                    onClick={() => setShowSettingsModal(false)}
                    className="px-4 py-2 text-sm border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50"
                  >
                    İptal
                  </button>
                  <button
                    onClick={saveUserInputValues}
                    className="px-4 py-2 text-sm bg-green-600 text-white rounded-md hover:bg-green-700"
                  >
                    Kaydet
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* YM ST Ekleme Modalı */}
      {showAddYmStModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl w-full max-w-md">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-800">YM ST Ekle</h2>
                <button
                  onClick={() => setShowAddYmStModal(false)}
                  className="text-gray-500 hover:text-gray-700 transition-colors"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Çap (mm)
                  </label>
                  <input
                    type="text"
                    inputMode="decimal"
                    value={normalizeDecimalDisplay(newYmStData.cap)}
                    onChange={(e) => setNewYmStData(prev => ({ ...prev, cap: normalizeInputValue(e.target.value) }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="0.00000"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Filmaşin
                  </label>
                  <select
                    value={newYmStData.filmasin}
                    onChange={(e) => setNewYmStData(prev => ({ ...prev, filmasin: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Seçin</option>
                    <option value="0550">0550</option>
                    <option value="0600">0600</option>
                    <option value="0700">0700</option>
                    <option value="0800">0800</option>
                    <option value="0900">0900</option>
                    <option value="1000">1000</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Kalite
                  </label>
                  <select
                    value={newYmStData.quality}
                    onChange={(e) => setNewYmStData(prev => ({ ...prev, quality: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Seçin</option>
                    <option value="1006">1006</option>
                    <option value="1008">1008</option>
                    <option value="1010">1010</option>
                  </select>
                </div>
              </div>
              
              <div className="flex gap-3 mt-6">
                <button
                  onClick={() => setShowAddYmStModal(false)}
                  className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  İptal
                </button>
                <button
                  onClick={handleAddYmSt}
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Ekle
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Talepler Modalı */}
      {showRequestsModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl w-full max-w-6xl max-h-[80vh] overflow-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-800 flex items-center gap-2">
                  <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                  </svg>
                  Bekleyen Talepler
                </h2>
                <div className="flex gap-3">
                  <button
                    onClick={fetchRequests}
                    disabled={isLoading}
                    className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors shadow-sm flex items-center gap-2"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    Yenile
                  </button>
                  <button
                    onClick={() => setShowRequestsModal(false)}
                    className="text-gray-500 hover:text-gray-700 transition-colors"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>
              
              {isLoading ? (
                <div className="flex justify-center items-center py-12">
                  <div className="text-gray-500 flex items-center gap-2">
                    <svg className="animate-spin h-5 w-5" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Yükleniyor...
                  </div>
                </div>
              ) : requests.length === 0 ? (
                <div className="text-center py-12">
                  <svg className="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                  </svg>
                  <p className="text-gray-500 text-lg">Bekleyen talep bulunamadı.</p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Çap
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Kaplama Türü
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Kaplama
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Mukavemet
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Ağırlık
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          İşlem
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {requests.map((request) => (
                        <tr key={request.id} className="hover:bg-gray-50 transition-colors">
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            {request.cap || 0} mm
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                              request.kod_2 === 'NIT' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'
                            }`}>
                              {request.kod_2 || ''}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {request.kaplama || '0'} gr/m²
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {request.min_mukavemet || '0'}-{request.max_mukavemet || '0'} MPa
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {request.kg || '0'} kg
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <div className="flex gap-2">
                              <button
                                onClick={() => handleSelectRequest(request)}
                                className="text-blue-600 hover:text-blue-900 transition-colors"
                              >
                                Seç
                              </button>
                              <button
                                onClick={() => {
                                  if (window.confirm('Bu talebi silmek istediğinizden emin misiniz?')) {
                                    deleteRequest(request.id);
                                  }
                                }}
                                className="text-red-600 hover:text-red-900 transition-colors"
                              >
                                Sil
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Mevcut MM GT / YM ST Modalı */}
      {showExistingMmGtModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl w-full max-w-6xl max-h-[80vh] overflow-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-800 flex items-center gap-2">
                  <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                  Veritabanından Seç
                </h2>
                <div className="flex gap-3">
                  <button
                    onClick={() => {
                      fetchExistingMmGts();
                      fetchExistingYmSts();
                    }}
                    disabled={isLoading}
                    className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors shadow-sm flex items-center gap-2"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    Yenile
                  </button>
                  <button
                    onClick={() => setShowExistingMmGtModal(false)}
                    className="text-gray-500 hover:text-gray-700 transition-colors"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>
              
              {/* Tab'lar */}
              <div className="flex gap-4 mb-6 border-b">
                <button
                  onClick={() => setActiveDbTab('mmgt')}
                  className={`px-4 py-2 font-medium transition-colors ${
                    activeDbTab === 'mmgt'
                      ? 'text-purple-600 border-b-2 border-purple-600'
                      : 'text-gray-600 hover:text-purple-600'
                  }`}
                >
                  MM GT
                </button>
                <button
                  onClick={() => setActiveDbTab('ymst')}
                  className={`px-4 py-2 font-medium transition-colors ${
                    activeDbTab === 'ymst'
                      ? 'text-purple-600 border-b-2 border-purple-600'
                      : 'text-gray-600 hover:text-purple-600'
                  }`}
                >
                  YM ST
                </button>
              </div>
              
              {/* MM GT Tab İçeriği */}
              {activeDbTab === 'mmgt' && (
                <>
                  {existingMmGts.length === 0 ? (
                    <div className="text-center py-12">
                      <svg className="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                      <p className="text-gray-500 text-lg">Mevcut MM GT bulunamadı.</p>
                    </div>
                  ) : (
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Stok Kodu
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Çap
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Kaplama Türü
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Kaplama
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Mukavemet
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Ağırlık
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              İşlem
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {existingMmGts.map((mmGt) => (
                            <tr key={mmGt.id} className="hover:bg-gray-50 transition-colors">
                              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                {mmGt.stok_kodu || ''}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {parseFloat(mmGt.cap || 0)} mm
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                  mmGt.kod_2 === 'NIT' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'
                                }`}>
                                  {mmGt.kod_2 || ''}
                                </span>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {mmGt.kaplama || '0'} gr/m²
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {mmGt.min_mukavemet || '0'}-{mmGt.max_mukavemet || '0'} MPa
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {mmGt.kg || '0'} kg
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <div className="flex gap-2">
                                  <button
                                    onClick={() => handleSelectExistingMmGt(mmGt)}
                                    className="text-purple-600 hover:text-purple-900 transition-colors"
                                  >
                                    Seç
                                  </button>
                                  <button
                                    onClick={() => handleDeleteClick(mmGt, 'mmgt')}
                                    className="text-red-600 hover:text-red-900 transition-colors"
                                  >
                                    Sil
                                  </button>
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  )}
                </>
              )}
              
              {/* YM ST Tab İçeriği */}
              {activeDbTab === 'ymst' && (
                <>
                  {existingYmSts.length === 0 ? (
                    <div className="text-center py-12">
                      <svg className="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                      <p className="text-gray-500 text-lg">Mevcut YM ST bulunamadı.</p>
                    </div>
                  ) : (
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Stok Kodu
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Çap
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Filmaşin
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Kalite
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              İşlem
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {existingYmSts.map((ymSt) => (
                            <tr key={ymSt.id} className="hover:bg-gray-50 transition-colors">
                              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                {ymSt.stok_kodu || ''}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {parseFloat(ymSt.cap || 0)} mm
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {ymSt.filmasin || ''}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {ymSt.quality || ''}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <button
                                  onClick={() => handleDeleteClick(ymSt, 'ymst')}
                                  className="text-red-600 hover:text-red-900 transition-colors"
                                >
                                  Sil
                                </button>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  )}
                </>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Silme Onay Modalı */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl w-full max-w-md">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-800">Silme Onayı</h2>
                <button
                  onClick={() => handleDeleteCancel()}
                  className="text-gray-500 hover:text-gray-700 transition-colors"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              <p className="text-gray-600 mb-6">
                {deleteType === 'mmgt' 
                  ? 'Bu MM GT\'yi ve tüm bağlı verilerini (YM GT\'ler, reçeteler vb.) silmek istediğinizden emin misiniz?'
                  : 'Bu YM ST\'yi ve bağlı reçetelerini silmek istediğinizden emin misiniz?'
                }
              </p>
              
              <div className="flex gap-3">
                <button
                  onClick={() => handleDeleteCancel()}
                  className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  İptal
                </button>
                <button
                  onClick={() => deleteType === 'mmgt' ? deleteMmGt(itemToDelete) : deleteYmSt(itemToDelete)}
                  disabled={isLoading}
                  className="flex-1 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50"
                >
                  {isLoading ? 'Siliniyor...' : 'Sil'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Hata ve Başarı Mesajları */}
      {error && (
        <div className="mt-6 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4 shadow-sm">
          <div className="flex items-center gap-2">
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
            {error}
          </div>
        </div>
      )}
      
      {successMessage && (
        <div className="mt-6 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg mb-4 shadow-sm">
          <div className="flex items-center gap-2">
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            {successMessage}
          </div>
        </div>
      )}
    </div>
  );
};

export default GalvanizliTelNetsis;